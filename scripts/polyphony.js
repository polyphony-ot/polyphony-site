/* eslint-env node, browser */
/* eslint strict: 0 */
/* global Module */

/**
 * @file The main entry point for libot.js. The {{lib}} and {{emscripten}}
 *       comments in this file will be replaced with the sources in lib and the
 *       generated Emscripten code, respectively.
 * @author Greg Curtis <greg.r.curtis@gmail.com>
 */


/** @namespace libot */
var libot = {};

(function() {

    /**
     * Module is a variable created by Emscripten and contains all of the
     * functions exported by Emscripten. It is used whenever we want to do
     * something with code generated by Emscripten.
     *
     * @var {object} Module
     */
// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  Module['arguments'] = process['argv'].slice(2);

  module['exports'] = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

  eval("if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined"); // wipe out the SpiderMonkey shell 'gc' function, which can confuse closure (uses it as a minified name, and it is then initted to a non-falsey value unexpectedly)
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?\{ ?[^}]* ?\}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_ && type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [null,null,null,null],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      var evalled = eval('(function(' + args.join(',') + '){ ' + source + ' })'); // new Function does not allow upvars in node
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;

function jsCall() {
  var args = Array.prototype.slice.call(arguments);
  return Runtime.functionPointers[args[0]].apply(null, args.slice(1));
}








//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = Module['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      value = intArrayFromString(value);
      type = 'array';
    }
    if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;

// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    return parse();
  } catch(e) {
    return func;
  }
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function stackTrace() {
  var stack = new Error().stack;
  return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
}

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 4096;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be more reasonable');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
    Module.printErr('Exiting runtime. Any attempt to access the compiled C code may fail from now. If you want to keep the runtime alive, set Module["noExitRuntime"] = true or build with -s NO_EXIT_RUNTIME=1');
  }
  callRuntimeCallbacks(__ATEXIT__);
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[(((buffer)+(i))>>0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + Runtime.alignMemory(1995);
/* global initializers */ __ATINIT__.push();


/* memory initializer */ allocate([0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,110,117,108,108,0,0,0,0,102,97,108,115,101,0,0,0,116,114,117,101,0,0,0,0,0,0,0,0,0,0,0,0,34,92,8,12,10,13,9,0,117,37,48,52,120,0,0,0,91,93,0,0,0,0,0,0,37,100,0,0,0,0,0,0,37,46,48,102,0,0,0,0,37,101,0,0,0,0,0,0,37,102,0,0,0,0,0,0,0,0,192,224,240,248,252,0,67,108,105,101,110,116,32,114,101,99,101,105,118,101,100,32,111,112,58,32,37,115,10,0,0,0,0,0,0,0,0,0,67,108,105,101,110,116,32,99,111,117,108,100,110,39,116,32,100,101,99,111,100,101,32,111,112,46,32,69,114,114,111,114,32,99,111,100,101,58,32,37,100,46,0,0,0,0,0,0,79,112,32,37,115,32,119,97,115,32,97,99,107,110,111,119,108,101,100,103,101,100,46,10,0,0,0,0,0,0,0,0,67,108,105,101,110,116,32,99,111,117,108,100,110,39,116,32,116,114,97,110,115,102,111,114,109,32,105,116,115,32,97,110,116,105,99,105,112,97,116,101,100,32,111,112,46,32,69,114,114,111,114,32,99,111,100,101,58,32,37,100,46,0,0,0,102,97,108,115,101,0,0,0,99,108,105,101,110,116,46,99,0,0,0,0,0,0,0,0,111,116,95,99,108,105,101,110,116,95,114,101,99,101,105,118,101,0,0,0,0,0,0,0,67,108,105,101,110,116,32,99,111,117,108,100,110,39,116,32,116,114,97,110,115,102,111,114,109,32,105,116,115,32,98,117,102,102,101,114,46,32,69,114,114,111,114,32,99,111,100,101,58,32,37,100,46,0,0,0,67,108,105,101,110,116,32,99,111,117,108,100,110,39,116,32,97,100,100,32,111,112,32,116,111,32,116,104,101,32,98,117,102,102,101,114,58,32,37,115,10,0,0,0,0,0,0,0,67,108,105,101,110,116,39,115,32,98,117,102,102,101,114,32,105,115,32,110,111,119,58,32,37,115,10,0,0,0,0,0,33,34,66,111,116,104,32,111,112,32,99,111,109,112,111,110,101,110,116,115,32,115,104,111,117,108,100,32,110,101,118,101,114,32,98,101,32,78,85,76,76,46,34,0,0,0,0,0,99,111,109,112,111,115,101,46,99,0,0,0,0,0,0,0,111,116,95,99,111,109,112,111,115,101,0,0,0,0,0,0,33,34,73,116,101,114,97,116,111,114,32,100,111,101,115,110,39,116,32,107,110,111,119,32,104,111,119,32,116,111,32,104,97,110,100,108,101,32,116,104,105,115,32,99,111,109,112,111,110,101,110,116,32,116,121,112,101,46,34,0,0,0,0,0,111,116,46,99,0,0,0,0,111,116,95,105,116,101,114,95,115,107,105,112,0,0,0,0,99,108,105,101,110,116,73,100,0,0,0,0,0,0,0,0,112,97,114,101,110,116,0,0,104,97,115,104,0,0,0,0,99,111,109,112,111,110,101,110,116,115,0,0,0,0,0,0,116,121,112,101,0,0,0,0,115,107,105,112,0,0,0,0,99,111,117,110,116,0,0,0,105,110,115,101,114,116,0,0,116,101,120,116,0,0,0,0,100,101,108,101,116,101,0,0,111,112,101,110,69,108,101,109,101,110,116,0,0,0,0,0,101,108,101,109,101,110,116,0,99,108,111,115,101,69,108,101,109,101,110,116,0,0,0,0,102,111,114,109,97,116,116,105,110,103,66,111,117,110,100,97,114,121,0,0,0,0,0,0,116,121,112,101,0,0,0,0,115,107,105,112,0,0,0,0,99,111,117,110,116,0,0,0,105,110,115,101,114,116,0,0,116,101,120,116,0,0,0,0,100,101,108,101,116,101,0,0,111,112,101,110,69,108,101,109,101,110,116,0,0,0,0,0,101,108,101,109,101,110,116,0,99,108,111,115,101,69,108,101,109,101,110,116,0,0,0,0,99,108,105,101,110,116,73,100,0,0,0,0,0,0,0,0,112,97,114,101,110,116,0,0,104,97,115,104,0,0,0,0,99,111,109,112,111,110,101,110,116,115,0,0,0,0,0,0,83,101,114,118,101,114,32,114,101,99,101,105,118,101,100,32,111,112,58,32,37,115,10,0,0,0,0,0,0,0,0,0,83,101,114,118,101,114,32,99,111,117,108,100,110,39,116,32,100,101,99,111,100,101,32,111,112,58,32,37,115,10,0,0,83,101,114,118,101,114,39,115,32,100,111,99,117,109,101,110,116,32,105,115,32,110,111,119,58,32,37,115,10,0,0,0,83,101,114,118,101,114,32,99,111,117,108,100,110,39,116,32,102,105,110,100,32,116,104,101,32,112,97,114,101,110,116,32,111,102,32,116,104,101,32,114,101,99,101,105,118,101,100,32,111,112,58,32,37,115,10,0,83,101,114,118,101,114,32,116,114,97,110,115,102,111,114,109,105,110,103,58,10,9,37,115,10,9,37,115,10,0,0,0,83,101,114,118,101,114,32,116,114,97,110,115,102,111,114,109,32,102,97,105,108,101,100,46,10,0,0,0,0,0,0,0,83,101,114,118,101,114,32,116,114,97,110,115,102,111,114,109,32,115,117,99,99,101,101,100,101,100,58,10,9,37,115,10,9,37,115,10,0,0,0,0,83,101,114,118,101,114,32,115,101,116,116,105,110,103,32,102,105,114,115,116,32,111,112,58,32,37,115,10,0,0,0,0,83,101,114,118,101,114,32,97,112,112,101,110,100,105,110,103,58,10,9,37,115,10,9,37,115,10,0,0,0,0,0,0,83,101,114,118,101,114,32,97,112,112,101,110,100,32,102,97,105,108,101,100,46,10,0,0,83,101,114,118,101,114,32,115,101,110,116,32,111,112,58,32,37,115,10,0,0,0,0,0,40,109,100,32,33,61,32,48,76,41,0,0,0,0,0,0,115,104,97,49,46,99,0,0,115,104,97,49,95,105,110,105,116,0,0,0,0,0,0,0,115,104,97,49,95,112,114,111,99,101,115,115,0,0,0,0,40,105,110,32,33,61,32,48,76,41,0,0,0,0,0,0,115,104,97,49,95,100,111,110,101,0,0,0,0,0,0,0,40,111,117,116,32,33,61,32,48,76,41,0,0,0,0,0,0,0,0,0,0,0,0,0,33,34,66,111,116,104,32,111,112,32,99,111,109,112,111,110,101,110,116,115,32,115,104,111,117,108,100,32,110,101,118,101,114,32,98,101,32,78,85,76,76,46,34,0,0,0,0,0,120,102,111,114,109,46,99,0,111,116,95,120,102,111,114,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


   
  Module["_tolower"] = _tolower;

  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

   
  Module["_memset"] = _memset;

  
   
  Module["_strlen"] = _strlen; 
  Module["_strcat"] = _strcat;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

  function _abort() {
      Module['abort']();
    }

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,CONTENT_OWNING:1,CONTENT_FLEXIBLE:2,CONTENT_FIXED:3,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.contents = [];
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },ensureFlexible:function (node) {
        if (node.contentMode !== MEMFS.CONTENT_FLEXIBLE) {
          var contents = node.contents;
          node.contents = Array.prototype.slice.call(contents);
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        }
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.contents.length;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.ensureFlexible(node);
            var contents = node.contents;
            if (attr.size < contents.length) contents.length = attr.size;
            else while (attr.size > contents.length) contents.push(0);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          var node = stream.node;
          node.timestamp = Date.now();
          var contents = node.contents;
          if (length && contents.length === 0 && position === 0 && buffer.subarray) {
            // just replace it with the new data
            assert(buffer.length);
            if (canOwn && offset === 0) {
              node.contents = buffer; // this could be a subarray of Emscripten HEAP, or allocated from some other source.
              node.contentMode = (buffer.buffer === HEAP8.buffer) ? MEMFS.CONTENT_OWNING : MEMFS.CONTENT_FIXED;
            } else {
              node.contents = new Uint8Array(buffer.subarray(offset, offset+length));
              node.contentMode = MEMFS.CONTENT_FIXED;
            }
            return length;
          }
          MEMFS.ensureFlexible(node);
          var contents = node.contents;
          while (contents.length < position) contents.push(0);
          for (var i = 0; i < length; i++) {
            contents[position + i] = buffer[offset + i];
          }
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.contents.length;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.ensureFlexible(stream.node);
          var contents = stream.node.contents;
          var limit = offset + length;
          while (limit > contents.length) contents.push(0);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          stream.position = position;
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = Math.floor(idx / this.chunkSize);
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
            // Find length
            var xhr = new XMLHttpRequest();
            xhr.open('HEAD', url, false);
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            var datalength = Number(xhr.getResponseHeader("Content-length"));
            var header;
            var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
            var chunkSize = 1024*1024; // Chunk size in bytes
  
            if (!hasByteServing) chunkSize = datalength;
  
            // Function to get a range from the remote URL.
            var doXHR = (function(from, to) {
              if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
              if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
              // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
              var xhr = new XMLHttpRequest();
              xhr.open('GET', url, false);
              if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
              // Some hints to the browser that we want binary data.
              if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
              if (xhr.overrideMimeType) {
                xhr.overrideMimeType('text/plain; charset=x-user-defined');
              }
  
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              if (xhr.response !== undefined) {
                return new Uint8Array(xhr.response || []);
              } else {
                return intArrayFromString(xhr.responseText || '', true);
              }
            });
            var lazyArray = this;
            lazyArray.setDataGetter(function(chunkNum) {
              var start = chunkNum * chunkSize;
              var end = (chunkNum+1) * chunkSize - 1; // including this byte
              end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
              if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                lazyArray.chunks[chunkNum] = doXHR(start, end);
              }
              if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
              return lazyArray.chunks[chunkNum];
            });
  
            this._length = datalength;
            this._chunkSize = chunkSize;
            this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces "//" comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the "#" for "//" again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                url = url + addr + ':' + port;
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('error', function() {
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
            }
          });
          sock.server.on('closed', function() {
            sock.server = null;
          });
          sock.server.on('error', function() {
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }


  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  var _llvm_pow_f64=Math_pow;

   
  Module["_i64Add"] = _i64Add;

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  var _fabs=Math_abs;

  var _floor=Math_floor;

  function ___errno_location() {
      return ___errno_state;
    }

   
  Module["_strcpy"] = _strcpy;

  var Browser={mainLoop:{scheduler:null,method:"",shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          function pointerLockChange() {
            Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                  document['mozPointerLockElement'] === canvas ||
                                  document['webkitPointerLockElement'] === canvas ||
                                  document['msPointerLockElement'] === canvas;
          }
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          if (useWebGL) {
            var contextAttributes = {
              antialias: false,
              alpha: false
            };
  
            if (webGLContextAttributes) {
              for (var attribute in webGLContextAttributes) {
                contextAttributes[attribute] = webGLContextAttributes[attribute];
              }
            }
  
  
            canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
            try {
              ['experimental-webgl', 'webgl'].some(function(webglId) {
                return ctx = canvas.getContext(webglId, contextAttributes);
              });
            } finally {
              canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
            }
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e]);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
  
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          GLctx = Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          setTimeout(func, 1000/60);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           window['setTimeout'];
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        return Math.max(-1, Math.min(1, event.type === 'DOMMouseScroll' ? event.detail : -event.wheelDelta));
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      }};

  
  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[(((s)+(i))>>0)]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))>>0)]=0;
      return result.length;
    }function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + 5242880;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);

var Math_min = Math.min;
function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function asmPrintInt(x, y) {
  Module.print('int ' + x + ',' + y);// + ' ' + new Error().stack);
}
function asmPrintFloat(x, y) {
  Module.print('float ' + x + ',' + y);// + ' ' + new Error().stack);
}
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ctlz_i8=env.ctlz_i8|0;
  var _stderr=env._stderr|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = +env.NaN, inf = +env.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var asmPrintInt=env.asmPrintInt;
  var asmPrintFloat=env.asmPrintFloat;
  var Math_min=env.min;
  var jsCall=env.jsCall;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_iii=env.nullFunc_iii;
  var invoke_ii=env.invoke_ii;
  var invoke_vi=env.invoke_vi;
  var invoke_iii=env.invoke_iii;
  var _fabs=env._fabs;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _send=env._send;
  var ___setErrNo=env.___setErrNo;
  var ___assert_fail=env.___assert_fail;
  var _floor=env._floor;
  var _fflush=env._fflush;
  var _pwrite=env._pwrite;
  var __reallyNegative=env.__reallyNegative;
  var _sbrk=env._sbrk;
  var _snprintf=env._snprintf;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _fileno=env._fileno;
  var _sysconf=env._sysconf;
  var _mkport=env._mkport;
  var _sprintf=env._sprintf;
  var _write=env._write;
  var ___errno_location=env.___errno_location;
  var _abort=env._abort;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _fprintf=env._fprintf;
  var __formatString=env.__formatString;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
STACKTOP = (STACKTOP + 7)&-8;
  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}
function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _array_init($arr,$size) {
 $arr = $arr|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $arr;
 $1 = $size;
 $2 = $0; //@line 5 "array.c"
 HEAP32[$2>>2] = 0; //@line 5 "array.c"
 $3 = $0; //@line 6 "array.c"
 $4 = (($3) + 4|0); //@line 6 "array.c"
 HEAP32[$4>>2] = 0; //@line 6 "array.c"
 $5 = $1; //@line 7 "array.c"
 $6 = $0; //@line 7 "array.c"
 $7 = (($6) + 8|0); //@line 7 "array.c"
 HEAP32[$7>>2] = $5; //@line 7 "array.c"
 $8 = $0; //@line 8 "array.c"
 $9 = (($8) + 12|0); //@line 8 "array.c"
 HEAP32[$9>>2] = 0; //@line 8 "array.c"
 STACKTOP = sp;return; //@line 9 "array.c"
}
function _array_free($arr) {
 $arr = $arr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $arr;
 $1 = $0; //@line 11 "array.c"
 $2 = (($1) + 12|0); //@line 11 "array.c"
 $3 = HEAP32[$2>>2]|0; //@line 11 "array.c"
 _free($3); //@line 11 "array.c"
 STACKTOP = sp;return; //@line 11 "array.c"
}
function _array_ensure_size($arr) {
 $arr = $arr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $arr;
 $1 = $0; //@line 24 "array.c"
 $2 = HEAP32[$1>>2]|0; //@line 24 "array.c"
 $3 = ($2|0)==(0); //@line 24 "array.c"
 if ($3) {
  $4 = $0; //@line 25 "array.c"
  $5 = (($4) + 4|0); //@line 25 "array.c"
  HEAP32[$5>>2] = 1; //@line 25 "array.c"
  $6 = $0; //@line 26 "array.c"
  $7 = (($6) + 8|0); //@line 26 "array.c"
  $8 = HEAP32[$7>>2]|0; //@line 26 "array.c"
  $9 = (_malloc($8)|0); //@line 26 "array.c"
  $10 = $0; //@line 26 "array.c"
  $11 = (($10) + 12|0); //@line 26 "array.c"
  HEAP32[$11>>2] = $9; //@line 26 "array.c"
  STACKTOP = sp;return; //@line 31 "array.c"
 }
 $12 = $0; //@line 27 "array.c"
 $13 = HEAP32[$12>>2]|0; //@line 27 "array.c"
 $14 = $0; //@line 27 "array.c"
 $15 = (($14) + 4|0); //@line 27 "array.c"
 $16 = HEAP32[$15>>2]|0; //@line 27 "array.c"
 $17 = ($13>>>0)>=($16>>>0); //@line 27 "array.c"
 if ($17) {
  $18 = $0; //@line 28 "array.c"
  $19 = (($18) + 4|0); //@line 28 "array.c"
  $20 = HEAP32[$19>>2]|0; //@line 28 "array.c"
  $21 = $20<<1; //@line 28 "array.c"
  HEAP32[$19>>2] = $21; //@line 28 "array.c"
  $22 = $0; //@line 29 "array.c"
  $23 = (($22) + 12|0); //@line 29 "array.c"
  $24 = HEAP32[$23>>2]|0; //@line 29 "array.c"
  $25 = $0; //@line 29 "array.c"
  $26 = (($25) + 8|0); //@line 29 "array.c"
  $27 = HEAP32[$26>>2]|0; //@line 29 "array.c"
  $28 = $0; //@line 29 "array.c"
  $29 = (($28) + 4|0); //@line 29 "array.c"
  $30 = HEAP32[$29>>2]|0; //@line 29 "array.c"
  $31 = Math_imul($27, $30)|0; //@line 29 "array.c"
  $32 = (_realloc($24,$31)|0); //@line 29 "array.c"
  $33 = $0; //@line 29 "array.c"
  $34 = (($33) + 12|0); //@line 29 "array.c"
  HEAP32[$34>>2] = $32; //@line 29 "array.c"
 }
 STACKTOP = sp;return; //@line 31 "array.c"
}
function _array_append($arr) {
 $arr = $arr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $arr;
 $1 = $0; //@line 34 "array.c"
 _array_ensure_size($1); //@line 34 "array.c"
 $2 = $0; //@line 35 "array.c"
 $3 = HEAP32[$2>>2]|0; //@line 35 "array.c"
 $temp = $3; //@line 35 "array.c"
 $4 = $0; //@line 36 "array.c"
 $5 = HEAP32[$4>>2]|0; //@line 36 "array.c"
 $6 = (($5) + 1)|0; //@line 36 "array.c"
 HEAP32[$4>>2] = $6; //@line 36 "array.c"
 $7 = $0; //@line 38 "array.c"
 $8 = (($7) + 12|0); //@line 38 "array.c"
 $9 = HEAP32[$8>>2]|0; //@line 38 "array.c"
 $10 = $0; //@line 38 "array.c"
 $11 = (($10) + 8|0); //@line 38 "array.c"
 $12 = HEAP32[$11>>2]|0; //@line 38 "array.c"
 $13 = $temp; //@line 38 "array.c"
 $14 = Math_imul($12, $13)|0; //@line 38 "array.c"
 $15 = (($9) + ($14)|0); //@line 38 "array.c"
 STACKTOP = sp;return ($15|0); //@line 38 "array.c"
}
function _cJSON_Delete($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $c;
 while(1) {
  $1 = $0; //@line 84 "cjson/cjson.c"
  $2 = ($1|0)!=(0|0); //@line 84 "cjson/cjson.c"
  if (!($2)) {
   break;
  }
  $3 = $0; //@line 86 "cjson/cjson.c"
  $4 = HEAP32[$3>>2]|0; //@line 86 "cjson/cjson.c"
  $next = $4; //@line 86 "cjson/cjson.c"
  $5 = $0; //@line 87 "cjson/cjson.c"
  $6 = (($5) + 12|0); //@line 87 "cjson/cjson.c"
  $7 = HEAP32[$6>>2]|0; //@line 87 "cjson/cjson.c"
  $8 = $7 & 256; //@line 87 "cjson/cjson.c"
  $9 = ($8|0)!=(0); //@line 87 "cjson/cjson.c"
  if (!($9)) {
   $10 = $0; //@line 87 "cjson/cjson.c"
   $11 = (($10) + 8|0); //@line 87 "cjson/cjson.c"
   $12 = HEAP32[$11>>2]|0; //@line 87 "cjson/cjson.c"
   $13 = ($12|0)!=(0|0); //@line 87 "cjson/cjson.c"
   if ($13) {
    $14 = $0; //@line 87 "cjson/cjson.c"
    $15 = (($14) + 8|0); //@line 87 "cjson/cjson.c"
    $16 = HEAP32[$15>>2]|0; //@line 87 "cjson/cjson.c"
    _cJSON_Delete($16); //@line 87 "cjson/cjson.c"
   }
  }
  $17 = $0; //@line 88 "cjson/cjson.c"
  $18 = (($17) + 12|0); //@line 88 "cjson/cjson.c"
  $19 = HEAP32[$18>>2]|0; //@line 88 "cjson/cjson.c"
  $20 = $19 & 256; //@line 88 "cjson/cjson.c"
  $21 = ($20|0)!=(0); //@line 88 "cjson/cjson.c"
  if (!($21)) {
   $22 = $0; //@line 88 "cjson/cjson.c"
   $23 = (($22) + 16|0); //@line 88 "cjson/cjson.c"
   $24 = HEAP32[$23>>2]|0; //@line 88 "cjson/cjson.c"
   $25 = ($24|0)!=(0|0); //@line 88 "cjson/cjson.c"
   if ($25) {
    $26 = HEAP32[24>>2]|0; //@line 88 "cjson/cjson.c"
    $27 = $0; //@line 88 "cjson/cjson.c"
    $28 = (($27) + 16|0); //@line 88 "cjson/cjson.c"
    $29 = HEAP32[$28>>2]|0; //@line 88 "cjson/cjson.c"
    FUNCTION_TABLE_vi[$26 & 15]($29); //@line 88 "cjson/cjson.c"
   }
  }
  $30 = $0; //@line 89 "cjson/cjson.c"
  $31 = (($30) + 32|0); //@line 89 "cjson/cjson.c"
  $32 = HEAP32[$31>>2]|0; //@line 89 "cjson/cjson.c"
  $33 = ($32|0)!=(0|0); //@line 89 "cjson/cjson.c"
  if ($33) {
   $34 = HEAP32[24>>2]|0; //@line 89 "cjson/cjson.c"
   $35 = $0; //@line 89 "cjson/cjson.c"
   $36 = (($35) + 32|0); //@line 89 "cjson/cjson.c"
   $37 = HEAP32[$36>>2]|0; //@line 89 "cjson/cjson.c"
   FUNCTION_TABLE_vi[$34 & 15]($37); //@line 89 "cjson/cjson.c"
  }
  $38 = HEAP32[24>>2]|0; //@line 90 "cjson/cjson.c"
  $39 = $0; //@line 90 "cjson/cjson.c"
  FUNCTION_TABLE_vi[$38 & 15]($39); //@line 90 "cjson/cjson.c"
  $40 = $next; //@line 91 "cjson/cjson.c"
  $0 = $40; //@line 91 "cjson/cjson.c"
 }
 STACKTOP = sp;return; //@line 93 "cjson/cjson.c"
}
function _cJSON_ParseWithOpts($value,$return_parse_end,$require_null_terminated) {
 $value = $value|0;
 $return_parse_end = $return_parse_end|0;
 $require_null_terminated = $require_null_terminated|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $end = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $value;
 $2 = $return_parse_end;
 $3 = $require_null_terminated;
 $end = 0; //@line 266 "cjson/cjson.c"
 $4 = (_cJSON_New_Item()|0); //@line 267 "cjson/cjson.c"
 $c = $4; //@line 267 "cjson/cjson.c"
 HEAP32[8>>2] = 0; //@line 268 "cjson/cjson.c"
 $5 = $c; //@line 269 "cjson/cjson.c"
 $6 = ($5|0)!=(0|0); //@line 269 "cjson/cjson.c"
 if (!($6)) {
  $0 = 0; //@line 269 "cjson/cjson.c"
  $28 = $0; //@line 278 "cjson/cjson.c"
  STACKTOP = sp;return ($28|0); //@line 278 "cjson/cjson.c"
 }
 $7 = $c; //@line 271 "cjson/cjson.c"
 $8 = $1; //@line 271 "cjson/cjson.c"
 $9 = (_skip($8)|0); //@line 271 "cjson/cjson.c"
 $10 = (_parse_value($7,$9)|0); //@line 271 "cjson/cjson.c"
 $end = $10; //@line 271 "cjson/cjson.c"
 $11 = $end; //@line 272 "cjson/cjson.c"
 $12 = ($11|0)!=(0|0); //@line 272 "cjson/cjson.c"
 if (!($12)) {
  $13 = $c; //@line 272 "cjson/cjson.c"
  _cJSON_Delete($13); //@line 272 "cjson/cjson.c"
  $0 = 0; //@line 272 "cjson/cjson.c"
  $28 = $0; //@line 278 "cjson/cjson.c"
  STACKTOP = sp;return ($28|0); //@line 278 "cjson/cjson.c"
 }
 $14 = $3; //@line 275 "cjson/cjson.c"
 $15 = ($14|0)!=(0); //@line 275 "cjson/cjson.c"
 do {
  if ($15) {
   $16 = $end; //@line 275 "cjson/cjson.c"
   $17 = (_skip($16)|0); //@line 275 "cjson/cjson.c"
   $end = $17; //@line 275 "cjson/cjson.c"
   $18 = $end; //@line 275 "cjson/cjson.c"
   $19 = HEAP8[$18>>0]|0; //@line 275 "cjson/cjson.c"
   $20 = ($19<<24>>24)!=(0); //@line 275 "cjson/cjson.c"
   if (!($20)) {
    break;
   }
   $21 = $c; //@line 275 "cjson/cjson.c"
   _cJSON_Delete($21); //@line 275 "cjson/cjson.c"
   $22 = $end; //@line 275 "cjson/cjson.c"
   HEAP32[8>>2] = $22; //@line 275 "cjson/cjson.c"
   $0 = 0; //@line 275 "cjson/cjson.c"
   $28 = $0; //@line 278 "cjson/cjson.c"
   STACKTOP = sp;return ($28|0); //@line 278 "cjson/cjson.c"
  }
 } while(0);
 $23 = $2; //@line 276 "cjson/cjson.c"
 $24 = ($23|0)!=(0|0); //@line 276 "cjson/cjson.c"
 if ($24) {
  $25 = $end; //@line 276 "cjson/cjson.c"
  $26 = $2; //@line 276 "cjson/cjson.c"
  HEAP32[$26>>2] = $25; //@line 276 "cjson/cjson.c"
 }
 $27 = $c; //@line 277 "cjson/cjson.c"
 $0 = $27; //@line 277 "cjson/cjson.c"
 $28 = $0; //@line 278 "cjson/cjson.c"
 STACKTOP = sp;return ($28|0); //@line 278 "cjson/cjson.c"
}
function _cJSON_New_Item() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $node = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = HEAP32[16>>2]|0; //@line 75 "cjson/cjson.c"
 $1 = (FUNCTION_TABLE_ii[$0 & 15](40)|0); //@line 75 "cjson/cjson.c"
 $node = $1; //@line 75 "cjson/cjson.c"
 $2 = $node; //@line 76 "cjson/cjson.c"
 $3 = ($2|0)!=(0|0); //@line 76 "cjson/cjson.c"
 if (!($3)) {
  $5 = $node; //@line 77 "cjson/cjson.c"
  STACKTOP = sp;return ($5|0); //@line 77 "cjson/cjson.c"
 }
 $4 = $node; //@line 76 "cjson/cjson.c"
 dest=$4+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0)); //@line 76 "cjson/cjson.c"
 $5 = $node; //@line 77 "cjson/cjson.c"
 STACKTOP = sp;return ($5|0); //@line 77 "cjson/cjson.c"
}
function _parse_value($item,$value) {
 $item = $item|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $item;
 $2 = $value;
 $3 = $2; //@line 289 "cjson/cjson.c"
 $4 = ($3|0)!=(0|0); //@line 289 "cjson/cjson.c"
 L1: do {
  if ($4) {
   $5 = $2; //@line 290 "cjson/cjson.c"
   $6 = (_strncmp($5,32,4)|0); //@line 290 "cjson/cjson.c"
   $7 = ($6|0)!=(0); //@line 290 "cjson/cjson.c"
   if (!($7)) {
    $8 = $1; //@line 290 "cjson/cjson.c"
    $9 = (($8) + 12|0); //@line 290 "cjson/cjson.c"
    HEAP32[$9>>2] = 2; //@line 290 "cjson/cjson.c"
    $10 = $2; //@line 290 "cjson/cjson.c"
    $11 = (($10) + 4|0); //@line 290 "cjson/cjson.c"
    $0 = $11; //@line 290 "cjson/cjson.c"
    break;
   }
   $12 = $2; //@line 291 "cjson/cjson.c"
   $13 = (_strncmp($12,40,5)|0); //@line 291 "cjson/cjson.c"
   $14 = ($13|0)!=(0); //@line 291 "cjson/cjson.c"
   if (!($14)) {
    $15 = $1; //@line 291 "cjson/cjson.c"
    $16 = (($15) + 12|0); //@line 291 "cjson/cjson.c"
    HEAP32[$16>>2] = 0; //@line 291 "cjson/cjson.c"
    $17 = $2; //@line 291 "cjson/cjson.c"
    $18 = (($17) + 5|0); //@line 291 "cjson/cjson.c"
    $0 = $18; //@line 291 "cjson/cjson.c"
    break;
   }
   $19 = $2; //@line 292 "cjson/cjson.c"
   $20 = (_strncmp($19,48,4)|0); //@line 292 "cjson/cjson.c"
   $21 = ($20|0)!=(0); //@line 292 "cjson/cjson.c"
   if (!($21)) {
    $22 = $1; //@line 292 "cjson/cjson.c"
    $23 = (($22) + 12|0); //@line 292 "cjson/cjson.c"
    HEAP32[$23>>2] = 1; //@line 292 "cjson/cjson.c"
    $24 = $1; //@line 292 "cjson/cjson.c"
    $25 = (($24) + 20|0); //@line 292 "cjson/cjson.c"
    HEAP32[$25>>2] = 1; //@line 292 "cjson/cjson.c"
    $26 = $2; //@line 292 "cjson/cjson.c"
    $27 = (($26) + 4|0); //@line 292 "cjson/cjson.c"
    $0 = $27; //@line 292 "cjson/cjson.c"
    break;
   }
   $28 = $2; //@line 293 "cjson/cjson.c"
   $29 = HEAP8[$28>>0]|0; //@line 293 "cjson/cjson.c"
   $30 = $29&255; //@line 293 "cjson/cjson.c"
   $31 = ($30|0)==(34); //@line 293 "cjson/cjson.c"
   if ($31) {
    $32 = $1; //@line 293 "cjson/cjson.c"
    $33 = $2; //@line 293 "cjson/cjson.c"
    $34 = (_parse_string($32,$33)|0); //@line 293 "cjson/cjson.c"
    $0 = $34; //@line 293 "cjson/cjson.c"
    break;
   }
   $35 = $2; //@line 294 "cjson/cjson.c"
   $36 = HEAP8[$35>>0]|0; //@line 294 "cjson/cjson.c"
   $37 = $36&255; //@line 294 "cjson/cjson.c"
   $38 = ($37|0)==(45); //@line 294 "cjson/cjson.c"
   do {
    if (!($38)) {
     $39 = $2; //@line 294 "cjson/cjson.c"
     $40 = HEAP8[$39>>0]|0; //@line 294 "cjson/cjson.c"
     $41 = $40&255; //@line 294 "cjson/cjson.c"
     $42 = ($41|0)>=(48); //@line 294 "cjson/cjson.c"
     if ($42) {
      $43 = $2; //@line 294 "cjson/cjson.c"
      $44 = HEAP8[$43>>0]|0; //@line 294 "cjson/cjson.c"
      $45 = $44&255; //@line 294 "cjson/cjson.c"
      $46 = ($45|0)<=(57); //@line 294 "cjson/cjson.c"
      if ($46) {
       break;
      }
     }
     $50 = $2; //@line 295 "cjson/cjson.c"
     $51 = HEAP8[$50>>0]|0; //@line 295 "cjson/cjson.c"
     $52 = $51&255; //@line 295 "cjson/cjson.c"
     $53 = ($52|0)==(91); //@line 295 "cjson/cjson.c"
     if ($53) {
      $54 = $1; //@line 295 "cjson/cjson.c"
      $55 = $2; //@line 295 "cjson/cjson.c"
      $56 = (_parse_array($54,$55)|0); //@line 295 "cjson/cjson.c"
      $0 = $56; //@line 295 "cjson/cjson.c"
      break L1;
     }
     $57 = $2; //@line 296 "cjson/cjson.c"
     $58 = HEAP8[$57>>0]|0; //@line 296 "cjson/cjson.c"
     $59 = $58&255; //@line 296 "cjson/cjson.c"
     $60 = ($59|0)==(123); //@line 296 "cjson/cjson.c"
     if ($60) {
      $61 = $1; //@line 296 "cjson/cjson.c"
      $62 = $2; //@line 296 "cjson/cjson.c"
      $63 = (_parse_object($61,$62)|0); //@line 296 "cjson/cjson.c"
      $0 = $63; //@line 296 "cjson/cjson.c"
      break L1;
     } else {
      $64 = $2; //@line 298 "cjson/cjson.c"
      HEAP32[8>>2] = $64; //@line 298 "cjson/cjson.c"
      $0 = 0; //@line 298 "cjson/cjson.c"
      break L1;
     }
    }
   } while(0);
   $47 = $1; //@line 294 "cjson/cjson.c"
   $48 = $2; //@line 294 "cjson/cjson.c"
   $49 = (_parse_number($47,$48)|0); //@line 294 "cjson/cjson.c"
   $0 = $49; //@line 294 "cjson/cjson.c"
  } else {
   $0 = 0; //@line 289 "cjson/cjson.c"
  }
 } while(0);
 $65 = $0; //@line 299 "cjson/cjson.c"
 STACKTOP = sp;return ($65|0); //@line 299 "cjson/cjson.c"
}
function _skip($in) {
 $in = $in|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $in;
 while(1) {
  $1 = $0; //@line 261 "cjson/cjson.c"
  $2 = ($1|0)!=(0|0); //@line 261 "cjson/cjson.c"
  if ($2) {
   $3 = $0; //@line 261 "cjson/cjson.c"
   $4 = HEAP8[$3>>0]|0; //@line 261 "cjson/cjson.c"
   $5 = $4&255; //@line 261 "cjson/cjson.c"
   $6 = ($5|0)!=(0); //@line 261 "cjson/cjson.c"
   if ($6) {
    $7 = $0; //@line 261 "cjson/cjson.c"
    $8 = HEAP8[$7>>0]|0; //@line 261 "cjson/cjson.c"
    $9 = $8&255; //@line 261 "cjson/cjson.c"
    $10 = ($9|0)<=(32); //@line 261 "cjson/cjson.c"
    $14 = $10;
   } else {
    $14 = 0;
   }
  } else {
   $14 = 0;
  }
  if (!($14)) {
   break;
  }
  $11 = $0; //@line 261 "cjson/cjson.c"
  $12 = (($11) + 1|0); //@line 261 "cjson/cjson.c"
  $0 = $12; //@line 261 "cjson/cjson.c"
 }
 $13 = $0; //@line 261 "cjson/cjson.c"
 STACKTOP = sp;return ($13|0); //@line 261 "cjson/cjson.c"
}
function _cJSON_Parse($value) {
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $value;
 $1 = $0; //@line 280 "cjson/cjson.c"
 $2 = (_cJSON_ParseWithOpts($1,0,0)|0); //@line 280 "cjson/cjson.c"
 STACKTOP = sp;return ($2|0); //@line 280 "cjson/cjson.c"
}
function _print_value($item,$depth,$fmt) {
 $item = $item|0;
 $depth = $depth|0;
 $fmt = $fmt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $out = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $item;
 $2 = $depth;
 $3 = $fmt;
 $out = 0; //@line 304 "cjson/cjson.c"
 $4 = $1; //@line 305 "cjson/cjson.c"
 $5 = ($4|0)!=(0|0); //@line 305 "cjson/cjson.c"
 if (!($5)) {
  $0 = 0; //@line 305 "cjson/cjson.c"
  $26 = $0; //@line 317 "cjson/cjson.c"
  STACKTOP = sp;return ($26|0); //@line 317 "cjson/cjson.c"
 }
 $6 = $1; //@line 306 "cjson/cjson.c"
 $7 = (($6) + 12|0); //@line 306 "cjson/cjson.c"
 $8 = HEAP32[$7>>2]|0; //@line 306 "cjson/cjson.c"
 $9 = $8 & 255; //@line 306 "cjson/cjson.c"
 switch ($9|0) {
 case 2:  {
  $10 = (_cJSON_strdup(32)|0); //@line 308 "cjson/cjson.c"
  $out = $10; //@line 308 "cjson/cjson.c"
  break;
 }
 case 6:  {
  $21 = $1; //@line 314 "cjson/cjson.c"
  $22 = $2; //@line 314 "cjson/cjson.c"
  $23 = $3; //@line 314 "cjson/cjson.c"
  $24 = (_print_object($21,$22,$23)|0); //@line 314 "cjson/cjson.c"
  $out = $24; //@line 314 "cjson/cjson.c"
  break;
 }
 case 5:  {
  $17 = $1; //@line 313 "cjson/cjson.c"
  $18 = $2; //@line 313 "cjson/cjson.c"
  $19 = $3; //@line 313 "cjson/cjson.c"
  $20 = (_print_array($17,$18,$19)|0); //@line 313 "cjson/cjson.c"
  $out = $20; //@line 313 "cjson/cjson.c"
  break;
 }
 case 3:  {
  $13 = $1; //@line 311 "cjson/cjson.c"
  $14 = (_print_number($13)|0); //@line 311 "cjson/cjson.c"
  $out = $14; //@line 311 "cjson/cjson.c"
  break;
 }
 case 4:  {
  $15 = $1; //@line 312 "cjson/cjson.c"
  $16 = (_print_string($15)|0); //@line 312 "cjson/cjson.c"
  $out = $16; //@line 312 "cjson/cjson.c"
  break;
 }
 case 0:  {
  $11 = (_cJSON_strdup(40)|0); //@line 309 "cjson/cjson.c"
  $out = $11; //@line 309 "cjson/cjson.c"
  break;
 }
 case 1:  {
  $12 = (_cJSON_strdup(48)|0); //@line 310 "cjson/cjson.c"
  $out = $12; //@line 310 "cjson/cjson.c"
  break;
 }
 default: {
 }
 }
 $25 = $out; //@line 316 "cjson/cjson.c"
 $0 = $25; //@line 316 "cjson/cjson.c"
 $26 = $0; //@line 317 "cjson/cjson.c"
 STACKTOP = sp;return ($26|0); //@line 317 "cjson/cjson.c"
}
function _cJSON_PrintUnformatted($item) {
 $item = $item|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $item;
 $1 = $0; //@line 284 "cjson/cjson.c"
 $2 = (_print_value($1,0,0)|0); //@line 284 "cjson/cjson.c"
 STACKTOP = sp;return ($2|0); //@line 284 "cjson/cjson.c"
}
function _cJSON_GetArraySize($array) {
 $array = $array|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $array;
 $1 = $0; //@line 510 "cjson/cjson.c"
 $2 = (($1) + 8|0); //@line 510 "cjson/cjson.c"
 $3 = HEAP32[$2>>2]|0; //@line 510 "cjson/cjson.c"
 $c = $3; //@line 510 "cjson/cjson.c"
 $i = 0; //@line 510 "cjson/cjson.c"
 while(1) {
  $4 = $c; //@line 510 "cjson/cjson.c"
  $5 = ($4|0)!=(0|0); //@line 510 "cjson/cjson.c"
  if (!($5)) {
   break;
  }
  $6 = $i; //@line 510 "cjson/cjson.c"
  $7 = (($6) + 1)|0; //@line 510 "cjson/cjson.c"
  $i = $7; //@line 510 "cjson/cjson.c"
  $8 = $c; //@line 510 "cjson/cjson.c"
  $9 = HEAP32[$8>>2]|0; //@line 510 "cjson/cjson.c"
  $c = $9; //@line 510 "cjson/cjson.c"
 }
 $10 = $i; //@line 510 "cjson/cjson.c"
 STACKTOP = sp;return ($10|0); //@line 510 "cjson/cjson.c"
}
function _cJSON_GetArrayItem($array,$item) {
 $array = $array|0;
 $item = $item|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $array;
 $1 = $item;
 $2 = $0; //@line 511 "cjson/cjson.c"
 $3 = (($2) + 8|0); //@line 511 "cjson/cjson.c"
 $4 = HEAP32[$3>>2]|0; //@line 511 "cjson/cjson.c"
 $c = $4; //@line 511 "cjson/cjson.c"
 while(1) {
  $5 = $c; //@line 511 "cjson/cjson.c"
  $6 = ($5|0)!=(0|0); //@line 511 "cjson/cjson.c"
  if ($6) {
   $7 = $1; //@line 511 "cjson/cjson.c"
   $8 = ($7|0)>(0); //@line 511 "cjson/cjson.c"
   $14 = $8;
  } else {
   $14 = 0;
  }
  if (!($14)) {
   break;
  }
  $9 = $1; //@line 511 "cjson/cjson.c"
  $10 = (($9) + -1)|0; //@line 511 "cjson/cjson.c"
  $1 = $10; //@line 511 "cjson/cjson.c"
  $11 = $c; //@line 511 "cjson/cjson.c"
  $12 = HEAP32[$11>>2]|0; //@line 511 "cjson/cjson.c"
  $c = $12; //@line 511 "cjson/cjson.c"
 }
 $13 = $c; //@line 511 "cjson/cjson.c"
 STACKTOP = sp;return ($13|0); //@line 511 "cjson/cjson.c"
}
function _cJSON_GetObjectItem($object,$string) {
 $object = $object|0;
 $string = $string|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $object;
 $1 = $string;
 $2 = $0; //@line 512 "cjson/cjson.c"
 $3 = (($2) + 8|0); //@line 512 "cjson/cjson.c"
 $4 = HEAP32[$3>>2]|0; //@line 512 "cjson/cjson.c"
 $c = $4; //@line 512 "cjson/cjson.c"
 while(1) {
  $5 = $c; //@line 512 "cjson/cjson.c"
  $6 = ($5|0)!=(0|0); //@line 512 "cjson/cjson.c"
  if ($6) {
   $7 = $c; //@line 512 "cjson/cjson.c"
   $8 = (($7) + 32|0); //@line 512 "cjson/cjson.c"
   $9 = HEAP32[$8>>2]|0; //@line 512 "cjson/cjson.c"
   $10 = $1; //@line 512 "cjson/cjson.c"
   $11 = (_cJSON_strcasecmp($9,$10)|0); //@line 512 "cjson/cjson.c"
   $12 = ($11|0)!=(0); //@line 512 "cjson/cjson.c"
   $16 = $12;
  } else {
   $16 = 0;
  }
  if (!($16)) {
   break;
  }
  $13 = $c; //@line 512 "cjson/cjson.c"
  $14 = HEAP32[$13>>2]|0; //@line 512 "cjson/cjson.c"
  $c = $14; //@line 512 "cjson/cjson.c"
 }
 $15 = $c; //@line 512 "cjson/cjson.c"
 STACKTOP = sp;return ($15|0); //@line 512 "cjson/cjson.c"
}
function _cJSON_strcasecmp($s1,$s2) {
 $s1 = $s1|0;
 $s2 = $s2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $s1;
 $2 = $s2;
 $3 = $1; //@line 41 "cjson/cjson.c"
 $4 = ($3|0)!=(0|0); //@line 41 "cjson/cjson.c"
 if (!($4)) {
  $5 = $1; //@line 41 "cjson/cjson.c"
  $6 = $2; //@line 41 "cjson/cjson.c"
  $7 = ($5|0)==($6|0); //@line 41 "cjson/cjson.c"
  $8 = $7 ? 0 : 1; //@line 41 "cjson/cjson.c"
  $0 = $8; //@line 41 "cjson/cjson.c"
  $37 = $0; //@line 44 "cjson/cjson.c"
  STACKTOP = sp;return ($37|0); //@line 44 "cjson/cjson.c"
 }
 $9 = $2; //@line 41 "cjson/cjson.c"
 $10 = ($9|0)!=(0|0); //@line 41 "cjson/cjson.c"
 if (!($10)) {
  $0 = 1; //@line 41 "cjson/cjson.c"
  $37 = $0; //@line 44 "cjson/cjson.c"
  STACKTOP = sp;return ($37|0); //@line 44 "cjson/cjson.c"
 }
 while(1) {
  $11 = $1; //@line 42 "cjson/cjson.c"
  $12 = HEAP8[$11>>0]|0; //@line 42 "cjson/cjson.c"
  $13 = $12&255; //@line 42 "cjson/cjson.c"
  $14 = (_tolower(($13|0))|0); //@line 42 "cjson/cjson.c"
  $15 = $2; //@line 42 "cjson/cjson.c"
  $16 = HEAP8[$15>>0]|0; //@line 42 "cjson/cjson.c"
  $17 = $16&255; //@line 42 "cjson/cjson.c"
  $18 = (_tolower(($17|0))|0); //@line 42 "cjson/cjson.c"
  $19 = ($14|0)==($18|0); //@line 42 "cjson/cjson.c"
  if (!($19)) {
   label = 11;
   break;
  }
  $20 = $1; //@line 42 "cjson/cjson.c"
  $21 = HEAP8[$20>>0]|0; //@line 42 "cjson/cjson.c"
  $22 = $21&255; //@line 42 "cjson/cjson.c"
  $23 = ($22|0)==(0); //@line 42 "cjson/cjson.c"
  if ($23) {
   label = 8;
   break;
  }
  $24 = $1; //@line 42 "cjson/cjson.c"
  $25 = (($24) + 1|0); //@line 42 "cjson/cjson.c"
  $1 = $25; //@line 42 "cjson/cjson.c"
  $26 = $2; //@line 42 "cjson/cjson.c"
  $27 = (($26) + 1|0); //@line 42 "cjson/cjson.c"
  $2 = $27; //@line 42 "cjson/cjson.c"
 }
 if ((label|0) == 8) {
  $0 = 0; //@line 42 "cjson/cjson.c"
  $37 = $0; //@line 44 "cjson/cjson.c"
  STACKTOP = sp;return ($37|0); //@line 44 "cjson/cjson.c"
 }
 else if ((label|0) == 11) {
  $28 = $1; //@line 43 "cjson/cjson.c"
  $29 = HEAP8[$28>>0]|0; //@line 43 "cjson/cjson.c"
  $30 = $29&255; //@line 43 "cjson/cjson.c"
  $31 = (_tolower(($30|0))|0); //@line 43 "cjson/cjson.c"
  $32 = $2; //@line 43 "cjson/cjson.c"
  $33 = HEAP8[$32>>0]|0; //@line 43 "cjson/cjson.c"
  $34 = $33&255; //@line 43 "cjson/cjson.c"
  $35 = (_tolower(($34|0))|0); //@line 43 "cjson/cjson.c"
  $36 = (($31) - ($35))|0; //@line 43 "cjson/cjson.c"
  $0 = $36; //@line 43 "cjson/cjson.c"
  $37 = $0; //@line 44 "cjson/cjson.c"
  STACKTOP = sp;return ($37|0); //@line 44 "cjson/cjson.c"
 }
 return 0|0;
}
function _cJSON_AddItemToArray($array,$item) {
 $array = $array|0;
 $item = $item|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $array;
 $1 = $item;
 $2 = $0; //@line 520 "cjson/cjson.c"
 $3 = (($2) + 8|0); //@line 520 "cjson/cjson.c"
 $4 = HEAP32[$3>>2]|0; //@line 520 "cjson/cjson.c"
 $c = $4; //@line 520 "cjson/cjson.c"
 $5 = $1; //@line 520 "cjson/cjson.c"
 $6 = ($5|0)!=(0|0); //@line 520 "cjson/cjson.c"
 if (!($6)) {
  STACKTOP = sp;return; //@line 520 "cjson/cjson.c"
 }
 $7 = $c; //@line 520 "cjson/cjson.c"
 $8 = ($7|0)!=(0|0); //@line 520 "cjson/cjson.c"
 if (!($8)) {
  $9 = $1; //@line 520 "cjson/cjson.c"
  $10 = $0; //@line 520 "cjson/cjson.c"
  $11 = (($10) + 8|0); //@line 520 "cjson/cjson.c"
  HEAP32[$11>>2] = $9; //@line 520 "cjson/cjson.c"
  STACKTOP = sp;return; //@line 520 "cjson/cjson.c"
 }
 while(1) {
  $12 = $c; //@line 520 "cjson/cjson.c"
  $13 = ($12|0)!=(0|0); //@line 520 "cjson/cjson.c"
  if ($13) {
   $14 = $c; //@line 520 "cjson/cjson.c"
   $15 = HEAP32[$14>>2]|0; //@line 520 "cjson/cjson.c"
   $16 = ($15|0)!=(0|0); //@line 520 "cjson/cjson.c"
   $21 = $16;
  } else {
   $21 = 0;
  }
  if (!($21)) {
   break;
  }
  $17 = $c; //@line 520 "cjson/cjson.c"
  $18 = HEAP32[$17>>2]|0; //@line 520 "cjson/cjson.c"
  $c = $18; //@line 520 "cjson/cjson.c"
 }
 $19 = $c; //@line 520 "cjson/cjson.c"
 $20 = $1; //@line 520 "cjson/cjson.c"
 _suffix_object($19,$20); //@line 520 "cjson/cjson.c"
 STACKTOP = sp;return; //@line 520 "cjson/cjson.c"
}
function _suffix_object($prev,$item) {
 $prev = $prev|0;
 $item = $item|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $prev;
 $1 = $item;
 $2 = $1; //@line 515 "cjson/cjson.c"
 $3 = $0; //@line 515 "cjson/cjson.c"
 HEAP32[$3>>2] = $2; //@line 515 "cjson/cjson.c"
 $4 = $0; //@line 515 "cjson/cjson.c"
 $5 = $1; //@line 515 "cjson/cjson.c"
 $6 = (($5) + 4|0); //@line 515 "cjson/cjson.c"
 HEAP32[$6>>2] = $4; //@line 515 "cjson/cjson.c"
 STACKTOP = sp;return; //@line 515 "cjson/cjson.c"
}
function _cJSON_AddItemToObject($object,$string,$item) {
 $object = $object|0;
 $string = $string|0;
 $item = $item|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $object;
 $1 = $string;
 $2 = $item;
 $3 = $2; //@line 521 "cjson/cjson.c"
 $4 = ($3|0)!=(0|0); //@line 521 "cjson/cjson.c"
 if (!($4)) {
  STACKTOP = sp;return; //@line 521 "cjson/cjson.c"
 }
 $5 = $2; //@line 521 "cjson/cjson.c"
 $6 = (($5) + 32|0); //@line 521 "cjson/cjson.c"
 $7 = HEAP32[$6>>2]|0; //@line 521 "cjson/cjson.c"
 $8 = ($7|0)!=(0|0); //@line 521 "cjson/cjson.c"
 if ($8) {
  $9 = HEAP32[24>>2]|0; //@line 521 "cjson/cjson.c"
  $10 = $2; //@line 521 "cjson/cjson.c"
  $11 = (($10) + 32|0); //@line 521 "cjson/cjson.c"
  $12 = HEAP32[$11>>2]|0; //@line 521 "cjson/cjson.c"
  FUNCTION_TABLE_vi[$9 & 15]($12); //@line 521 "cjson/cjson.c"
 }
 $13 = $1; //@line 521 "cjson/cjson.c"
 $14 = (_cJSON_strdup($13)|0); //@line 521 "cjson/cjson.c"
 $15 = $2; //@line 521 "cjson/cjson.c"
 $16 = (($15) + 32|0); //@line 521 "cjson/cjson.c"
 HEAP32[$16>>2] = $14; //@line 521 "cjson/cjson.c"
 $17 = $0; //@line 521 "cjson/cjson.c"
 $18 = $2; //@line 521 "cjson/cjson.c"
 _cJSON_AddItemToArray($17,$18); //@line 521 "cjson/cjson.c"
 STACKTOP = sp;return; //@line 521 "cjson/cjson.c"
}
function _cJSON_strdup($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $copy = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $str;
 $2 = $1; //@line 54 "cjson/cjson.c"
 $3 = (_strlen(($2|0))|0); //@line 54 "cjson/cjson.c"
 $4 = (($3) + 1)|0; //@line 54 "cjson/cjson.c"
 $len = $4; //@line 54 "cjson/cjson.c"
 $5 = HEAP32[16>>2]|0; //@line 55 "cjson/cjson.c"
 $6 = $len; //@line 55 "cjson/cjson.c"
 $7 = (FUNCTION_TABLE_ii[$5 & 15]($6)|0); //@line 55 "cjson/cjson.c"
 $copy = $7; //@line 55 "cjson/cjson.c"
 $8 = ($7|0)!=(0|0); //@line 55 "cjson/cjson.c"
 if ($8) {
  $9 = $copy; //@line 56 "cjson/cjson.c"
  $10 = $1; //@line 56 "cjson/cjson.c"
  $11 = $len; //@line 56 "cjson/cjson.c"
  _memcpy(($9|0),($10|0),($11|0))|0; //@line 56 "cjson/cjson.c"
  $12 = $copy; //@line 57 "cjson/cjson.c"
  $0 = $12; //@line 57 "cjson/cjson.c"
  $13 = $0; //@line 58 "cjson/cjson.c"
  STACKTOP = sp;return ($13|0); //@line 58 "cjson/cjson.c"
 } else {
  $0 = 0; //@line 55 "cjson/cjson.c"
  $13 = $0; //@line 58 "cjson/cjson.c"
  STACKTOP = sp;return ($13|0); //@line 58 "cjson/cjson.c"
 }
 return 0|0;
}
function _cJSON_CreateNumber($num) {
 $num = +$num;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, $item = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $num;
 $1 = (_cJSON_New_Item()|0); //@line 542 "cjson/cjson.c"
 $item = $1; //@line 542 "cjson/cjson.c"
 $2 = $item; //@line 542 "cjson/cjson.c"
 $3 = ($2|0)!=(0|0); //@line 542 "cjson/cjson.c"
 if (!($3)) {
  $13 = $item; //@line 542 "cjson/cjson.c"
  STACKTOP = sp;return ($13|0); //@line 542 "cjson/cjson.c"
 }
 $4 = $item; //@line 542 "cjson/cjson.c"
 $5 = (($4) + 12|0); //@line 542 "cjson/cjson.c"
 HEAP32[$5>>2] = 3; //@line 542 "cjson/cjson.c"
 $6 = $0; //@line 542 "cjson/cjson.c"
 $7 = $item; //@line 542 "cjson/cjson.c"
 $8 = (($7) + 24|0); //@line 542 "cjson/cjson.c"
 HEAPF64[$8>>3] = $6; //@line 542 "cjson/cjson.c"
 $9 = $0; //@line 542 "cjson/cjson.c"
 $10 = (~~(($9))); //@line 542 "cjson/cjson.c"
 $11 = $item; //@line 542 "cjson/cjson.c"
 $12 = (($11) + 20|0); //@line 542 "cjson/cjson.c"
 HEAP32[$12>>2] = $10; //@line 542 "cjson/cjson.c"
 $13 = $item; //@line 542 "cjson/cjson.c"
 STACKTOP = sp;return ($13|0); //@line 542 "cjson/cjson.c"
}
function _cJSON_CreateString($string) {
 $string = $string|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $string;
 $1 = (_cJSON_New_Item()|0); //@line 543 "cjson/cjson.c"
 $item = $1; //@line 543 "cjson/cjson.c"
 $2 = $item; //@line 543 "cjson/cjson.c"
 $3 = ($2|0)!=(0|0); //@line 543 "cjson/cjson.c"
 if (!($3)) {
  $10 = $item; //@line 543 "cjson/cjson.c"
  STACKTOP = sp;return ($10|0); //@line 543 "cjson/cjson.c"
 }
 $4 = $item; //@line 543 "cjson/cjson.c"
 $5 = (($4) + 12|0); //@line 543 "cjson/cjson.c"
 HEAP32[$5>>2] = 4; //@line 543 "cjson/cjson.c"
 $6 = $0; //@line 543 "cjson/cjson.c"
 $7 = (_cJSON_strdup($6)|0); //@line 543 "cjson/cjson.c"
 $8 = $item; //@line 543 "cjson/cjson.c"
 $9 = (($8) + 16|0); //@line 543 "cjson/cjson.c"
 HEAP32[$9>>2] = $7; //@line 543 "cjson/cjson.c"
 $10 = $item; //@line 543 "cjson/cjson.c"
 STACKTOP = sp;return ($10|0); //@line 543 "cjson/cjson.c"
}
function _cJSON_CreateArray() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $item = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = (_cJSON_New_Item()|0); //@line 544 "cjson/cjson.c"
 $item = $0; //@line 544 "cjson/cjson.c"
 $1 = $item; //@line 544 "cjson/cjson.c"
 $2 = ($1|0)!=(0|0); //@line 544 "cjson/cjson.c"
 if ($2) {
  $3 = $item; //@line 544 "cjson/cjson.c"
  $4 = (($3) + 12|0); //@line 544 "cjson/cjson.c"
  HEAP32[$4>>2] = 5; //@line 544 "cjson/cjson.c"
 }
 $5 = $item; //@line 544 "cjson/cjson.c"
 STACKTOP = sp;return ($5|0); //@line 544 "cjson/cjson.c"
}
function _cJSON_CreateObject() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $item = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = (_cJSON_New_Item()|0); //@line 545 "cjson/cjson.c"
 $item = $0; //@line 545 "cjson/cjson.c"
 $1 = $item; //@line 545 "cjson/cjson.c"
 $2 = ($1|0)!=(0|0); //@line 545 "cjson/cjson.c"
 if ($2) {
  $3 = $item; //@line 545 "cjson/cjson.c"
  $4 = (($3) + 12|0); //@line 545 "cjson/cjson.c"
  HEAP32[$4>>2] = 6; //@line 545 "cjson/cjson.c"
 }
 $5 = $item; //@line 545 "cjson/cjson.c"
 STACKTOP = sp;return ($5|0); //@line 545 "cjson/cjson.c"
}
function _print_number($item) {
 $item = $item|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0;
 var $45 = 0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $d = 0.0, $str = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer7 = sp;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp + 32|0;
 $0 = $item;
 $1 = $0; //@line 121 "cjson/cjson.c"
 $2 = (($1) + 24|0); //@line 121 "cjson/cjson.c"
 $3 = +HEAPF64[$2>>3]; //@line 121 "cjson/cjson.c"
 $d = $3; //@line 121 "cjson/cjson.c"
 $4 = $0; //@line 122 "cjson/cjson.c"
 $5 = (($4) + 20|0); //@line 122 "cjson/cjson.c"
 $6 = HEAP32[$5>>2]|0; //@line 122 "cjson/cjson.c"
 $7 = (+($6|0)); //@line 122 "cjson/cjson.c"
 $8 = $d; //@line 122 "cjson/cjson.c"
 $9 = $7 - $8; //@line 122 "cjson/cjson.c"
 $10 = (+Math_abs((+$9))); //@line 122 "cjson/cjson.c"
 $11 = $10 <= 2.22044604925031308085E-16; //@line 122 "cjson/cjson.c"
 if ($11) {
  $12 = $d; //@line 122 "cjson/cjson.c"
  $13 = $12 <= 2147483647.0; //@line 122 "cjson/cjson.c"
  if ($13) {
   $14 = $d; //@line 122 "cjson/cjson.c"
   $15 = $14 >= -2147483648.0; //@line 122 "cjson/cjson.c"
   if ($15) {
    $16 = HEAP32[16>>2]|0; //@line 124 "cjson/cjson.c"
    $17 = (FUNCTION_TABLE_ii[$16 & 15](21)|0); //@line 124 "cjson/cjson.c"
    $str = $17; //@line 124 "cjson/cjson.c"
    $18 = $str; //@line 125 "cjson/cjson.c"
    $19 = ($18|0)!=(0|0); //@line 125 "cjson/cjson.c"
    if ($19) {
     $20 = $str; //@line 125 "cjson/cjson.c"
     $21 = $0; //@line 125 "cjson/cjson.c"
     $22 = (($21) + 20|0); //@line 125 "cjson/cjson.c"
     $23 = HEAP32[$22>>2]|0; //@line 125 "cjson/cjson.c"
     HEAP32[$vararg_buffer>>2] = $23; //@line 125 "cjson/cjson.c"
     (_sprintf(($20|0),(88|0),($vararg_buffer|0))|0); //@line 125 "cjson/cjson.c"
    }
    $49 = $str; //@line 137 "cjson/cjson.c"
    STACKTOP = sp;return ($49|0); //@line 137 "cjson/cjson.c"
   }
  }
 }
 $24 = HEAP32[16>>2]|0; //@line 129 "cjson/cjson.c"
 $25 = (FUNCTION_TABLE_ii[$24 & 15](64)|0); //@line 129 "cjson/cjson.c"
 $str = $25; //@line 129 "cjson/cjson.c"
 $26 = $str; //@line 130 "cjson/cjson.c"
 $27 = ($26|0)!=(0|0); //@line 130 "cjson/cjson.c"
 if ($27) {
  $28 = $d; //@line 132 "cjson/cjson.c"
  $29 = (+Math_floor((+$28))); //@line 132 "cjson/cjson.c"
  $30 = $d; //@line 132 "cjson/cjson.c"
  $31 = $29 - $30; //@line 132 "cjson/cjson.c"
  $32 = (+Math_abs((+$31))); //@line 132 "cjson/cjson.c"
  $33 = $32 <= 2.22044604925031308085E-16; //@line 132 "cjson/cjson.c"
  if ($33) {
   $34 = $d; //@line 132 "cjson/cjson.c"
   $35 = (+Math_abs((+$34))); //@line 132 "cjson/cjson.c"
   $36 = $35 < 9.99999999999999949387E+59; //@line 132 "cjson/cjson.c"
   if ($36) {
    $37 = $str; //@line 132 "cjson/cjson.c"
    $38 = $d; //@line 132 "cjson/cjson.c"
    HEAPF64[tempDoublePtr>>3]=$38;HEAP32[$vararg_buffer1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer1+4>>2]=HEAP32[tempDoublePtr+4>>2]; //@line 132 "cjson/cjson.c"
    (_sprintf(($37|0),(96|0),($vararg_buffer1|0))|0); //@line 132 "cjson/cjson.c"
   } else {
    label = 11;
   }
  } else {
   label = 11;
  }
  if ((label|0) == 11) {
   $39 = $d; //@line 133 "cjson/cjson.c"
   $40 = (+Math_abs((+$39))); //@line 133 "cjson/cjson.c"
   $41 = $40 < 9.99999999999999954748E-7; //@line 133 "cjson/cjson.c"
   if ($41) {
    label = 13;
   } else {
    $42 = $d; //@line 133 "cjson/cjson.c"
    $43 = (+Math_abs((+$42))); //@line 133 "cjson/cjson.c"
    $44 = $43 > 1.0E+9; //@line 133 "cjson/cjson.c"
    if ($44) {
     label = 13;
    } else {
     $47 = $str; //@line 134 "cjson/cjson.c"
     $48 = $d; //@line 134 "cjson/cjson.c"
     HEAPF64[tempDoublePtr>>3]=$48;HEAP32[$vararg_buffer7>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer7+4>>2]=HEAP32[tempDoublePtr+4>>2]; //@line 134 "cjson/cjson.c"
     (_sprintf(($47|0),(112|0),($vararg_buffer7|0))|0); //@line 134 "cjson/cjson.c"
    }
   }
   if ((label|0) == 13) {
    $45 = $str; //@line 133 "cjson/cjson.c"
    $46 = $d; //@line 133 "cjson/cjson.c"
    HEAPF64[tempDoublePtr>>3]=$46;HEAP32[$vararg_buffer4>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer4+4>>2]=HEAP32[tempDoublePtr+4>>2]; //@line 133 "cjson/cjson.c"
    (_sprintf(($45|0),(104|0),($vararg_buffer4|0))|0); //@line 133 "cjson/cjson.c"
   }
  }
 }
 $49 = $str; //@line 137 "cjson/cjson.c"
 STACKTOP = sp;return ($49|0); //@line 137 "cjson/cjson.c"
}
function _print_string($item) {
 $item = $item|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $item;
 $1 = $0; //@line 250 "cjson/cjson.c"
 $2 = (($1) + 16|0); //@line 250 "cjson/cjson.c"
 $3 = HEAP32[$2>>2]|0; //@line 250 "cjson/cjson.c"
 $4 = (_print_string_ptr($3)|0); //@line 250 "cjson/cjson.c"
 STACKTOP = sp;return ($4|0); //@line 250 "cjson/cjson.c"
}
function _print_array($item,$depth,$fmt) {
 $item = $item|0;
 $depth = $depth|0;
 $fmt = $fmt|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $child = 0, $entries = 0, $fail = 0, $i = 0, $len = 0, $numentries = 0, $out = 0;
 var $ptr = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $1 = $item;
 $2 = $depth;
 $3 = $fmt;
 $out = 0; //@line 351 "cjson/cjson.c"
 $len = 5; //@line 351 "cjson/cjson.c"
 $4 = $1; //@line 352 "cjson/cjson.c"
 $5 = (($4) + 8|0); //@line 352 "cjson/cjson.c"
 $6 = HEAP32[$5>>2]|0; //@line 352 "cjson/cjson.c"
 $child = $6; //@line 352 "cjson/cjson.c"
 $numentries = 0; //@line 353 "cjson/cjson.c"
 $i = 0; //@line 353 "cjson/cjson.c"
 $fail = 0; //@line 353 "cjson/cjson.c"
 while(1) {
  $7 = $child; //@line 356 "cjson/cjson.c"
  $8 = ($7|0)!=(0|0); //@line 356 "cjson/cjson.c"
  if (!($8)) {
   break;
  }
  $9 = $numentries; //@line 356 "cjson/cjson.c"
  $10 = (($9) + 1)|0; //@line 356 "cjson/cjson.c"
  $numentries = $10; //@line 356 "cjson/cjson.c"
  $11 = $child; //@line 356 "cjson/cjson.c"
  $12 = HEAP32[$11>>2]|0; //@line 356 "cjson/cjson.c"
  $child = $12; //@line 356 "cjson/cjson.c"
 }
 $13 = $numentries; //@line 358 "cjson/cjson.c"
 $14 = ($13|0)!=(0); //@line 358 "cjson/cjson.c"
 if (!($14)) {
  $15 = HEAP32[16>>2]|0; //@line 360 "cjson/cjson.c"
  $16 = (FUNCTION_TABLE_ii[$15 & 15](3)|0); //@line 360 "cjson/cjson.c"
  $out = $16; //@line 360 "cjson/cjson.c"
  $17 = $out; //@line 361 "cjson/cjson.c"
  $18 = ($17|0)!=(0|0); //@line 361 "cjson/cjson.c"
  if ($18) {
   $19 = $out; //@line 361 "cjson/cjson.c"
   (_strcpy(($19|0),(80|0))|0); //@line 361 "cjson/cjson.c"
  }
  $20 = $out; //@line 362 "cjson/cjson.c"
  $0 = $20; //@line 362 "cjson/cjson.c"
  $131 = $0; //@line 403 "cjson/cjson.c"
  STACKTOP = sp;return ($131|0); //@line 403 "cjson/cjson.c"
 }
 $21 = HEAP32[16>>2]|0; //@line 365 "cjson/cjson.c"
 $22 = $numentries; //@line 365 "cjson/cjson.c"
 $23 = $22<<2; //@line 365 "cjson/cjson.c"
 $24 = (FUNCTION_TABLE_ii[$21 & 15]($23)|0); //@line 365 "cjson/cjson.c"
 $entries = $24; //@line 365 "cjson/cjson.c"
 $25 = $entries; //@line 366 "cjson/cjson.c"
 $26 = ($25|0)!=(0|0); //@line 366 "cjson/cjson.c"
 if (!($26)) {
  $0 = 0; //@line 366 "cjson/cjson.c"
  $131 = $0; //@line 403 "cjson/cjson.c"
  STACKTOP = sp;return ($131|0); //@line 403 "cjson/cjson.c"
 }
 $27 = $entries; //@line 367 "cjson/cjson.c"
 $28 = $numentries; //@line 367 "cjson/cjson.c"
 $29 = $28<<2; //@line 367 "cjson/cjson.c"
 _memset(($27|0),0,($29|0))|0; //@line 367 "cjson/cjson.c"
 $30 = $1; //@line 369 "cjson/cjson.c"
 $31 = (($30) + 8|0); //@line 369 "cjson/cjson.c"
 $32 = HEAP32[$31>>2]|0; //@line 369 "cjson/cjson.c"
 $child = $32; //@line 369 "cjson/cjson.c"
 while(1) {
  $33 = $child; //@line 370 "cjson/cjson.c"
  $34 = ($33|0)!=(0|0); //@line 370 "cjson/cjson.c"
  if ($34) {
   $35 = $fail; //@line 370 "cjson/cjson.c"
   $36 = ($35|0)!=(0); //@line 370 "cjson/cjson.c"
   $37 = $36 ^ 1; //@line 370 "cjson/cjson.c"
   $132 = $37;
  } else {
   $132 = 0;
  }
  if (!($132)) {
   break;
  }
  $38 = $child; //@line 372 "cjson/cjson.c"
  $39 = $2; //@line 372 "cjson/cjson.c"
  $40 = (($39) + 1)|0; //@line 372 "cjson/cjson.c"
  $41 = $3; //@line 372 "cjson/cjson.c"
  $42 = (_print_value($38,$40,$41)|0); //@line 372 "cjson/cjson.c"
  $ret = $42; //@line 372 "cjson/cjson.c"
  $43 = $ret; //@line 373 "cjson/cjson.c"
  $44 = $i; //@line 373 "cjson/cjson.c"
  $45 = (($44) + 1)|0; //@line 373 "cjson/cjson.c"
  $i = $45; //@line 373 "cjson/cjson.c"
  $46 = $entries; //@line 373 "cjson/cjson.c"
  $47 = (($46) + ($44<<2)|0); //@line 373 "cjson/cjson.c"
  HEAP32[$47>>2] = $43; //@line 373 "cjson/cjson.c"
  $48 = $ret; //@line 374 "cjson/cjson.c"
  $49 = ($48|0)!=(0|0); //@line 374 "cjson/cjson.c"
  if ($49) {
   $50 = $ret; //@line 374 "cjson/cjson.c"
   $51 = (_strlen(($50|0))|0); //@line 374 "cjson/cjson.c"
   $52 = (($51) + 2)|0; //@line 374 "cjson/cjson.c"
   $53 = $3; //@line 374 "cjson/cjson.c"
   $54 = ($53|0)!=(0); //@line 374 "cjson/cjson.c"
   $55 = $54 ? 1 : 0; //@line 374 "cjson/cjson.c"
   $56 = (($52) + ($55))|0; //@line 374 "cjson/cjson.c"
   $57 = $len; //@line 374 "cjson/cjson.c"
   $58 = (($57) + ($56))|0; //@line 374 "cjson/cjson.c"
   $len = $58; //@line 374 "cjson/cjson.c"
  } else {
   $fail = 1; //@line 374 "cjson/cjson.c"
  }
  $59 = $child; //@line 375 "cjson/cjson.c"
  $60 = HEAP32[$59>>2]|0; //@line 375 "cjson/cjson.c"
  $child = $60; //@line 375 "cjson/cjson.c"
 }
 $61 = $fail; //@line 379 "cjson/cjson.c"
 $62 = ($61|0)!=(0); //@line 379 "cjson/cjson.c"
 if (!($62)) {
  $63 = HEAP32[16>>2]|0; //@line 379 "cjson/cjson.c"
  $64 = $len; //@line 379 "cjson/cjson.c"
  $65 = (FUNCTION_TABLE_ii[$63 & 15]($64)|0); //@line 379 "cjson/cjson.c"
  $out = $65; //@line 379 "cjson/cjson.c"
 }
 $66 = $out; //@line 381 "cjson/cjson.c"
 $67 = ($66|0)!=(0|0); //@line 381 "cjson/cjson.c"
 if (!($67)) {
  $fail = 1; //@line 381 "cjson/cjson.c"
 }
 $68 = $fail; //@line 384 "cjson/cjson.c"
 $69 = ($68|0)!=(0); //@line 384 "cjson/cjson.c"
 if ($69) {
  $i = 0; //@line 386 "cjson/cjson.c"
  while(1) {
   $70 = $i; //@line 386 "cjson/cjson.c"
   $71 = $numentries; //@line 386 "cjson/cjson.c"
   $72 = ($70|0)<($71|0); //@line 386 "cjson/cjson.c"
   if (!($72)) {
    break;
   }
   $73 = $i; //@line 386 "cjson/cjson.c"
   $74 = $entries; //@line 386 "cjson/cjson.c"
   $75 = (($74) + ($73<<2)|0); //@line 386 "cjson/cjson.c"
   $76 = HEAP32[$75>>2]|0; //@line 386 "cjson/cjson.c"
   $77 = ($76|0)!=(0|0); //@line 386 "cjson/cjson.c"
   if ($77) {
    $78 = HEAP32[24>>2]|0; //@line 386 "cjson/cjson.c"
    $79 = $i; //@line 386 "cjson/cjson.c"
    $80 = $entries; //@line 386 "cjson/cjson.c"
    $81 = (($80) + ($79<<2)|0); //@line 386 "cjson/cjson.c"
    $82 = HEAP32[$81>>2]|0; //@line 386 "cjson/cjson.c"
    FUNCTION_TABLE_vi[$78 & 15]($82); //@line 386 "cjson/cjson.c"
   }
   $83 = $i; //@line 386 "cjson/cjson.c"
   $84 = (($83) + 1)|0; //@line 386 "cjson/cjson.c"
   $i = $84; //@line 386 "cjson/cjson.c"
  }
  $85 = HEAP32[24>>2]|0; //@line 387 "cjson/cjson.c"
  $86 = $entries; //@line 387 "cjson/cjson.c"
  FUNCTION_TABLE_vi[$85 & 15]($86); //@line 387 "cjson/cjson.c"
  $0 = 0; //@line 388 "cjson/cjson.c"
  $131 = $0; //@line 403 "cjson/cjson.c"
  STACKTOP = sp;return ($131|0); //@line 403 "cjson/cjson.c"
 }
 $87 = $out; //@line 392 "cjson/cjson.c"
 HEAP8[$87>>0] = 91; //@line 392 "cjson/cjson.c"
 $88 = $out; //@line 393 "cjson/cjson.c"
 $89 = (($88) + 1|0); //@line 393 "cjson/cjson.c"
 $ptr = $89; //@line 393 "cjson/cjson.c"
 $90 = $ptr; //@line 393 "cjson/cjson.c"
 HEAP8[$90>>0] = 0; //@line 393 "cjson/cjson.c"
 $i = 0; //@line 394 "cjson/cjson.c"
 while(1) {
  $91 = $i; //@line 394 "cjson/cjson.c"
  $92 = $numentries; //@line 394 "cjson/cjson.c"
  $93 = ($91|0)<($92|0); //@line 394 "cjson/cjson.c"
  if (!($93)) {
   break;
  }
  $94 = $ptr; //@line 396 "cjson/cjson.c"
  $95 = $i; //@line 396 "cjson/cjson.c"
  $96 = $entries; //@line 396 "cjson/cjson.c"
  $97 = (($96) + ($95<<2)|0); //@line 396 "cjson/cjson.c"
  $98 = HEAP32[$97>>2]|0; //@line 396 "cjson/cjson.c"
  (_strcpy(($94|0),($98|0))|0); //@line 396 "cjson/cjson.c"
  $99 = $i; //@line 396 "cjson/cjson.c"
  $100 = $entries; //@line 396 "cjson/cjson.c"
  $101 = (($100) + ($99<<2)|0); //@line 396 "cjson/cjson.c"
  $102 = HEAP32[$101>>2]|0; //@line 396 "cjson/cjson.c"
  $103 = (_strlen(($102|0))|0); //@line 396 "cjson/cjson.c"
  $104 = $ptr; //@line 396 "cjson/cjson.c"
  $105 = (($104) + ($103)|0); //@line 396 "cjson/cjson.c"
  $ptr = $105; //@line 396 "cjson/cjson.c"
  $106 = $i; //@line 397 "cjson/cjson.c"
  $107 = $numentries; //@line 397 "cjson/cjson.c"
  $108 = (($107) - 1)|0; //@line 397 "cjson/cjson.c"
  $109 = ($106|0)!=($108|0); //@line 397 "cjson/cjson.c"
  if ($109) {
   $110 = $ptr; //@line 397 "cjson/cjson.c"
   $111 = (($110) + 1|0); //@line 397 "cjson/cjson.c"
   $ptr = $111; //@line 397 "cjson/cjson.c"
   HEAP8[$110>>0] = 44; //@line 397 "cjson/cjson.c"
   $112 = $3; //@line 397 "cjson/cjson.c"
   $113 = ($112|0)!=(0); //@line 397 "cjson/cjson.c"
   if ($113) {
    $114 = $ptr; //@line 397 "cjson/cjson.c"
    $115 = (($114) + 1|0); //@line 397 "cjson/cjson.c"
    $ptr = $115; //@line 397 "cjson/cjson.c"
    HEAP8[$114>>0] = 32; //@line 397 "cjson/cjson.c"
   }
   $116 = $ptr; //@line 397 "cjson/cjson.c"
   HEAP8[$116>>0] = 0; //@line 397 "cjson/cjson.c"
  }
  $117 = HEAP32[24>>2]|0; //@line 398 "cjson/cjson.c"
  $118 = $i; //@line 398 "cjson/cjson.c"
  $119 = $entries; //@line 398 "cjson/cjson.c"
  $120 = (($119) + ($118<<2)|0); //@line 398 "cjson/cjson.c"
  $121 = HEAP32[$120>>2]|0; //@line 398 "cjson/cjson.c"
  FUNCTION_TABLE_vi[$117 & 15]($121); //@line 398 "cjson/cjson.c"
  $122 = $i; //@line 394 "cjson/cjson.c"
  $123 = (($122) + 1)|0; //@line 394 "cjson/cjson.c"
  $i = $123; //@line 394 "cjson/cjson.c"
 }
 $124 = HEAP32[24>>2]|0; //@line 400 "cjson/cjson.c"
 $125 = $entries; //@line 400 "cjson/cjson.c"
 FUNCTION_TABLE_vi[$124 & 15]($125); //@line 400 "cjson/cjson.c"
 $126 = $ptr; //@line 401 "cjson/cjson.c"
 $127 = (($126) + 1|0); //@line 401 "cjson/cjson.c"
 $ptr = $127; //@line 401 "cjson/cjson.c"
 HEAP8[$126>>0] = 93; //@line 401 "cjson/cjson.c"
 $128 = $ptr; //@line 401 "cjson/cjson.c"
 $129 = (($128) + 1|0); //@line 401 "cjson/cjson.c"
 $ptr = $129; //@line 401 "cjson/cjson.c"
 HEAP8[$128>>0] = 0; //@line 401 "cjson/cjson.c"
 $130 = $out; //@line 402 "cjson/cjson.c"
 $0 = $130; //@line 402 "cjson/cjson.c"
 $131 = $0; //@line 403 "cjson/cjson.c"
 STACKTOP = sp;return ($131|0); //@line 403 "cjson/cjson.c"
}
function _print_object($item,$depth,$fmt) {
 $item = $item|0;
 $depth = $depth|0;
 $fmt = $fmt|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $child = 0, $entries = 0, $fail = 0, $i = 0, $j = 0, $len = 0, $names = 0, $numentries = 0, $out = 0, $ptr = 0, $ret = 0, $str = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $1 = $item;
 $2 = $depth;
 $3 = $fmt;
 $entries = 0; //@line 444 "cjson/cjson.c"
 $names = 0; //@line 444 "cjson/cjson.c"
 $out = 0; //@line 445 "cjson/cjson.c"
 $len = 7; //@line 445 "cjson/cjson.c"
 $i = 0; //@line 445 "cjson/cjson.c"
 $4 = $1; //@line 446 "cjson/cjson.c"
 $5 = (($4) + 8|0); //@line 446 "cjson/cjson.c"
 $6 = HEAP32[$5>>2]|0; //@line 446 "cjson/cjson.c"
 $child = $6; //@line 446 "cjson/cjson.c"
 $numentries = 0; //@line 447 "cjson/cjson.c"
 $fail = 0; //@line 447 "cjson/cjson.c"
 while(1) {
  $7 = $child; //@line 449 "cjson/cjson.c"
  $8 = ($7|0)!=(0|0); //@line 449 "cjson/cjson.c"
  if (!($8)) {
   break;
  }
  $9 = $numentries; //@line 449 "cjson/cjson.c"
  $10 = (($9) + 1)|0; //@line 449 "cjson/cjson.c"
  $numentries = $10; //@line 449 "cjson/cjson.c"
  $11 = $child; //@line 449 "cjson/cjson.c"
  $12 = HEAP32[$11>>2]|0; //@line 449 "cjson/cjson.c"
  $child = $12; //@line 449 "cjson/cjson.c"
 }
 $13 = $numentries; //@line 451 "cjson/cjson.c"
 $14 = ($13|0)!=(0); //@line 451 "cjson/cjson.c"
 if (!($14)) {
  $15 = HEAP32[16>>2]|0; //@line 453 "cjson/cjson.c"
  $16 = $3; //@line 453 "cjson/cjson.c"
  $17 = ($16|0)!=(0); //@line 453 "cjson/cjson.c"
  if ($17) {
   $18 = $2; //@line 453 "cjson/cjson.c"
   $19 = (($18) + 4)|0; //@line 453 "cjson/cjson.c"
   $20 = $19;
  } else {
   $20 = 3;
  }
  $21 = (FUNCTION_TABLE_ii[$15 & 15]($20)|0); //@line 453 "cjson/cjson.c"
  $out = $21; //@line 453 "cjson/cjson.c"
  $22 = $out; //@line 454 "cjson/cjson.c"
  $23 = ($22|0)!=(0|0); //@line 454 "cjson/cjson.c"
  if (!($23)) {
   $0 = 0; //@line 454 "cjson/cjson.c"
   $241 = $0; //@line 507 "cjson/cjson.c"
   STACKTOP = sp;return ($241|0); //@line 507 "cjson/cjson.c"
  }
  $24 = $out; //@line 455 "cjson/cjson.c"
  $ptr = $24; //@line 455 "cjson/cjson.c"
  $25 = $ptr; //@line 455 "cjson/cjson.c"
  $26 = (($25) + 1|0); //@line 455 "cjson/cjson.c"
  $ptr = $26; //@line 455 "cjson/cjson.c"
  HEAP8[$25>>0] = 123; //@line 455 "cjson/cjson.c"
  $27 = $3; //@line 456 "cjson/cjson.c"
  $28 = ($27|0)!=(0); //@line 456 "cjson/cjson.c"
  if ($28) {
   $29 = $ptr; //@line 456 "cjson/cjson.c"
   $30 = (($29) + 1|0); //@line 456 "cjson/cjson.c"
   $ptr = $30; //@line 456 "cjson/cjson.c"
   HEAP8[$29>>0] = 10; //@line 456 "cjson/cjson.c"
   $i = 0; //@line 456 "cjson/cjson.c"
   while(1) {
    $31 = $i; //@line 456 "cjson/cjson.c"
    $32 = $2; //@line 456 "cjson/cjson.c"
    $33 = (($32) - 1)|0; //@line 456 "cjson/cjson.c"
    $34 = ($31|0)<($33|0); //@line 456 "cjson/cjson.c"
    if (!($34)) {
     break;
    }
    $35 = $ptr; //@line 456 "cjson/cjson.c"
    $36 = (($35) + 1|0); //@line 456 "cjson/cjson.c"
    $ptr = $36; //@line 456 "cjson/cjson.c"
    HEAP8[$35>>0] = 9; //@line 456 "cjson/cjson.c"
    $37 = $i; //@line 456 "cjson/cjson.c"
    $38 = (($37) + 1)|0; //@line 456 "cjson/cjson.c"
    $i = $38; //@line 456 "cjson/cjson.c"
   }
  }
  $39 = $ptr; //@line 457 "cjson/cjson.c"
  $40 = (($39) + 1|0); //@line 457 "cjson/cjson.c"
  $ptr = $40; //@line 457 "cjson/cjson.c"
  HEAP8[$39>>0] = 125; //@line 457 "cjson/cjson.c"
  $41 = $ptr; //@line 457 "cjson/cjson.c"
  $42 = (($41) + 1|0); //@line 457 "cjson/cjson.c"
  $ptr = $42; //@line 457 "cjson/cjson.c"
  HEAP8[$41>>0] = 0; //@line 457 "cjson/cjson.c"
  $43 = $out; //@line 458 "cjson/cjson.c"
  $0 = $43; //@line 458 "cjson/cjson.c"
  $241 = $0; //@line 507 "cjson/cjson.c"
  STACKTOP = sp;return ($241|0); //@line 507 "cjson/cjson.c"
 }
 $44 = HEAP32[16>>2]|0; //@line 461 "cjson/cjson.c"
 $45 = $numentries; //@line 461 "cjson/cjson.c"
 $46 = $45<<2; //@line 461 "cjson/cjson.c"
 $47 = (FUNCTION_TABLE_ii[$44 & 15]($46)|0); //@line 461 "cjson/cjson.c"
 $entries = $47; //@line 461 "cjson/cjson.c"
 $48 = $entries; //@line 462 "cjson/cjson.c"
 $49 = ($48|0)!=(0|0); //@line 462 "cjson/cjson.c"
 if (!($49)) {
  $0 = 0; //@line 462 "cjson/cjson.c"
  $241 = $0; //@line 507 "cjson/cjson.c"
  STACKTOP = sp;return ($241|0); //@line 507 "cjson/cjson.c"
 }
 $50 = HEAP32[16>>2]|0; //@line 463 "cjson/cjson.c"
 $51 = $numentries; //@line 463 "cjson/cjson.c"
 $52 = $51<<2; //@line 463 "cjson/cjson.c"
 $53 = (FUNCTION_TABLE_ii[$50 & 15]($52)|0); //@line 463 "cjson/cjson.c"
 $names = $53; //@line 463 "cjson/cjson.c"
 $54 = $names; //@line 464 "cjson/cjson.c"
 $55 = ($54|0)!=(0|0); //@line 464 "cjson/cjson.c"
 if (!($55)) {
  $56 = HEAP32[24>>2]|0; //@line 464 "cjson/cjson.c"
  $57 = $entries; //@line 464 "cjson/cjson.c"
  FUNCTION_TABLE_vi[$56 & 15]($57); //@line 464 "cjson/cjson.c"
  $0 = 0; //@line 464 "cjson/cjson.c"
  $241 = $0; //@line 507 "cjson/cjson.c"
  STACKTOP = sp;return ($241|0); //@line 507 "cjson/cjson.c"
 }
 $58 = $entries; //@line 465 "cjson/cjson.c"
 $59 = $numentries; //@line 465 "cjson/cjson.c"
 $60 = $59<<2; //@line 465 "cjson/cjson.c"
 _memset(($58|0),0,($60|0))|0; //@line 465 "cjson/cjson.c"
 $61 = $names; //@line 466 "cjson/cjson.c"
 $62 = $numentries; //@line 466 "cjson/cjson.c"
 $63 = $62<<2; //@line 466 "cjson/cjson.c"
 _memset(($61|0),0,($63|0))|0; //@line 466 "cjson/cjson.c"
 $64 = $1; //@line 469 "cjson/cjson.c"
 $65 = (($64) + 8|0); //@line 469 "cjson/cjson.c"
 $66 = HEAP32[$65>>2]|0; //@line 469 "cjson/cjson.c"
 $child = $66; //@line 469 "cjson/cjson.c"
 $67 = $2; //@line 469 "cjson/cjson.c"
 $68 = (($67) + 1)|0; //@line 469 "cjson/cjson.c"
 $2 = $68; //@line 469 "cjson/cjson.c"
 $69 = $3; //@line 469 "cjson/cjson.c"
 $70 = ($69|0)!=(0); //@line 469 "cjson/cjson.c"
 if ($70) {
  $71 = $2; //@line 469 "cjson/cjson.c"
  $72 = $len; //@line 469 "cjson/cjson.c"
  $73 = (($72) + ($71))|0; //@line 469 "cjson/cjson.c"
  $len = $73; //@line 469 "cjson/cjson.c"
 }
 while(1) {
  $74 = $child; //@line 470 "cjson/cjson.c"
  $75 = ($74|0)!=(0|0); //@line 470 "cjson/cjson.c"
  if (!($75)) {
   break;
  }
  $76 = $child; //@line 472 "cjson/cjson.c"
  $77 = (($76) + 32|0); //@line 472 "cjson/cjson.c"
  $78 = HEAP32[$77>>2]|0; //@line 472 "cjson/cjson.c"
  $79 = (_print_string_ptr($78)|0); //@line 472 "cjson/cjson.c"
  $str = $79; //@line 472 "cjson/cjson.c"
  $80 = $i; //@line 472 "cjson/cjson.c"
  $81 = $names; //@line 472 "cjson/cjson.c"
  $82 = (($81) + ($80<<2)|0); //@line 472 "cjson/cjson.c"
  HEAP32[$82>>2] = $79; //@line 472 "cjson/cjson.c"
  $83 = $child; //@line 473 "cjson/cjson.c"
  $84 = $2; //@line 473 "cjson/cjson.c"
  $85 = $3; //@line 473 "cjson/cjson.c"
  $86 = (_print_value($83,$84,$85)|0); //@line 473 "cjson/cjson.c"
  $ret = $86; //@line 473 "cjson/cjson.c"
  $87 = $i; //@line 473 "cjson/cjson.c"
  $88 = (($87) + 1)|0; //@line 473 "cjson/cjson.c"
  $i = $88; //@line 473 "cjson/cjson.c"
  $89 = $entries; //@line 473 "cjson/cjson.c"
  $90 = (($89) + ($87<<2)|0); //@line 473 "cjson/cjson.c"
  HEAP32[$90>>2] = $86; //@line 473 "cjson/cjson.c"
  $91 = $str; //@line 474 "cjson/cjson.c"
  $92 = ($91|0)!=(0|0); //@line 474 "cjson/cjson.c"
  if ($92) {
   $93 = $ret; //@line 474 "cjson/cjson.c"
   $94 = ($93|0)!=(0|0); //@line 474 "cjson/cjson.c"
   if ($94) {
    $95 = $ret; //@line 474 "cjson/cjson.c"
    $96 = (_strlen(($95|0))|0); //@line 474 "cjson/cjson.c"
    $97 = $str; //@line 474 "cjson/cjson.c"
    $98 = (_strlen(($97|0))|0); //@line 474 "cjson/cjson.c"
    $99 = (($96) + ($98))|0; //@line 474 "cjson/cjson.c"
    $100 = (($99) + 2)|0; //@line 474 "cjson/cjson.c"
    $101 = $3; //@line 474 "cjson/cjson.c"
    $102 = ($101|0)!=(0); //@line 474 "cjson/cjson.c"
    if ($102) {
     $103 = $2; //@line 474 "cjson/cjson.c"
     $104 = (2 + ($103))|0; //@line 474 "cjson/cjson.c"
     $106 = $104;
    } else {
     $106 = 0;
    }
    $105 = (($100) + ($106))|0; //@line 474 "cjson/cjson.c"
    $107 = $len; //@line 474 "cjson/cjson.c"
    $108 = (($107) + ($105))|0; //@line 474 "cjson/cjson.c"
    $len = $108; //@line 474 "cjson/cjson.c"
   } else {
    label = 31;
   }
  } else {
   label = 31;
  }
  if ((label|0) == 31) {
   label = 0;
   $fail = 1; //@line 474 "cjson/cjson.c"
  }
  $109 = $child; //@line 475 "cjson/cjson.c"
  $110 = HEAP32[$109>>2]|0; //@line 475 "cjson/cjson.c"
  $child = $110; //@line 475 "cjson/cjson.c"
 }
 $111 = $fail; //@line 479 "cjson/cjson.c"
 $112 = ($111|0)!=(0); //@line 479 "cjson/cjson.c"
 if (!($112)) {
  $113 = HEAP32[16>>2]|0; //@line 479 "cjson/cjson.c"
  $114 = $len; //@line 479 "cjson/cjson.c"
  $115 = (FUNCTION_TABLE_ii[$113 & 15]($114)|0); //@line 479 "cjson/cjson.c"
  $out = $115; //@line 479 "cjson/cjson.c"
 }
 $116 = $out; //@line 480 "cjson/cjson.c"
 $117 = ($116|0)!=(0|0); //@line 480 "cjson/cjson.c"
 if (!($117)) {
  $fail = 1; //@line 480 "cjson/cjson.c"
 }
 $118 = $fail; //@line 483 "cjson/cjson.c"
 $119 = ($118|0)!=(0); //@line 483 "cjson/cjson.c"
 if ($119) {
  $i = 0; //@line 485 "cjson/cjson.c"
  while(1) {
   $120 = $i; //@line 485 "cjson/cjson.c"
   $121 = $numentries; //@line 485 "cjson/cjson.c"
   $122 = ($120|0)<($121|0); //@line 485 "cjson/cjson.c"
   if (!($122)) {
    break;
   }
   $123 = $i; //@line 485 "cjson/cjson.c"
   $124 = $names; //@line 485 "cjson/cjson.c"
   $125 = (($124) + ($123<<2)|0); //@line 485 "cjson/cjson.c"
   $126 = HEAP32[$125>>2]|0; //@line 485 "cjson/cjson.c"
   $127 = ($126|0)!=(0|0); //@line 485 "cjson/cjson.c"
   if ($127) {
    $128 = HEAP32[24>>2]|0; //@line 485 "cjson/cjson.c"
    $129 = $i; //@line 485 "cjson/cjson.c"
    $130 = $names; //@line 485 "cjson/cjson.c"
    $131 = (($130) + ($129<<2)|0); //@line 485 "cjson/cjson.c"
    $132 = HEAP32[$131>>2]|0; //@line 485 "cjson/cjson.c"
    FUNCTION_TABLE_vi[$128 & 15]($132); //@line 485 "cjson/cjson.c"
   }
   $133 = $i; //@line 485 "cjson/cjson.c"
   $134 = $entries; //@line 485 "cjson/cjson.c"
   $135 = (($134) + ($133<<2)|0); //@line 485 "cjson/cjson.c"
   $136 = HEAP32[$135>>2]|0; //@line 485 "cjson/cjson.c"
   $137 = ($136|0)!=(0|0); //@line 485 "cjson/cjson.c"
   if ($137) {
    $138 = HEAP32[24>>2]|0; //@line 485 "cjson/cjson.c"
    $139 = $i; //@line 485 "cjson/cjson.c"
    $140 = $entries; //@line 485 "cjson/cjson.c"
    $141 = (($140) + ($139<<2)|0); //@line 485 "cjson/cjson.c"
    $142 = HEAP32[$141>>2]|0; //@line 485 "cjson/cjson.c"
    FUNCTION_TABLE_vi[$138 & 15]($142); //@line 485 "cjson/cjson.c"
   }
   $143 = $i; //@line 485 "cjson/cjson.c"
   $144 = (($143) + 1)|0; //@line 485 "cjson/cjson.c"
   $i = $144; //@line 485 "cjson/cjson.c"
  }
  $145 = HEAP32[24>>2]|0; //@line 486 "cjson/cjson.c"
  $146 = $names; //@line 486 "cjson/cjson.c"
  FUNCTION_TABLE_vi[$145 & 15]($146); //@line 486 "cjson/cjson.c"
  $147 = HEAP32[24>>2]|0; //@line 486 "cjson/cjson.c"
  $148 = $entries; //@line 486 "cjson/cjson.c"
  FUNCTION_TABLE_vi[$147 & 15]($148); //@line 486 "cjson/cjson.c"
  $0 = 0; //@line 487 "cjson/cjson.c"
  $241 = $0; //@line 507 "cjson/cjson.c"
  STACKTOP = sp;return ($241|0); //@line 507 "cjson/cjson.c"
 }
 $149 = $out; //@line 491 "cjson/cjson.c"
 HEAP8[$149>>0] = 123; //@line 491 "cjson/cjson.c"
 $150 = $out; //@line 491 "cjson/cjson.c"
 $151 = (($150) + 1|0); //@line 491 "cjson/cjson.c"
 $ptr = $151; //@line 491 "cjson/cjson.c"
 $152 = $3; //@line 491 "cjson/cjson.c"
 $153 = ($152|0)!=(0); //@line 491 "cjson/cjson.c"
 if ($153) {
  $154 = $ptr; //@line 491 "cjson/cjson.c"
  $155 = (($154) + 1|0); //@line 491 "cjson/cjson.c"
  $ptr = $155; //@line 491 "cjson/cjson.c"
  HEAP8[$154>>0] = 10; //@line 491 "cjson/cjson.c"
 }
 $156 = $ptr; //@line 491 "cjson/cjson.c"
 HEAP8[$156>>0] = 0; //@line 491 "cjson/cjson.c"
 $i = 0; //@line 492 "cjson/cjson.c"
 while(1) {
  $157 = $i; //@line 492 "cjson/cjson.c"
  $158 = $numentries; //@line 492 "cjson/cjson.c"
  $159 = ($157|0)<($158|0); //@line 492 "cjson/cjson.c"
  if (!($159)) {
   break;
  }
  $160 = $3; //@line 494 "cjson/cjson.c"
  $161 = ($160|0)!=(0); //@line 494 "cjson/cjson.c"
  if ($161) {
   $j = 0; //@line 494 "cjson/cjson.c"
   while(1) {
    $162 = $j; //@line 494 "cjson/cjson.c"
    $163 = $2; //@line 494 "cjson/cjson.c"
    $164 = ($162|0)<($163|0); //@line 494 "cjson/cjson.c"
    if (!($164)) {
     break;
    }
    $165 = $ptr; //@line 494 "cjson/cjson.c"
    $166 = (($165) + 1|0); //@line 494 "cjson/cjson.c"
    $ptr = $166; //@line 494 "cjson/cjson.c"
    HEAP8[$165>>0] = 9; //@line 494 "cjson/cjson.c"
    $167 = $j; //@line 494 "cjson/cjson.c"
    $168 = (($167) + 1)|0; //@line 494 "cjson/cjson.c"
    $j = $168; //@line 494 "cjson/cjson.c"
   }
  }
  $169 = $ptr; //@line 495 "cjson/cjson.c"
  $170 = $i; //@line 495 "cjson/cjson.c"
  $171 = $names; //@line 495 "cjson/cjson.c"
  $172 = (($171) + ($170<<2)|0); //@line 495 "cjson/cjson.c"
  $173 = HEAP32[$172>>2]|0; //@line 495 "cjson/cjson.c"
  (_strcpy(($169|0),($173|0))|0); //@line 495 "cjson/cjson.c"
  $174 = $i; //@line 495 "cjson/cjson.c"
  $175 = $names; //@line 495 "cjson/cjson.c"
  $176 = (($175) + ($174<<2)|0); //@line 495 "cjson/cjson.c"
  $177 = HEAP32[$176>>2]|0; //@line 495 "cjson/cjson.c"
  $178 = (_strlen(($177|0))|0); //@line 495 "cjson/cjson.c"
  $179 = $ptr; //@line 495 "cjson/cjson.c"
  $180 = (($179) + ($178)|0); //@line 495 "cjson/cjson.c"
  $ptr = $180; //@line 495 "cjson/cjson.c"
  $181 = $ptr; //@line 496 "cjson/cjson.c"
  $182 = (($181) + 1|0); //@line 496 "cjson/cjson.c"
  $ptr = $182; //@line 496 "cjson/cjson.c"
  HEAP8[$181>>0] = 58; //@line 496 "cjson/cjson.c"
  $183 = $3; //@line 496 "cjson/cjson.c"
  $184 = ($183|0)!=(0); //@line 496 "cjson/cjson.c"
  if ($184) {
   $185 = $ptr; //@line 496 "cjson/cjson.c"
   $186 = (($185) + 1|0); //@line 496 "cjson/cjson.c"
   $ptr = $186; //@line 496 "cjson/cjson.c"
   HEAP8[$185>>0] = 9; //@line 496 "cjson/cjson.c"
  }
  $187 = $ptr; //@line 497 "cjson/cjson.c"
  $188 = $i; //@line 497 "cjson/cjson.c"
  $189 = $entries; //@line 497 "cjson/cjson.c"
  $190 = (($189) + ($188<<2)|0); //@line 497 "cjson/cjson.c"
  $191 = HEAP32[$190>>2]|0; //@line 497 "cjson/cjson.c"
  (_strcpy(($187|0),($191|0))|0); //@line 497 "cjson/cjson.c"
  $192 = $i; //@line 497 "cjson/cjson.c"
  $193 = $entries; //@line 497 "cjson/cjson.c"
  $194 = (($193) + ($192<<2)|0); //@line 497 "cjson/cjson.c"
  $195 = HEAP32[$194>>2]|0; //@line 497 "cjson/cjson.c"
  $196 = (_strlen(($195|0))|0); //@line 497 "cjson/cjson.c"
  $197 = $ptr; //@line 497 "cjson/cjson.c"
  $198 = (($197) + ($196)|0); //@line 497 "cjson/cjson.c"
  $ptr = $198; //@line 497 "cjson/cjson.c"
  $199 = $i; //@line 498 "cjson/cjson.c"
  $200 = $numentries; //@line 498 "cjson/cjson.c"
  $201 = (($200) - 1)|0; //@line 498 "cjson/cjson.c"
  $202 = ($199|0)!=($201|0); //@line 498 "cjson/cjson.c"
  if ($202) {
   $203 = $ptr; //@line 498 "cjson/cjson.c"
   $204 = (($203) + 1|0); //@line 498 "cjson/cjson.c"
   $ptr = $204; //@line 498 "cjson/cjson.c"
   HEAP8[$203>>0] = 44; //@line 498 "cjson/cjson.c"
  }
  $205 = $3; //@line 499 "cjson/cjson.c"
  $206 = ($205|0)!=(0); //@line 499 "cjson/cjson.c"
  if ($206) {
   $207 = $ptr; //@line 499 "cjson/cjson.c"
   $208 = (($207) + 1|0); //@line 499 "cjson/cjson.c"
   $ptr = $208; //@line 499 "cjson/cjson.c"
   HEAP8[$207>>0] = 10; //@line 499 "cjson/cjson.c"
  }
  $209 = $ptr; //@line 499 "cjson/cjson.c"
  HEAP8[$209>>0] = 0; //@line 499 "cjson/cjson.c"
  $210 = HEAP32[24>>2]|0; //@line 500 "cjson/cjson.c"
  $211 = $i; //@line 500 "cjson/cjson.c"
  $212 = $names; //@line 500 "cjson/cjson.c"
  $213 = (($212) + ($211<<2)|0); //@line 500 "cjson/cjson.c"
  $214 = HEAP32[$213>>2]|0; //@line 500 "cjson/cjson.c"
  FUNCTION_TABLE_vi[$210 & 15]($214); //@line 500 "cjson/cjson.c"
  $215 = HEAP32[24>>2]|0; //@line 500 "cjson/cjson.c"
  $216 = $i; //@line 500 "cjson/cjson.c"
  $217 = $entries; //@line 500 "cjson/cjson.c"
  $218 = (($217) + ($216<<2)|0); //@line 500 "cjson/cjson.c"
  $219 = HEAP32[$218>>2]|0; //@line 500 "cjson/cjson.c"
  FUNCTION_TABLE_vi[$215 & 15]($219); //@line 500 "cjson/cjson.c"
  $220 = $i; //@line 492 "cjson/cjson.c"
  $221 = (($220) + 1)|0; //@line 492 "cjson/cjson.c"
  $i = $221; //@line 492 "cjson/cjson.c"
 }
 $222 = HEAP32[24>>2]|0; //@line 503 "cjson/cjson.c"
 $223 = $names; //@line 503 "cjson/cjson.c"
 FUNCTION_TABLE_vi[$222 & 15]($223); //@line 503 "cjson/cjson.c"
 $224 = HEAP32[24>>2]|0; //@line 503 "cjson/cjson.c"
 $225 = $entries; //@line 503 "cjson/cjson.c"
 FUNCTION_TABLE_vi[$224 & 15]($225); //@line 503 "cjson/cjson.c"
 $226 = $3; //@line 504 "cjson/cjson.c"
 $227 = ($226|0)!=(0); //@line 504 "cjson/cjson.c"
 if ($227) {
  $i = 0; //@line 504 "cjson/cjson.c"
  while(1) {
   $228 = $i; //@line 504 "cjson/cjson.c"
   $229 = $2; //@line 504 "cjson/cjson.c"
   $230 = (($229) - 1)|0; //@line 504 "cjson/cjson.c"
   $231 = ($228|0)<($230|0); //@line 504 "cjson/cjson.c"
   if (!($231)) {
    break;
   }
   $232 = $ptr; //@line 504 "cjson/cjson.c"
   $233 = (($232) + 1|0); //@line 504 "cjson/cjson.c"
   $ptr = $233; //@line 504 "cjson/cjson.c"
   HEAP8[$232>>0] = 9; //@line 504 "cjson/cjson.c"
   $234 = $i; //@line 504 "cjson/cjson.c"
   $235 = (($234) + 1)|0; //@line 504 "cjson/cjson.c"
   $i = $235; //@line 504 "cjson/cjson.c"
  }
 }
 $236 = $ptr; //@line 505 "cjson/cjson.c"
 $237 = (($236) + 1|0); //@line 505 "cjson/cjson.c"
 $ptr = $237; //@line 505 "cjson/cjson.c"
 HEAP8[$236>>0] = 125; //@line 505 "cjson/cjson.c"
 $238 = $ptr; //@line 505 "cjson/cjson.c"
 $239 = (($238) + 1|0); //@line 505 "cjson/cjson.c"
 $ptr = $239; //@line 505 "cjson/cjson.c"
 HEAP8[$238>>0] = 0; //@line 505 "cjson/cjson.c"
 $240 = $out; //@line 506 "cjson/cjson.c"
 $0 = $240; //@line 506 "cjson/cjson.c"
 $241 = $0; //@line 507 "cjson/cjson.c"
 STACKTOP = sp;return ($241|0); //@line 507 "cjson/cjson.c"
}
function _print_string_ptr($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $len = 0, $out = 0, $ptr = 0, $ptr2 = 0, $token = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $1 = $str;
 $len = 0; //@line 217 "cjson/cjson.c"
 $2 = $1; //@line 219 "cjson/cjson.c"
 $3 = ($2|0)!=(0|0); //@line 219 "cjson/cjson.c"
 if (!($3)) {
  $4 = (_cJSON_strdup(56)|0); //@line 219 "cjson/cjson.c"
  $0 = $4; //@line 219 "cjson/cjson.c"
  $86 = $0; //@line 248 "cjson/cjson.c"
  STACKTOP = sp;return ($86|0); //@line 248 "cjson/cjson.c"
 }
 $5 = $1; //@line 220 "cjson/cjson.c"
 $ptr = $5; //@line 220 "cjson/cjson.c"
 while(1) {
  $6 = $ptr; //@line 220 "cjson/cjson.c"
  $7 = HEAP8[$6>>0]|0; //@line 220 "cjson/cjson.c"
  $token = $7; //@line 220 "cjson/cjson.c"
  $8 = $7&255; //@line 220 "cjson/cjson.c"
  $9 = ($8|0)!=(0); //@line 220 "cjson/cjson.c"
  if ($9) {
   $10 = $len; //@line 220 "cjson/cjson.c"
   $11 = (($10) + 1)|0; //@line 220 "cjson/cjson.c"
   $len = $11; //@line 220 "cjson/cjson.c"
   $12 = ($11|0)!=(0); //@line 220 "cjson/cjson.c"
   $87 = $12;
  } else {
   $87 = 0;
  }
  if (!($87)) {
   break;
  }
  $13 = $token; //@line 220 "cjson/cjson.c"
  $14 = $13&255; //@line 220 "cjson/cjson.c"
  $15 = (_strchr(64,$14)|0); //@line 220 "cjson/cjson.c"
  $16 = ($15|0)!=(0|0); //@line 220 "cjson/cjson.c"
  if ($16) {
   $17 = $len; //@line 220 "cjson/cjson.c"
   $18 = (($17) + 1)|0; //@line 220 "cjson/cjson.c"
   $len = $18; //@line 220 "cjson/cjson.c"
  } else {
   $19 = $token; //@line 220 "cjson/cjson.c"
   $20 = $19&255; //@line 220 "cjson/cjson.c"
   $21 = ($20|0)<(32); //@line 220 "cjson/cjson.c"
   if ($21) {
    $22 = $len; //@line 220 "cjson/cjson.c"
    $23 = (($22) + 5)|0; //@line 220 "cjson/cjson.c"
    $len = $23; //@line 220 "cjson/cjson.c"
   }
  }
  $24 = $ptr; //@line 220 "cjson/cjson.c"
  $25 = (($24) + 1|0); //@line 220 "cjson/cjson.c"
  $ptr = $25; //@line 220 "cjson/cjson.c"
 }
 $26 = HEAP32[16>>2]|0; //@line 222 "cjson/cjson.c"
 $27 = $len; //@line 222 "cjson/cjson.c"
 $28 = (($27) + 3)|0; //@line 222 "cjson/cjson.c"
 $29 = (FUNCTION_TABLE_ii[$26 & 15]($28)|0); //@line 222 "cjson/cjson.c"
 $out = $29; //@line 222 "cjson/cjson.c"
 $30 = $out; //@line 223 "cjson/cjson.c"
 $31 = ($30|0)!=(0|0); //@line 223 "cjson/cjson.c"
 if (!($31)) {
  $0 = 0; //@line 223 "cjson/cjson.c"
  $86 = $0; //@line 248 "cjson/cjson.c"
  STACKTOP = sp;return ($86|0); //@line 248 "cjson/cjson.c"
 }
 $32 = $out; //@line 225 "cjson/cjson.c"
 $ptr2 = $32; //@line 225 "cjson/cjson.c"
 $33 = $1; //@line 225 "cjson/cjson.c"
 $ptr = $33; //@line 225 "cjson/cjson.c"
 $34 = $ptr2; //@line 226 "cjson/cjson.c"
 $35 = (($34) + 1|0); //@line 226 "cjson/cjson.c"
 $ptr2 = $35; //@line 226 "cjson/cjson.c"
 HEAP8[$34>>0] = 34; //@line 226 "cjson/cjson.c"
 while(1) {
  $36 = $ptr; //@line 227 "cjson/cjson.c"
  $37 = HEAP8[$36>>0]|0; //@line 227 "cjson/cjson.c"
  $38 = ($37<<24>>24)!=(0); //@line 227 "cjson/cjson.c"
  if (!($38)) {
   break;
  }
  $39 = $ptr; //@line 229 "cjson/cjson.c"
  $40 = HEAP8[$39>>0]|0; //@line 229 "cjson/cjson.c"
  $41 = $40&255; //@line 229 "cjson/cjson.c"
  $42 = ($41|0)>(31); //@line 229 "cjson/cjson.c"
  if ($42) {
   $43 = $ptr; //@line 229 "cjson/cjson.c"
   $44 = HEAP8[$43>>0]|0; //@line 229 "cjson/cjson.c"
   $45 = $44&255; //@line 229 "cjson/cjson.c"
   $46 = ($45|0)!=(34); //@line 229 "cjson/cjson.c"
   if ($46) {
    $47 = $ptr; //@line 229 "cjson/cjson.c"
    $48 = HEAP8[$47>>0]|0; //@line 229 "cjson/cjson.c"
    $49 = $48&255; //@line 229 "cjson/cjson.c"
    $50 = ($49|0)!=(92); //@line 229 "cjson/cjson.c"
    if ($50) {
     $51 = $ptr; //@line 229 "cjson/cjson.c"
     $52 = (($51) + 1|0); //@line 229 "cjson/cjson.c"
     $ptr = $52; //@line 229 "cjson/cjson.c"
     $53 = HEAP8[$51>>0]|0; //@line 229 "cjson/cjson.c"
     $54 = $ptr2; //@line 229 "cjson/cjson.c"
     $55 = (($54) + 1|0); //@line 229 "cjson/cjson.c"
     $ptr2 = $55; //@line 229 "cjson/cjson.c"
     HEAP8[$54>>0] = $53; //@line 229 "cjson/cjson.c"
    } else {
     label = 21;
    }
   } else {
    label = 21;
   }
  } else {
   label = 21;
  }
  if ((label|0) == 21) {
   label = 0;
   $56 = $ptr2; //@line 232 "cjson/cjson.c"
   $57 = (($56) + 1|0); //@line 232 "cjson/cjson.c"
   $ptr2 = $57; //@line 232 "cjson/cjson.c"
   HEAP8[$56>>0] = 92; //@line 232 "cjson/cjson.c"
   $58 = $ptr; //@line 233 "cjson/cjson.c"
   $59 = (($58) + 1|0); //@line 233 "cjson/cjson.c"
   $ptr = $59; //@line 233 "cjson/cjson.c"
   $60 = HEAP8[$58>>0]|0; //@line 233 "cjson/cjson.c"
   $token = $60; //@line 233 "cjson/cjson.c"
   $61 = $60&255; //@line 233 "cjson/cjson.c"
   switch ($61|0) {
   case 12:  {
    $68 = $ptr2; //@line 238 "cjson/cjson.c"
    $69 = (($68) + 1|0); //@line 238 "cjson/cjson.c"
    $ptr2 = $69; //@line 238 "cjson/cjson.c"
    HEAP8[$68>>0] = 102; //@line 238 "cjson/cjson.c"
    break;
   }
   case 92:  {
    $62 = $ptr2; //@line 235 "cjson/cjson.c"
    $63 = (($62) + 1|0); //@line 235 "cjson/cjson.c"
    $ptr2 = $63; //@line 235 "cjson/cjson.c"
    HEAP8[$62>>0] = 92; //@line 235 "cjson/cjson.c"
    break;
   }
   case 9:  {
    $74 = $ptr2; //@line 241 "cjson/cjson.c"
    $75 = (($74) + 1|0); //@line 241 "cjson/cjson.c"
    $ptr2 = $75; //@line 241 "cjson/cjson.c"
    HEAP8[$74>>0] = 116; //@line 241 "cjson/cjson.c"
    break;
   }
   case 13:  {
    $72 = $ptr2; //@line 240 "cjson/cjson.c"
    $73 = (($72) + 1|0); //@line 240 "cjson/cjson.c"
    $ptr2 = $73; //@line 240 "cjson/cjson.c"
    HEAP8[$72>>0] = 114; //@line 240 "cjson/cjson.c"
    break;
   }
   case 10:  {
    $70 = $ptr2; //@line 239 "cjson/cjson.c"
    $71 = (($70) + 1|0); //@line 239 "cjson/cjson.c"
    $ptr2 = $71; //@line 239 "cjson/cjson.c"
    HEAP8[$70>>0] = 110; //@line 239 "cjson/cjson.c"
    break;
   }
   case 8:  {
    $66 = $ptr2; //@line 237 "cjson/cjson.c"
    $67 = (($66) + 1|0); //@line 237 "cjson/cjson.c"
    $ptr2 = $67; //@line 237 "cjson/cjson.c"
    HEAP8[$66>>0] = 98; //@line 237 "cjson/cjson.c"
    break;
   }
   case 34:  {
    $64 = $ptr2; //@line 236 "cjson/cjson.c"
    $65 = (($64) + 1|0); //@line 236 "cjson/cjson.c"
    $ptr2 = $65; //@line 236 "cjson/cjson.c"
    HEAP8[$64>>0] = 34; //@line 236 "cjson/cjson.c"
    break;
   }
   default: {
    $76 = $ptr2; //@line 242 "cjson/cjson.c"
    $77 = $token; //@line 242 "cjson/cjson.c"
    $78 = $77&255; //@line 242 "cjson/cjson.c"
    HEAP32[$vararg_buffer>>2] = $78; //@line 242 "cjson/cjson.c"
    (_sprintf(($76|0),(72|0),($vararg_buffer|0))|0); //@line 242 "cjson/cjson.c"
    $79 = $ptr2; //@line 242 "cjson/cjson.c"
    $80 = (($79) + 5|0); //@line 242 "cjson/cjson.c"
    $ptr2 = $80; //@line 242 "cjson/cjson.c"
   }
   }
  }
 }
 $81 = $ptr2; //@line 246 "cjson/cjson.c"
 $82 = (($81) + 1|0); //@line 246 "cjson/cjson.c"
 $ptr2 = $82; //@line 246 "cjson/cjson.c"
 HEAP8[$81>>0] = 34; //@line 246 "cjson/cjson.c"
 $83 = $ptr2; //@line 246 "cjson/cjson.c"
 $84 = (($83) + 1|0); //@line 246 "cjson/cjson.c"
 $ptr2 = $84; //@line 246 "cjson/cjson.c"
 HEAP8[$83>>0] = 0; //@line 246 "cjson/cjson.c"
 $85 = $out; //@line 247 "cjson/cjson.c"
 $0 = $85; //@line 247 "cjson/cjson.c"
 $86 = $0; //@line 248 "cjson/cjson.c"
 STACKTOP = sp;return ($86|0); //@line 248 "cjson/cjson.c"
}
function _parse_string($item,$str) {
 $item = $item|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $len = 0, $out = 0;
 var $ptr = 0, $ptr2 = 0, $uc = 0, $uc2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $1 = $item;
 $2 = $str;
 $3 = $2; //@line 157 "cjson/cjson.c"
 $4 = (($3) + 1|0); //@line 157 "cjson/cjson.c"
 $ptr = $4; //@line 157 "cjson/cjson.c"
 $len = 0; //@line 157 "cjson/cjson.c"
 $5 = $2; //@line 158 "cjson/cjson.c"
 $6 = HEAP8[$5>>0]|0; //@line 158 "cjson/cjson.c"
 $7 = $6&255; //@line 158 "cjson/cjson.c"
 $8 = ($7|0)!=(34); //@line 158 "cjson/cjson.c"
 if ($8) {
  $9 = $2; //@line 158 "cjson/cjson.c"
  HEAP32[8>>2] = $9; //@line 158 "cjson/cjson.c"
  $0 = 0; //@line 158 "cjson/cjson.c"
  $175 = $0; //@line 212 "cjson/cjson.c"
  STACKTOP = sp;return ($175|0); //@line 212 "cjson/cjson.c"
 }
 while(1) {
  $10 = $ptr; //@line 160 "cjson/cjson.c"
  $11 = HEAP8[$10>>0]|0; //@line 160 "cjson/cjson.c"
  $12 = $11&255; //@line 160 "cjson/cjson.c"
  $13 = ($12|0)!=(34); //@line 160 "cjson/cjson.c"
  if ($13) {
   $14 = $ptr; //@line 160 "cjson/cjson.c"
   $15 = HEAP8[$14>>0]|0; //@line 160 "cjson/cjson.c"
   $16 = $15&255; //@line 160 "cjson/cjson.c"
   $17 = ($16|0)!=(0); //@line 160 "cjson/cjson.c"
   if ($17) {
    $18 = $len; //@line 160 "cjson/cjson.c"
    $19 = (($18) + 1)|0; //@line 160 "cjson/cjson.c"
    $len = $19; //@line 160 "cjson/cjson.c"
    $20 = ($19|0)!=(0); //@line 160 "cjson/cjson.c"
    $176 = $20;
   } else {
    $176 = 0;
   }
  } else {
   $176 = 0;
  }
  if (!($176)) {
   break;
  }
  $21 = $ptr; //@line 160 "cjson/cjson.c"
  $22 = (($21) + 1|0); //@line 160 "cjson/cjson.c"
  $ptr = $22; //@line 160 "cjson/cjson.c"
  $23 = HEAP8[$21>>0]|0; //@line 160 "cjson/cjson.c"
  $24 = $23&255; //@line 160 "cjson/cjson.c"
  $25 = ($24|0)==(92); //@line 160 "cjson/cjson.c"
  if ($25) {
   $26 = $ptr; //@line 160 "cjson/cjson.c"
   $27 = (($26) + 1|0); //@line 160 "cjson/cjson.c"
   $ptr = $27; //@line 160 "cjson/cjson.c"
  }
 }
 $28 = HEAP32[16>>2]|0; //@line 162 "cjson/cjson.c"
 $29 = $len; //@line 162 "cjson/cjson.c"
 $30 = (($29) + 1)|0; //@line 162 "cjson/cjson.c"
 $31 = (FUNCTION_TABLE_ii[$28 & 15]($30)|0); //@line 162 "cjson/cjson.c"
 $out = $31; //@line 162 "cjson/cjson.c"
 $32 = $out; //@line 163 "cjson/cjson.c"
 $33 = ($32|0)!=(0|0); //@line 163 "cjson/cjson.c"
 if (!($33)) {
  $0 = 0; //@line 163 "cjson/cjson.c"
  $175 = $0; //@line 212 "cjson/cjson.c"
  STACKTOP = sp;return ($175|0); //@line 212 "cjson/cjson.c"
 }
 $34 = $2; //@line 165 "cjson/cjson.c"
 $35 = (($34) + 1|0); //@line 165 "cjson/cjson.c"
 $ptr = $35; //@line 165 "cjson/cjson.c"
 $36 = $out; //@line 165 "cjson/cjson.c"
 $ptr2 = $36; //@line 165 "cjson/cjson.c"
 while(1) {
  $37 = $ptr; //@line 166 "cjson/cjson.c"
  $38 = HEAP8[$37>>0]|0; //@line 166 "cjson/cjson.c"
  $39 = $38&255; //@line 166 "cjson/cjson.c"
  $40 = ($39|0)!=(34); //@line 166 "cjson/cjson.c"
  if ($40) {
   $41 = $ptr; //@line 166 "cjson/cjson.c"
   $42 = HEAP8[$41>>0]|0; //@line 166 "cjson/cjson.c"
   $43 = $42&255; //@line 166 "cjson/cjson.c"
   $44 = ($43|0)!=(0); //@line 166 "cjson/cjson.c"
   $177 = $44;
  } else {
   $177 = 0;
  }
  if (!($177)) {
   break;
  }
  $45 = $ptr; //@line 168 "cjson/cjson.c"
  $46 = HEAP8[$45>>0]|0; //@line 168 "cjson/cjson.c"
  $47 = $46&255; //@line 168 "cjson/cjson.c"
  $48 = ($47|0)!=(92); //@line 168 "cjson/cjson.c"
  if ($48) {
   $49 = $ptr; //@line 168 "cjson/cjson.c"
   $50 = (($49) + 1|0); //@line 168 "cjson/cjson.c"
   $ptr = $50; //@line 168 "cjson/cjson.c"
   $51 = HEAP8[$49>>0]|0; //@line 168 "cjson/cjson.c"
   $52 = $ptr2; //@line 168 "cjson/cjson.c"
   $53 = (($52) + 1|0); //@line 168 "cjson/cjson.c"
   $ptr2 = $53; //@line 168 "cjson/cjson.c"
   HEAP8[$52>>0] = $51; //@line 168 "cjson/cjson.c"
  } else {
   $54 = $ptr; //@line 171 "cjson/cjson.c"
   $55 = (($54) + 1|0); //@line 171 "cjson/cjson.c"
   $ptr = $55; //@line 171 "cjson/cjson.c"
   $56 = $ptr; //@line 172 "cjson/cjson.c"
   $57 = HEAP8[$56>>0]|0; //@line 172 "cjson/cjson.c"
   $58 = $57&255; //@line 172 "cjson/cjson.c"
   L28: do {
    switch ($58|0) {
    case 114:  {
     $65 = $ptr2; //@line 177 "cjson/cjson.c"
     $66 = (($65) + 1|0); //@line 177 "cjson/cjson.c"
     $ptr2 = $66; //@line 177 "cjson/cjson.c"
     HEAP8[$65>>0] = 13; //@line 177 "cjson/cjson.c"
     break;
    }
    case 110:  {
     $63 = $ptr2; //@line 176 "cjson/cjson.c"
     $64 = (($63) + 1|0); //@line 176 "cjson/cjson.c"
     $ptr2 = $64; //@line 176 "cjson/cjson.c"
     HEAP8[$63>>0] = 10; //@line 176 "cjson/cjson.c"
     break;
    }
    case 116:  {
     $67 = $ptr2; //@line 178 "cjson/cjson.c"
     $68 = (($67) + 1|0); //@line 178 "cjson/cjson.c"
     $ptr2 = $68; //@line 178 "cjson/cjson.c"
     HEAP8[$67>>0] = 9; //@line 178 "cjson/cjson.c"
     break;
    }
    case 117:  {
     $69 = $ptr; //@line 180 "cjson/cjson.c"
     $70 = (($69) + 1|0); //@line 180 "cjson/cjson.c"
     $71 = (_parse_hex4($70)|0); //@line 180 "cjson/cjson.c"
     $uc = $71; //@line 180 "cjson/cjson.c"
     $72 = $ptr; //@line 180 "cjson/cjson.c"
     $73 = (($72) + 4|0); //@line 180 "cjson/cjson.c"
     $ptr = $73; //@line 180 "cjson/cjson.c"
     $74 = $uc; //@line 182 "cjson/cjson.c"
     $75 = ($74>>>0)>=(56320); //@line 182 "cjson/cjson.c"
     if ($75) {
      $76 = $uc; //@line 182 "cjson/cjson.c"
      $77 = ($76>>>0)<=(57343); //@line 182 "cjson/cjson.c"
      if (!($77)) {
       label = 27;
      }
     } else {
      label = 27;
     }
     if ((label|0) == 27) {
      label = 0;
      $78 = $uc; //@line 182 "cjson/cjson.c"
      $79 = ($78|0)==(0); //@line 182 "cjson/cjson.c"
      if (!($79)) {
       $80 = $uc; //@line 184 "cjson/cjson.c"
       $81 = ($80>>>0)>=(55296); //@line 184 "cjson/cjson.c"
       do {
        if ($81) {
         $82 = $uc; //@line 184 "cjson/cjson.c"
         $83 = ($82>>>0)<=(56319); //@line 184 "cjson/cjson.c"
         if ($83) {
          $84 = $ptr; //@line 186 "cjson/cjson.c"
          $85 = (($84) + 1|0); //@line 186 "cjson/cjson.c"
          $86 = HEAP8[$85>>0]|0; //@line 186 "cjson/cjson.c"
          $87 = $86&255; //@line 186 "cjson/cjson.c"
          $88 = ($87|0)!=(92); //@line 186 "cjson/cjson.c"
          if (!($88)) {
           $89 = $ptr; //@line 186 "cjson/cjson.c"
           $90 = (($89) + 2|0); //@line 186 "cjson/cjson.c"
           $91 = HEAP8[$90>>0]|0; //@line 186 "cjson/cjson.c"
           $92 = $91&255; //@line 186 "cjson/cjson.c"
           $93 = ($92|0)!=(117); //@line 186 "cjson/cjson.c"
           if (!($93)) {
            $94 = $ptr; //@line 187 "cjson/cjson.c"
            $95 = (($94) + 3|0); //@line 187 "cjson/cjson.c"
            $96 = (_parse_hex4($95)|0); //@line 187 "cjson/cjson.c"
            $uc2 = $96; //@line 187 "cjson/cjson.c"
            $97 = $ptr; //@line 187 "cjson/cjson.c"
            $98 = (($97) + 6|0); //@line 187 "cjson/cjson.c"
            $ptr = $98; //@line 187 "cjson/cjson.c"
            $99 = $uc2; //@line 188 "cjson/cjson.c"
            $100 = ($99>>>0)<(56320); //@line 188 "cjson/cjson.c"
            if (!($100)) {
             $101 = $uc2; //@line 188 "cjson/cjson.c"
             $102 = ($101>>>0)>(57343); //@line 188 "cjson/cjson.c"
             if (!($102)) {
              $103 = $uc; //@line 189 "cjson/cjson.c"
              $104 = $103 & 1023; //@line 189 "cjson/cjson.c"
              $105 = $104 << 10; //@line 189 "cjson/cjson.c"
              $106 = $uc2; //@line 189 "cjson/cjson.c"
              $107 = $106 & 1023; //@line 189 "cjson/cjson.c"
              $108 = $105 | $107; //@line 189 "cjson/cjson.c"
              $109 = (65536 + ($108))|0; //@line 189 "cjson/cjson.c"
              $uc = $109; //@line 189 "cjson/cjson.c"
              break;
             }
            }
            break L28;
           }
          }
          break L28;
         }
        }
       } while(0);
       $len = 4; //@line 192 "cjson/cjson.c"
       $110 = $uc; //@line 192 "cjson/cjson.c"
       $111 = ($110>>>0)<(128); //@line 192 "cjson/cjson.c"
       if ($111) {
        $len = 1; //@line 192 "cjson/cjson.c"
       } else {
        $112 = $uc; //@line 192 "cjson/cjson.c"
        $113 = ($112>>>0)<(2048); //@line 192 "cjson/cjson.c"
        if ($113) {
         $len = 2; //@line 192 "cjson/cjson.c"
        } else {
         $114 = $uc; //@line 192 "cjson/cjson.c"
         $115 = ($114>>>0)<(65536); //@line 192 "cjson/cjson.c"
         if ($115) {
          $len = 3; //@line 192 "cjson/cjson.c"
         }
        }
       }
       $116 = $len; //@line 192 "cjson/cjson.c"
       $117 = $ptr2; //@line 192 "cjson/cjson.c"
       $118 = (($117) + ($116)|0); //@line 192 "cjson/cjson.c"
       $ptr2 = $118; //@line 192 "cjson/cjson.c"
       $119 = $len; //@line 194 "cjson/cjson.c"
       if ((($119|0) == 1)) {
        label = 50;
       } else if ((($119|0) == 2)) {
        label = 49;
       } else if ((($119|0) == 4)) {
        $120 = $uc; //@line 195 "cjson/cjson.c"
        $121 = $120 | 128; //@line 195 "cjson/cjson.c"
        $122 = $121 & 191; //@line 195 "cjson/cjson.c"
        $123 = $122&255; //@line 195 "cjson/cjson.c"
        $124 = $ptr2; //@line 195 "cjson/cjson.c"
        $125 = (($124) + -1|0); //@line 195 "cjson/cjson.c"
        $ptr2 = $125; //@line 195 "cjson/cjson.c"
        HEAP8[$125>>0] = $123; //@line 195 "cjson/cjson.c"
        $126 = $uc; //@line 195 "cjson/cjson.c"
        $127 = $126 >>> 6; //@line 195 "cjson/cjson.c"
        $uc = $127; //@line 195 "cjson/cjson.c"
        label = 48;
       } else if ((($119|0) == 3)) {
        label = 48;
       }
       if ((label|0) == 48) {
        label = 0;
        $128 = $uc; //@line 196 "cjson/cjson.c"
        $129 = $128 | 128; //@line 196 "cjson/cjson.c"
        $130 = $129 & 191; //@line 196 "cjson/cjson.c"
        $131 = $130&255; //@line 196 "cjson/cjson.c"
        $132 = $ptr2; //@line 196 "cjson/cjson.c"
        $133 = (($132) + -1|0); //@line 196 "cjson/cjson.c"
        $ptr2 = $133; //@line 196 "cjson/cjson.c"
        HEAP8[$133>>0] = $131; //@line 196 "cjson/cjson.c"
        $134 = $uc; //@line 196 "cjson/cjson.c"
        $135 = $134 >>> 6; //@line 196 "cjson/cjson.c"
        $uc = $135; //@line 196 "cjson/cjson.c"
        label = 49;
       }
       if ((label|0) == 49) {
        label = 0;
        $136 = $uc; //@line 197 "cjson/cjson.c"
        $137 = $136 | 128; //@line 197 "cjson/cjson.c"
        $138 = $137 & 191; //@line 197 "cjson/cjson.c"
        $139 = $138&255; //@line 197 "cjson/cjson.c"
        $140 = $ptr2; //@line 197 "cjson/cjson.c"
        $141 = (($140) + -1|0); //@line 197 "cjson/cjson.c"
        $ptr2 = $141; //@line 197 "cjson/cjson.c"
        HEAP8[$141>>0] = $139; //@line 197 "cjson/cjson.c"
        $142 = $uc; //@line 197 "cjson/cjson.c"
        $143 = $142 >>> 6; //@line 197 "cjson/cjson.c"
        $uc = $143; //@line 197 "cjson/cjson.c"
        label = 50;
       }
       if ((label|0) == 50) {
        label = 0;
        $144 = $uc; //@line 198 "cjson/cjson.c"
        $145 = $len; //@line 198 "cjson/cjson.c"
        $146 = (120 + ($145)|0); //@line 198 "cjson/cjson.c"
        $147 = HEAP8[$146>>0]|0; //@line 198 "cjson/cjson.c"
        $148 = $147&255; //@line 198 "cjson/cjson.c"
        $149 = $144 | $148; //@line 198 "cjson/cjson.c"
        $150 = $149&255; //@line 198 "cjson/cjson.c"
        $151 = $ptr2; //@line 198 "cjson/cjson.c"
        $152 = (($151) + -1|0); //@line 198 "cjson/cjson.c"
        $ptr2 = $152; //@line 198 "cjson/cjson.c"
        HEAP8[$152>>0] = $150; //@line 198 "cjson/cjson.c"
       }
       $153 = $len; //@line 200 "cjson/cjson.c"
       $154 = $ptr2; //@line 200 "cjson/cjson.c"
       $155 = (($154) + ($153)|0); //@line 200 "cjson/cjson.c"
       $ptr2 = $155; //@line 200 "cjson/cjson.c"
       break L28;
      }
     }
     break;
    }
    case 98:  {
     $59 = $ptr2; //@line 174 "cjson/cjson.c"
     $60 = (($59) + 1|0); //@line 174 "cjson/cjson.c"
     $ptr2 = $60; //@line 174 "cjson/cjson.c"
     HEAP8[$59>>0] = 8; //@line 174 "cjson/cjson.c"
     break;
    }
    case 102:  {
     $61 = $ptr2; //@line 175 "cjson/cjson.c"
     $62 = (($61) + 1|0); //@line 175 "cjson/cjson.c"
     $ptr2 = $62; //@line 175 "cjson/cjson.c"
     HEAP8[$61>>0] = 12; //@line 175 "cjson/cjson.c"
     break;
    }
    default: {
     $156 = $ptr; //@line 202 "cjson/cjson.c"
     $157 = HEAP8[$156>>0]|0; //@line 202 "cjson/cjson.c"
     $158 = $ptr2; //@line 202 "cjson/cjson.c"
     $159 = (($158) + 1|0); //@line 202 "cjson/cjson.c"
     $ptr2 = $159; //@line 202 "cjson/cjson.c"
     HEAP8[$158>>0] = $157; //@line 202 "cjson/cjson.c"
    }
    }
   } while(0);
   $160 = $ptr; //@line 204 "cjson/cjson.c"
   $161 = (($160) + 1|0); //@line 204 "cjson/cjson.c"
   $ptr = $161; //@line 204 "cjson/cjson.c"
  }
 }
 $162 = $ptr2; //@line 207 "cjson/cjson.c"
 HEAP8[$162>>0] = 0; //@line 207 "cjson/cjson.c"
 $163 = $ptr; //@line 208 "cjson/cjson.c"
 $164 = HEAP8[$163>>0]|0; //@line 208 "cjson/cjson.c"
 $165 = $164&255; //@line 208 "cjson/cjson.c"
 $166 = ($165|0)==(34); //@line 208 "cjson/cjson.c"
 if ($166) {
  $167 = $ptr; //@line 208 "cjson/cjson.c"
  $168 = (($167) + 1|0); //@line 208 "cjson/cjson.c"
  $ptr = $168; //@line 208 "cjson/cjson.c"
 }
 $169 = $out; //@line 209 "cjson/cjson.c"
 $170 = $1; //@line 209 "cjson/cjson.c"
 $171 = (($170) + 16|0); //@line 209 "cjson/cjson.c"
 HEAP32[$171>>2] = $169; //@line 209 "cjson/cjson.c"
 $172 = $1; //@line 210 "cjson/cjson.c"
 $173 = (($172) + 12|0); //@line 210 "cjson/cjson.c"
 HEAP32[$173>>2] = 4; //@line 210 "cjson/cjson.c"
 $174 = $ptr; //@line 211 "cjson/cjson.c"
 $0 = $174; //@line 211 "cjson/cjson.c"
 $175 = $0; //@line 212 "cjson/cjson.c"
 STACKTOP = sp;return ($175|0); //@line 212 "cjson/cjson.c"
}
function _parse_number($item,$num) {
 $item = $item|0;
 $num = $num|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0;
 var $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $n = 0.0, $scale = 0.0, $sign = 0.0, $signsubscale = 0;
 var $subscale = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $item;
 $1 = $num;
 $n = 0.0; //@line 98 "cjson/cjson.c"
 $sign = 1.0; //@line 98 "cjson/cjson.c"
 $scale = 0.0; //@line 98 "cjson/cjson.c"
 $subscale = 0; //@line 98 "cjson/cjson.c"
 $signsubscale = 1; //@line 98 "cjson/cjson.c"
 $2 = $1; //@line 100 "cjson/cjson.c"
 $3 = HEAP8[$2>>0]|0; //@line 100 "cjson/cjson.c"
 $4 = $3&255; //@line 100 "cjson/cjson.c"
 $5 = ($4|0)==(45); //@line 100 "cjson/cjson.c"
 if ($5) {
  $sign = -1.0; //@line 100 "cjson/cjson.c"
  $6 = $1; //@line 100 "cjson/cjson.c"
  $7 = (($6) + 1|0); //@line 100 "cjson/cjson.c"
  $1 = $7; //@line 100 "cjson/cjson.c"
 }
 $8 = $1; //@line 101 "cjson/cjson.c"
 $9 = HEAP8[$8>>0]|0; //@line 101 "cjson/cjson.c"
 $10 = $9&255; //@line 101 "cjson/cjson.c"
 $11 = ($10|0)==(48); //@line 101 "cjson/cjson.c"
 if ($11) {
  $12 = $1; //@line 101 "cjson/cjson.c"
  $13 = (($12) + 1|0); //@line 101 "cjson/cjson.c"
  $1 = $13; //@line 101 "cjson/cjson.c"
 }
 $14 = $1; //@line 102 "cjson/cjson.c"
 $15 = HEAP8[$14>>0]|0; //@line 102 "cjson/cjson.c"
 $16 = $15&255; //@line 102 "cjson/cjson.c"
 $17 = ($16|0)>=(49); //@line 102 "cjson/cjson.c"
 if ($17) {
  $18 = $1; //@line 102 "cjson/cjson.c"
  $19 = HEAP8[$18>>0]|0; //@line 102 "cjson/cjson.c"
  $20 = $19&255; //@line 102 "cjson/cjson.c"
  $21 = ($20|0)<=(57); //@line 102 "cjson/cjson.c"
  if ($21) {
   while(1) {
    $22 = $n; //@line 102 "cjson/cjson.c"
    $23 = $22 * 10.0; //@line 102 "cjson/cjson.c"
    $24 = $1; //@line 102 "cjson/cjson.c"
    $25 = (($24) + 1|0); //@line 102 "cjson/cjson.c"
    $1 = $25; //@line 102 "cjson/cjson.c"
    $26 = HEAP8[$24>>0]|0; //@line 102 "cjson/cjson.c"
    $27 = $26&255; //@line 102 "cjson/cjson.c"
    $28 = (($27) - 48)|0; //@line 102 "cjson/cjson.c"
    $29 = (+($28|0)); //@line 102 "cjson/cjson.c"
    $30 = $23 + $29; //@line 102 "cjson/cjson.c"
    $n = $30; //@line 102 "cjson/cjson.c"
    $31 = $1; //@line 102 "cjson/cjson.c"
    $32 = HEAP8[$31>>0]|0; //@line 102 "cjson/cjson.c"
    $33 = $32&255; //@line 102 "cjson/cjson.c"
    $34 = ($33|0)>=(48); //@line 102 "cjson/cjson.c"
    if ($34) {
     $35 = $1; //@line 102 "cjson/cjson.c"
     $36 = HEAP8[$35>>0]|0; //@line 102 "cjson/cjson.c"
     $37 = $36&255; //@line 102 "cjson/cjson.c"
     $38 = ($37|0)<=(57); //@line 102 "cjson/cjson.c"
     $133 = $38;
    } else {
     $133 = 0;
    }
    if (!($133)) {
     break;
    }
   }
  }
 }
 $39 = $1; //@line 103 "cjson/cjson.c"
 $40 = HEAP8[$39>>0]|0; //@line 103 "cjson/cjson.c"
 $41 = $40&255; //@line 103 "cjson/cjson.c"
 $42 = ($41|0)==(46); //@line 103 "cjson/cjson.c"
 if ($42) {
  $43 = $1; //@line 103 "cjson/cjson.c"
  $44 = (($43) + 1|0); //@line 103 "cjson/cjson.c"
  $45 = HEAP8[$44>>0]|0; //@line 103 "cjson/cjson.c"
  $46 = $45&255; //@line 103 "cjson/cjson.c"
  $47 = ($46|0)>=(48); //@line 103 "cjson/cjson.c"
  if ($47) {
   $48 = $1; //@line 103 "cjson/cjson.c"
   $49 = (($48) + 1|0); //@line 103 "cjson/cjson.c"
   $50 = HEAP8[$49>>0]|0; //@line 103 "cjson/cjson.c"
   $51 = $50&255; //@line 103 "cjson/cjson.c"
   $52 = ($51|0)<=(57); //@line 103 "cjson/cjson.c"
   if ($52) {
    $53 = $1; //@line 103 "cjson/cjson.c"
    $54 = (($53) + 1|0); //@line 103 "cjson/cjson.c"
    $1 = $54; //@line 103 "cjson/cjson.c"
    while(1) {
     $55 = $n; //@line 103 "cjson/cjson.c"
     $56 = $55 * 10.0; //@line 103 "cjson/cjson.c"
     $57 = $1; //@line 103 "cjson/cjson.c"
     $58 = (($57) + 1|0); //@line 103 "cjson/cjson.c"
     $1 = $58; //@line 103 "cjson/cjson.c"
     $59 = HEAP8[$57>>0]|0; //@line 103 "cjson/cjson.c"
     $60 = $59&255; //@line 103 "cjson/cjson.c"
     $61 = (($60) - 48)|0; //@line 103 "cjson/cjson.c"
     $62 = (+($61|0)); //@line 103 "cjson/cjson.c"
     $63 = $56 + $62; //@line 103 "cjson/cjson.c"
     $n = $63; //@line 103 "cjson/cjson.c"
     $64 = $scale; //@line 103 "cjson/cjson.c"
     $65 = $64 + -1.0; //@line 103 "cjson/cjson.c"
     $scale = $65; //@line 103 "cjson/cjson.c"
     $66 = $1; //@line 103 "cjson/cjson.c"
     $67 = HEAP8[$66>>0]|0; //@line 103 "cjson/cjson.c"
     $68 = $67&255; //@line 103 "cjson/cjson.c"
     $69 = ($68|0)>=(48); //@line 103 "cjson/cjson.c"
     if ($69) {
      $70 = $1; //@line 103 "cjson/cjson.c"
      $71 = HEAP8[$70>>0]|0; //@line 103 "cjson/cjson.c"
      $72 = $71&255; //@line 103 "cjson/cjson.c"
      $73 = ($72|0)<=(57); //@line 103 "cjson/cjson.c"
      $134 = $73;
     } else {
      $134 = 0;
     }
     if (!($134)) {
      break;
     }
    }
   }
  }
 }
 $74 = $1; //@line 104 "cjson/cjson.c"
 $75 = HEAP8[$74>>0]|0; //@line 104 "cjson/cjson.c"
 $76 = $75&255; //@line 104 "cjson/cjson.c"
 $77 = ($76|0)==(101); //@line 104 "cjson/cjson.c"
 if (!($77)) {
  $78 = $1; //@line 104 "cjson/cjson.c"
  $79 = HEAP8[$78>>0]|0; //@line 104 "cjson/cjson.c"
  $80 = $79&255; //@line 104 "cjson/cjson.c"
  $81 = ($80|0)==(69); //@line 104 "cjson/cjson.c"
  if (!($81)) {
   $112 = $sign; //@line 109 "cjson/cjson.c"
   $113 = $n; //@line 109 "cjson/cjson.c"
   $114 = $112 * $113; //@line 109 "cjson/cjson.c"
   $115 = $scale; //@line 109 "cjson/cjson.c"
   $116 = $subscale; //@line 109 "cjson/cjson.c"
   $117 = $signsubscale; //@line 109 "cjson/cjson.c"
   $118 = Math_imul($116, $117)|0; //@line 109 "cjson/cjson.c"
   $119 = (+($118|0)); //@line 109 "cjson/cjson.c"
   $120 = $115 + $119; //@line 109 "cjson/cjson.c"
   $121 = (+Math_pow(10.0,(+$120))); //@line 109 "cjson/cjson.c"
   $122 = $114 * $121; //@line 109 "cjson/cjson.c"
   $n = $122; //@line 109 "cjson/cjson.c"
   $123 = $n; //@line 111 "cjson/cjson.c"
   $124 = $0; //@line 111 "cjson/cjson.c"
   $125 = (($124) + 24|0); //@line 111 "cjson/cjson.c"
   HEAPF64[$125>>3] = $123; //@line 111 "cjson/cjson.c"
   $126 = $n; //@line 112 "cjson/cjson.c"
   $127 = (~~(($126))); //@line 112 "cjson/cjson.c"
   $128 = $0; //@line 112 "cjson/cjson.c"
   $129 = (($128) + 20|0); //@line 112 "cjson/cjson.c"
   HEAP32[$129>>2] = $127; //@line 112 "cjson/cjson.c"
   $130 = $0; //@line 113 "cjson/cjson.c"
   $131 = (($130) + 12|0); //@line 113 "cjson/cjson.c"
   HEAP32[$131>>2] = 3; //@line 113 "cjson/cjson.c"
   $132 = $1; //@line 114 "cjson/cjson.c"
   STACKTOP = sp;return ($132|0); //@line 114 "cjson/cjson.c"
  }
 }
 $82 = $1; //@line 105 "cjson/cjson.c"
 $83 = (($82) + 1|0); //@line 105 "cjson/cjson.c"
 $1 = $83; //@line 105 "cjson/cjson.c"
 $84 = $1; //@line 105 "cjson/cjson.c"
 $85 = HEAP8[$84>>0]|0; //@line 105 "cjson/cjson.c"
 $86 = $85&255; //@line 105 "cjson/cjson.c"
 $87 = ($86|0)==(43); //@line 105 "cjson/cjson.c"
 if ($87) {
  $88 = $1; //@line 105 "cjson/cjson.c"
  $89 = (($88) + 1|0); //@line 105 "cjson/cjson.c"
  $1 = $89; //@line 105 "cjson/cjson.c"
 } else {
  $90 = $1; //@line 105 "cjson/cjson.c"
  $91 = HEAP8[$90>>0]|0; //@line 105 "cjson/cjson.c"
  $92 = $91&255; //@line 105 "cjson/cjson.c"
  $93 = ($92|0)==(45); //@line 105 "cjson/cjson.c"
  if ($93) {
   $signsubscale = -1; //@line 105 "cjson/cjson.c"
   $94 = $1; //@line 105 "cjson/cjson.c"
   $95 = (($94) + 1|0); //@line 105 "cjson/cjson.c"
   $1 = $95; //@line 105 "cjson/cjson.c"
  }
 }
 while(1) {
  $96 = $1; //@line 106 "cjson/cjson.c"
  $97 = HEAP8[$96>>0]|0; //@line 106 "cjson/cjson.c"
  $98 = $97&255; //@line 106 "cjson/cjson.c"
  $99 = ($98|0)>=(48); //@line 106 "cjson/cjson.c"
  if ($99) {
   $100 = $1; //@line 106 "cjson/cjson.c"
   $101 = HEAP8[$100>>0]|0; //@line 106 "cjson/cjson.c"
   $102 = $101&255; //@line 106 "cjson/cjson.c"
   $103 = ($102|0)<=(57); //@line 106 "cjson/cjson.c"
   $135 = $103;
  } else {
   $135 = 0;
  }
  if (!($135)) {
   break;
  }
  $104 = $subscale; //@line 106 "cjson/cjson.c"
  $105 = ($104*10)|0; //@line 106 "cjson/cjson.c"
  $106 = $1; //@line 106 "cjson/cjson.c"
  $107 = (($106) + 1|0); //@line 106 "cjson/cjson.c"
  $1 = $107; //@line 106 "cjson/cjson.c"
  $108 = HEAP8[$106>>0]|0; //@line 106 "cjson/cjson.c"
  $109 = $108&255; //@line 106 "cjson/cjson.c"
  $110 = (($109) - 48)|0; //@line 106 "cjson/cjson.c"
  $111 = (($105) + ($110))|0; //@line 106 "cjson/cjson.c"
  $subscale = $111; //@line 106 "cjson/cjson.c"
 }
 $112 = $sign; //@line 109 "cjson/cjson.c"
 $113 = $n; //@line 109 "cjson/cjson.c"
 $114 = $112 * $113; //@line 109 "cjson/cjson.c"
 $115 = $scale; //@line 109 "cjson/cjson.c"
 $116 = $subscale; //@line 109 "cjson/cjson.c"
 $117 = $signsubscale; //@line 109 "cjson/cjson.c"
 $118 = Math_imul($116, $117)|0; //@line 109 "cjson/cjson.c"
 $119 = (+($118|0)); //@line 109 "cjson/cjson.c"
 $120 = $115 + $119; //@line 109 "cjson/cjson.c"
 $121 = (+Math_pow(10.0,(+$120))); //@line 109 "cjson/cjson.c"
 $122 = $114 * $121; //@line 109 "cjson/cjson.c"
 $n = $122; //@line 109 "cjson/cjson.c"
 $123 = $n; //@line 111 "cjson/cjson.c"
 $124 = $0; //@line 111 "cjson/cjson.c"
 $125 = (($124) + 24|0); //@line 111 "cjson/cjson.c"
 HEAPF64[$125>>3] = $123; //@line 111 "cjson/cjson.c"
 $126 = $n; //@line 112 "cjson/cjson.c"
 $127 = (~~(($126))); //@line 112 "cjson/cjson.c"
 $128 = $0; //@line 112 "cjson/cjson.c"
 $129 = (($128) + 20|0); //@line 112 "cjson/cjson.c"
 HEAP32[$129>>2] = $127; //@line 112 "cjson/cjson.c"
 $130 = $0; //@line 113 "cjson/cjson.c"
 $131 = (($130) + 12|0); //@line 113 "cjson/cjson.c"
 HEAP32[$131>>2] = 3; //@line 113 "cjson/cjson.c"
 $132 = $1; //@line 114 "cjson/cjson.c"
 STACKTOP = sp;return ($132|0); //@line 114 "cjson/cjson.c"
}
function _parse_array($item,$value) {
 $item = $item|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $child = 0, $new_item = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $item;
 $2 = $value;
 $3 = $2; //@line 323 "cjson/cjson.c"
 $4 = HEAP8[$3>>0]|0; //@line 323 "cjson/cjson.c"
 $5 = $4&255; //@line 323 "cjson/cjson.c"
 $6 = ($5|0)!=(91); //@line 323 "cjson/cjson.c"
 if ($6) {
  $7 = $2; //@line 323 "cjson/cjson.c"
  HEAP32[8>>2] = $7; //@line 323 "cjson/cjson.c"
  $0 = 0; //@line 323 "cjson/cjson.c"
  $60 = $0; //@line 345 "cjson/cjson.c"
  STACKTOP = sp;return ($60|0); //@line 345 "cjson/cjson.c"
 }
 $8 = $1; //@line 325 "cjson/cjson.c"
 $9 = (($8) + 12|0); //@line 325 "cjson/cjson.c"
 HEAP32[$9>>2] = 5; //@line 325 "cjson/cjson.c"
 $10 = $2; //@line 326 "cjson/cjson.c"
 $11 = (($10) + 1|0); //@line 326 "cjson/cjson.c"
 $12 = (_skip($11)|0); //@line 326 "cjson/cjson.c"
 $2 = $12; //@line 326 "cjson/cjson.c"
 $13 = $2; //@line 327 "cjson/cjson.c"
 $14 = HEAP8[$13>>0]|0; //@line 327 "cjson/cjson.c"
 $15 = $14&255; //@line 327 "cjson/cjson.c"
 $16 = ($15|0)==(93); //@line 327 "cjson/cjson.c"
 if ($16) {
  $17 = $2; //@line 327 "cjson/cjson.c"
  $18 = (($17) + 1|0); //@line 327 "cjson/cjson.c"
  $0 = $18; //@line 327 "cjson/cjson.c"
  $60 = $0; //@line 345 "cjson/cjson.c"
  STACKTOP = sp;return ($60|0); //@line 345 "cjson/cjson.c"
 }
 $19 = (_cJSON_New_Item()|0); //@line 329 "cjson/cjson.c"
 $child = $19; //@line 329 "cjson/cjson.c"
 $20 = $1; //@line 329 "cjson/cjson.c"
 $21 = (($20) + 8|0); //@line 329 "cjson/cjson.c"
 HEAP32[$21>>2] = $19; //@line 329 "cjson/cjson.c"
 $22 = $1; //@line 330 "cjson/cjson.c"
 $23 = (($22) + 8|0); //@line 330 "cjson/cjson.c"
 $24 = HEAP32[$23>>2]|0; //@line 330 "cjson/cjson.c"
 $25 = ($24|0)!=(0|0); //@line 330 "cjson/cjson.c"
 if (!($25)) {
  $0 = 0; //@line 330 "cjson/cjson.c"
  $60 = $0; //@line 345 "cjson/cjson.c"
  STACKTOP = sp;return ($60|0); //@line 345 "cjson/cjson.c"
 }
 $26 = $child; //@line 331 "cjson/cjson.c"
 $27 = $2; //@line 331 "cjson/cjson.c"
 $28 = (_skip($27)|0); //@line 331 "cjson/cjson.c"
 $29 = (_parse_value($26,$28)|0); //@line 331 "cjson/cjson.c"
 $30 = (_skip($29)|0); //@line 331 "cjson/cjson.c"
 $2 = $30; //@line 331 "cjson/cjson.c"
 $31 = $2; //@line 332 "cjson/cjson.c"
 $32 = ($31|0)!=(0|0); //@line 332 "cjson/cjson.c"
 if (!($32)) {
  $0 = 0; //@line 332 "cjson/cjson.c"
  $60 = $0; //@line 345 "cjson/cjson.c"
  STACKTOP = sp;return ($60|0); //@line 345 "cjson/cjson.c"
 }
 while(1) {
  $33 = $2; //@line 334 "cjson/cjson.c"
  $34 = HEAP8[$33>>0]|0; //@line 334 "cjson/cjson.c"
  $35 = $34&255; //@line 334 "cjson/cjson.c"
  $36 = ($35|0)==(44); //@line 334 "cjson/cjson.c"
  if (!($36)) {
   label = 16;
   break;
  }
  $37 = (_cJSON_New_Item()|0); //@line 337 "cjson/cjson.c"
  $new_item = $37; //@line 337 "cjson/cjson.c"
  $38 = ($37|0)!=(0|0); //@line 337 "cjson/cjson.c"
  if (!($38)) {
   label = 12;
   break;
  }
  $39 = $new_item; //@line 338 "cjson/cjson.c"
  $40 = $child; //@line 338 "cjson/cjson.c"
  HEAP32[$40>>2] = $39; //@line 338 "cjson/cjson.c"
  $41 = $child; //@line 338 "cjson/cjson.c"
  $42 = $new_item; //@line 338 "cjson/cjson.c"
  $43 = (($42) + 4|0); //@line 338 "cjson/cjson.c"
  HEAP32[$43>>2] = $41; //@line 338 "cjson/cjson.c"
  $44 = $new_item; //@line 338 "cjson/cjson.c"
  $child = $44; //@line 338 "cjson/cjson.c"
  $45 = $child; //@line 339 "cjson/cjson.c"
  $46 = $2; //@line 339 "cjson/cjson.c"
  $47 = (($46) + 1|0); //@line 339 "cjson/cjson.c"
  $48 = (_skip($47)|0); //@line 339 "cjson/cjson.c"
  $49 = (_parse_value($45,$48)|0); //@line 339 "cjson/cjson.c"
  $50 = (_skip($49)|0); //@line 339 "cjson/cjson.c"
  $2 = $50; //@line 339 "cjson/cjson.c"
  $51 = $2; //@line 340 "cjson/cjson.c"
  $52 = ($51|0)!=(0|0); //@line 340 "cjson/cjson.c"
  if (!($52)) {
   label = 14;
   break;
  }
 }
 if ((label|0) == 12) {
  $0 = 0; //@line 337 "cjson/cjson.c"
  $60 = $0; //@line 345 "cjson/cjson.c"
  STACKTOP = sp;return ($60|0); //@line 345 "cjson/cjson.c"
 }
 else if ((label|0) == 14) {
  $0 = 0; //@line 340 "cjson/cjson.c"
  $60 = $0; //@line 345 "cjson/cjson.c"
  STACKTOP = sp;return ($60|0); //@line 345 "cjson/cjson.c"
 }
 else if ((label|0) == 16) {
  $53 = $2; //@line 343 "cjson/cjson.c"
  $54 = HEAP8[$53>>0]|0; //@line 343 "cjson/cjson.c"
  $55 = $54&255; //@line 343 "cjson/cjson.c"
  $56 = ($55|0)==(93); //@line 343 "cjson/cjson.c"
  if ($56) {
   $57 = $2; //@line 343 "cjson/cjson.c"
   $58 = (($57) + 1|0); //@line 343 "cjson/cjson.c"
   $0 = $58; //@line 343 "cjson/cjson.c"
   $60 = $0; //@line 345 "cjson/cjson.c"
   STACKTOP = sp;return ($60|0); //@line 345 "cjson/cjson.c"
  } else {
   $59 = $2; //@line 344 "cjson/cjson.c"
   HEAP32[8>>2] = $59; //@line 344 "cjson/cjson.c"
   $0 = 0; //@line 344 "cjson/cjson.c"
   $60 = $0; //@line 345 "cjson/cjson.c"
   STACKTOP = sp;return ($60|0); //@line 345 "cjson/cjson.c"
  }
 }
 return 0|0;
}
function _parse_object($item,$value) {
 $item = $item|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $child = 0, $new_item = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $item;
 $2 = $value;
 $3 = $2; //@line 409 "cjson/cjson.c"
 $4 = HEAP8[$3>>0]|0; //@line 409 "cjson/cjson.c"
 $5 = $4&255; //@line 409 "cjson/cjson.c"
 $6 = ($5|0)!=(123); //@line 409 "cjson/cjson.c"
 if ($6) {
  $7 = $2; //@line 409 "cjson/cjson.c"
  HEAP32[8>>2] = $7; //@line 409 "cjson/cjson.c"
  $0 = 0; //@line 409 "cjson/cjson.c"
  $100 = $0; //@line 439 "cjson/cjson.c"
  STACKTOP = sp;return ($100|0); //@line 439 "cjson/cjson.c"
 }
 $8 = $1; //@line 411 "cjson/cjson.c"
 $9 = (($8) + 12|0); //@line 411 "cjson/cjson.c"
 HEAP32[$9>>2] = 6; //@line 411 "cjson/cjson.c"
 $10 = $2; //@line 412 "cjson/cjson.c"
 $11 = (($10) + 1|0); //@line 412 "cjson/cjson.c"
 $12 = (_skip($11)|0); //@line 412 "cjson/cjson.c"
 $2 = $12; //@line 412 "cjson/cjson.c"
 $13 = $2; //@line 413 "cjson/cjson.c"
 $14 = HEAP8[$13>>0]|0; //@line 413 "cjson/cjson.c"
 $15 = $14&255; //@line 413 "cjson/cjson.c"
 $16 = ($15|0)==(125); //@line 413 "cjson/cjson.c"
 if ($16) {
  $17 = $2; //@line 413 "cjson/cjson.c"
  $18 = (($17) + 1|0); //@line 413 "cjson/cjson.c"
  $0 = $18; //@line 413 "cjson/cjson.c"
  $100 = $0; //@line 439 "cjson/cjson.c"
  STACKTOP = sp;return ($100|0); //@line 439 "cjson/cjson.c"
 }
 $19 = (_cJSON_New_Item()|0); //@line 415 "cjson/cjson.c"
 $child = $19; //@line 415 "cjson/cjson.c"
 $20 = $1; //@line 415 "cjson/cjson.c"
 $21 = (($20) + 8|0); //@line 415 "cjson/cjson.c"
 HEAP32[$21>>2] = $19; //@line 415 "cjson/cjson.c"
 $22 = $1; //@line 416 "cjson/cjson.c"
 $23 = (($22) + 8|0); //@line 416 "cjson/cjson.c"
 $24 = HEAP32[$23>>2]|0; //@line 416 "cjson/cjson.c"
 $25 = ($24|0)!=(0|0); //@line 416 "cjson/cjson.c"
 if (!($25)) {
  $0 = 0; //@line 416 "cjson/cjson.c"
  $100 = $0; //@line 439 "cjson/cjson.c"
  STACKTOP = sp;return ($100|0); //@line 439 "cjson/cjson.c"
 }
 $26 = $child; //@line 417 "cjson/cjson.c"
 $27 = $2; //@line 417 "cjson/cjson.c"
 $28 = (_skip($27)|0); //@line 417 "cjson/cjson.c"
 $29 = (_parse_string($26,$28)|0); //@line 417 "cjson/cjson.c"
 $30 = (_skip($29)|0); //@line 417 "cjson/cjson.c"
 $2 = $30; //@line 417 "cjson/cjson.c"
 $31 = $2; //@line 418 "cjson/cjson.c"
 $32 = ($31|0)!=(0|0); //@line 418 "cjson/cjson.c"
 if (!($32)) {
  $0 = 0; //@line 418 "cjson/cjson.c"
  $100 = $0; //@line 439 "cjson/cjson.c"
  STACKTOP = sp;return ($100|0); //@line 439 "cjson/cjson.c"
 }
 $33 = $child; //@line 419 "cjson/cjson.c"
 $34 = (($33) + 16|0); //@line 419 "cjson/cjson.c"
 $35 = HEAP32[$34>>2]|0; //@line 419 "cjson/cjson.c"
 $36 = $child; //@line 419 "cjson/cjson.c"
 $37 = (($36) + 32|0); //@line 419 "cjson/cjson.c"
 HEAP32[$37>>2] = $35; //@line 419 "cjson/cjson.c"
 $38 = $child; //@line 419 "cjson/cjson.c"
 $39 = (($38) + 16|0); //@line 419 "cjson/cjson.c"
 HEAP32[$39>>2] = 0; //@line 419 "cjson/cjson.c"
 $40 = $2; //@line 420 "cjson/cjson.c"
 $41 = HEAP8[$40>>0]|0; //@line 420 "cjson/cjson.c"
 $42 = $41&255; //@line 420 "cjson/cjson.c"
 $43 = ($42|0)!=(58); //@line 420 "cjson/cjson.c"
 if ($43) {
  $44 = $2; //@line 420 "cjson/cjson.c"
  HEAP32[8>>2] = $44; //@line 420 "cjson/cjson.c"
  $0 = 0; //@line 420 "cjson/cjson.c"
  $100 = $0; //@line 439 "cjson/cjson.c"
  STACKTOP = sp;return ($100|0); //@line 439 "cjson/cjson.c"
 }
 $45 = $child; //@line 421 "cjson/cjson.c"
 $46 = $2; //@line 421 "cjson/cjson.c"
 $47 = (($46) + 1|0); //@line 421 "cjson/cjson.c"
 $48 = (_skip($47)|0); //@line 421 "cjson/cjson.c"
 $49 = (_parse_value($45,$48)|0); //@line 421 "cjson/cjson.c"
 $50 = (_skip($49)|0); //@line 421 "cjson/cjson.c"
 $2 = $50; //@line 421 "cjson/cjson.c"
 $51 = $2; //@line 422 "cjson/cjson.c"
 $52 = ($51|0)!=(0|0); //@line 422 "cjson/cjson.c"
 if (!($52)) {
  $0 = 0; //@line 422 "cjson/cjson.c"
  $100 = $0; //@line 439 "cjson/cjson.c"
  STACKTOP = sp;return ($100|0); //@line 439 "cjson/cjson.c"
 }
 while(1) {
  $53 = $2; //@line 424 "cjson/cjson.c"
  $54 = HEAP8[$53>>0]|0; //@line 424 "cjson/cjson.c"
  $55 = $54&255; //@line 424 "cjson/cjson.c"
  $56 = ($55|0)==(44); //@line 424 "cjson/cjson.c"
  if (!($56)) {
   label = 24;
   break;
  }
  $57 = (_cJSON_New_Item()|0); //@line 427 "cjson/cjson.c"
  $new_item = $57; //@line 427 "cjson/cjson.c"
  $58 = ($57|0)!=(0|0); //@line 427 "cjson/cjson.c"
  if (!($58)) {
   label = 16;
   break;
  }
  $59 = $new_item; //@line 428 "cjson/cjson.c"
  $60 = $child; //@line 428 "cjson/cjson.c"
  HEAP32[$60>>2] = $59; //@line 428 "cjson/cjson.c"
  $61 = $child; //@line 428 "cjson/cjson.c"
  $62 = $new_item; //@line 428 "cjson/cjson.c"
  $63 = (($62) + 4|0); //@line 428 "cjson/cjson.c"
  HEAP32[$63>>2] = $61; //@line 428 "cjson/cjson.c"
  $64 = $new_item; //@line 428 "cjson/cjson.c"
  $child = $64; //@line 428 "cjson/cjson.c"
  $65 = $child; //@line 429 "cjson/cjson.c"
  $66 = $2; //@line 429 "cjson/cjson.c"
  $67 = (($66) + 1|0); //@line 429 "cjson/cjson.c"
  $68 = (_skip($67)|0); //@line 429 "cjson/cjson.c"
  $69 = (_parse_string($65,$68)|0); //@line 429 "cjson/cjson.c"
  $70 = (_skip($69)|0); //@line 429 "cjson/cjson.c"
  $2 = $70; //@line 429 "cjson/cjson.c"
  $71 = $2; //@line 430 "cjson/cjson.c"
  $72 = ($71|0)!=(0|0); //@line 430 "cjson/cjson.c"
  if (!($72)) {
   label = 18;
   break;
  }
  $73 = $child; //@line 431 "cjson/cjson.c"
  $74 = (($73) + 16|0); //@line 431 "cjson/cjson.c"
  $75 = HEAP32[$74>>2]|0; //@line 431 "cjson/cjson.c"
  $76 = $child; //@line 431 "cjson/cjson.c"
  $77 = (($76) + 32|0); //@line 431 "cjson/cjson.c"
  HEAP32[$77>>2] = $75; //@line 431 "cjson/cjson.c"
  $78 = $child; //@line 431 "cjson/cjson.c"
  $79 = (($78) + 16|0); //@line 431 "cjson/cjson.c"
  HEAP32[$79>>2] = 0; //@line 431 "cjson/cjson.c"
  $80 = $2; //@line 432 "cjson/cjson.c"
  $81 = HEAP8[$80>>0]|0; //@line 432 "cjson/cjson.c"
  $82 = $81&255; //@line 432 "cjson/cjson.c"
  $83 = ($82|0)!=(58); //@line 432 "cjson/cjson.c"
  if ($83) {
   label = 20;
   break;
  }
  $85 = $child; //@line 433 "cjson/cjson.c"
  $86 = $2; //@line 433 "cjson/cjson.c"
  $87 = (($86) + 1|0); //@line 433 "cjson/cjson.c"
  $88 = (_skip($87)|0); //@line 433 "cjson/cjson.c"
  $89 = (_parse_value($85,$88)|0); //@line 433 "cjson/cjson.c"
  $90 = (_skip($89)|0); //@line 433 "cjson/cjson.c"
  $2 = $90; //@line 433 "cjson/cjson.c"
  $91 = $2; //@line 434 "cjson/cjson.c"
  $92 = ($91|0)!=(0|0); //@line 434 "cjson/cjson.c"
  if (!($92)) {
   label = 22;
   break;
  }
 }
 if ((label|0) == 16) {
  $0 = 0; //@line 427 "cjson/cjson.c"
  $100 = $0; //@line 439 "cjson/cjson.c"
  STACKTOP = sp;return ($100|0); //@line 439 "cjson/cjson.c"
 }
 else if ((label|0) == 18) {
  $0 = 0; //@line 430 "cjson/cjson.c"
  $100 = $0; //@line 439 "cjson/cjson.c"
  STACKTOP = sp;return ($100|0); //@line 439 "cjson/cjson.c"
 }
 else if ((label|0) == 20) {
  $84 = $2; //@line 432 "cjson/cjson.c"
  HEAP32[8>>2] = $84; //@line 432 "cjson/cjson.c"
  $0 = 0; //@line 432 "cjson/cjson.c"
  $100 = $0; //@line 439 "cjson/cjson.c"
  STACKTOP = sp;return ($100|0); //@line 439 "cjson/cjson.c"
 }
 else if ((label|0) == 22) {
  $0 = 0; //@line 434 "cjson/cjson.c"
  $100 = $0; //@line 439 "cjson/cjson.c"
  STACKTOP = sp;return ($100|0); //@line 439 "cjson/cjson.c"
 }
 else if ((label|0) == 24) {
  $93 = $2; //@line 437 "cjson/cjson.c"
  $94 = HEAP8[$93>>0]|0; //@line 437 "cjson/cjson.c"
  $95 = $94&255; //@line 437 "cjson/cjson.c"
  $96 = ($95|0)==(125); //@line 437 "cjson/cjson.c"
  if ($96) {
   $97 = $2; //@line 437 "cjson/cjson.c"
   $98 = (($97) + 1|0); //@line 437 "cjson/cjson.c"
   $0 = $98; //@line 437 "cjson/cjson.c"
   $100 = $0; //@line 439 "cjson/cjson.c"
   STACKTOP = sp;return ($100|0); //@line 439 "cjson/cjson.c"
  } else {
   $99 = $2; //@line 438 "cjson/cjson.c"
   HEAP32[8>>2] = $99; //@line 438 "cjson/cjson.c"
   $0 = 0; //@line 438 "cjson/cjson.c"
   $100 = $0; //@line 439 "cjson/cjson.c"
   STACKTOP = sp;return ($100|0); //@line 439 "cjson/cjson.c"
  }
 }
 return 0|0;
}
function _parse_hex4($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $h = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $str;
 $h = 0; //@line 142 "cjson/cjson.c"
 $2 = $1; //@line 143 "cjson/cjson.c"
 $3 = HEAP8[$2>>0]|0; //@line 143 "cjson/cjson.c"
 $4 = $3&255; //@line 143 "cjson/cjson.c"
 $5 = ($4|0)>=(48); //@line 143 "cjson/cjson.c"
 if ($5) {
  $6 = $1; //@line 143 "cjson/cjson.c"
  $7 = HEAP8[$6>>0]|0; //@line 143 "cjson/cjson.c"
  $8 = $7&255; //@line 143 "cjson/cjson.c"
  $9 = ($8|0)<=(57); //@line 143 "cjson/cjson.c"
  if ($9) {
   $10 = $1; //@line 143 "cjson/cjson.c"
   $11 = HEAP8[$10>>0]|0; //@line 143 "cjson/cjson.c"
   $12 = $11&255; //@line 143 "cjson/cjson.c"
   $13 = (($12) - 48)|0; //@line 143 "cjson/cjson.c"
   $14 = $h; //@line 143 "cjson/cjson.c"
   $15 = (($14) + ($13))|0; //@line 143 "cjson/cjson.c"
   $h = $15; //@line 143 "cjson/cjson.c"
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $16 = $1; //@line 143 "cjson/cjson.c"
  $17 = HEAP8[$16>>0]|0; //@line 143 "cjson/cjson.c"
  $18 = $17&255; //@line 143 "cjson/cjson.c"
  $19 = ($18|0)>=(65); //@line 143 "cjson/cjson.c"
  if ($19) {
   $20 = $1; //@line 143 "cjson/cjson.c"
   $21 = HEAP8[$20>>0]|0; //@line 143 "cjson/cjson.c"
   $22 = $21&255; //@line 143 "cjson/cjson.c"
   $23 = ($22|0)<=(70); //@line 143 "cjson/cjson.c"
   if ($23) {
    $24 = $1; //@line 143 "cjson/cjson.c"
    $25 = HEAP8[$24>>0]|0; //@line 143 "cjson/cjson.c"
    $26 = $25&255; //@line 143 "cjson/cjson.c"
    $27 = (10 + ($26))|0; //@line 143 "cjson/cjson.c"
    $28 = (($27) - 65)|0; //@line 143 "cjson/cjson.c"
    $29 = $h; //@line 143 "cjson/cjson.c"
    $30 = (($29) + ($28))|0; //@line 143 "cjson/cjson.c"
    $h = $30; //@line 143 "cjson/cjson.c"
   } else {
    label = 7;
   }
  } else {
   label = 7;
  }
  do {
   if ((label|0) == 7) {
    $31 = $1; //@line 143 "cjson/cjson.c"
    $32 = HEAP8[$31>>0]|0; //@line 143 "cjson/cjson.c"
    $33 = $32&255; //@line 143 "cjson/cjson.c"
    $34 = ($33|0)>=(97); //@line 143 "cjson/cjson.c"
    if ($34) {
     $35 = $1; //@line 143 "cjson/cjson.c"
     $36 = HEAP8[$35>>0]|0; //@line 143 "cjson/cjson.c"
     $37 = $36&255; //@line 143 "cjson/cjson.c"
     $38 = ($37|0)<=(102); //@line 143 "cjson/cjson.c"
     if ($38) {
      $39 = $1; //@line 143 "cjson/cjson.c"
      $40 = HEAP8[$39>>0]|0; //@line 143 "cjson/cjson.c"
      $41 = $40&255; //@line 143 "cjson/cjson.c"
      $42 = (10 + ($41))|0; //@line 143 "cjson/cjson.c"
      $43 = (($42) - 97)|0; //@line 143 "cjson/cjson.c"
      $44 = $h; //@line 143 "cjson/cjson.c"
      $45 = (($44) + ($43))|0; //@line 143 "cjson/cjson.c"
      $h = $45; //@line 143 "cjson/cjson.c"
      break;
     }
    }
    $0 = 0; //@line 143 "cjson/cjson.c"
    $191 = $0; //@line 151 "cjson/cjson.c"
    STACKTOP = sp;return ($191|0); //@line 151 "cjson/cjson.c"
   }
  } while(0);
 }
 $46 = $h; //@line 144 "cjson/cjson.c"
 $47 = $46 << 4; //@line 144 "cjson/cjson.c"
 $h = $47; //@line 144 "cjson/cjson.c"
 $48 = $1; //@line 144 "cjson/cjson.c"
 $49 = (($48) + 1|0); //@line 144 "cjson/cjson.c"
 $1 = $49; //@line 144 "cjson/cjson.c"
 $50 = $1; //@line 145 "cjson/cjson.c"
 $51 = HEAP8[$50>>0]|0; //@line 145 "cjson/cjson.c"
 $52 = $51&255; //@line 145 "cjson/cjson.c"
 $53 = ($52|0)>=(48); //@line 145 "cjson/cjson.c"
 if ($53) {
  $54 = $1; //@line 145 "cjson/cjson.c"
  $55 = HEAP8[$54>>0]|0; //@line 145 "cjson/cjson.c"
  $56 = $55&255; //@line 145 "cjson/cjson.c"
  $57 = ($56|0)<=(57); //@line 145 "cjson/cjson.c"
  if ($57) {
   $58 = $1; //@line 145 "cjson/cjson.c"
   $59 = HEAP8[$58>>0]|0; //@line 145 "cjson/cjson.c"
   $60 = $59&255; //@line 145 "cjson/cjson.c"
   $61 = (($60) - 48)|0; //@line 145 "cjson/cjson.c"
   $62 = $h; //@line 145 "cjson/cjson.c"
   $63 = (($62) + ($61))|0; //@line 145 "cjson/cjson.c"
   $h = $63; //@line 145 "cjson/cjson.c"
  } else {
   label = 16;
  }
 } else {
  label = 16;
 }
 if ((label|0) == 16) {
  $64 = $1; //@line 145 "cjson/cjson.c"
  $65 = HEAP8[$64>>0]|0; //@line 145 "cjson/cjson.c"
  $66 = $65&255; //@line 145 "cjson/cjson.c"
  $67 = ($66|0)>=(65); //@line 145 "cjson/cjson.c"
  if ($67) {
   $68 = $1; //@line 145 "cjson/cjson.c"
   $69 = HEAP8[$68>>0]|0; //@line 145 "cjson/cjson.c"
   $70 = $69&255; //@line 145 "cjson/cjson.c"
   $71 = ($70|0)<=(70); //@line 145 "cjson/cjson.c"
   if ($71) {
    $72 = $1; //@line 145 "cjson/cjson.c"
    $73 = HEAP8[$72>>0]|0; //@line 145 "cjson/cjson.c"
    $74 = $73&255; //@line 145 "cjson/cjson.c"
    $75 = (10 + ($74))|0; //@line 145 "cjson/cjson.c"
    $76 = (($75) - 65)|0; //@line 145 "cjson/cjson.c"
    $77 = $h; //@line 145 "cjson/cjson.c"
    $78 = (($77) + ($76))|0; //@line 145 "cjson/cjson.c"
    $h = $78; //@line 145 "cjson/cjson.c"
   } else {
    label = 19;
   }
  } else {
   label = 19;
  }
  do {
   if ((label|0) == 19) {
    $79 = $1; //@line 145 "cjson/cjson.c"
    $80 = HEAP8[$79>>0]|0; //@line 145 "cjson/cjson.c"
    $81 = $80&255; //@line 145 "cjson/cjson.c"
    $82 = ($81|0)>=(97); //@line 145 "cjson/cjson.c"
    if ($82) {
     $83 = $1; //@line 145 "cjson/cjson.c"
     $84 = HEAP8[$83>>0]|0; //@line 145 "cjson/cjson.c"
     $85 = $84&255; //@line 145 "cjson/cjson.c"
     $86 = ($85|0)<=(102); //@line 145 "cjson/cjson.c"
     if ($86) {
      $87 = $1; //@line 145 "cjson/cjson.c"
      $88 = HEAP8[$87>>0]|0; //@line 145 "cjson/cjson.c"
      $89 = $88&255; //@line 145 "cjson/cjson.c"
      $90 = (10 + ($89))|0; //@line 145 "cjson/cjson.c"
      $91 = (($90) - 97)|0; //@line 145 "cjson/cjson.c"
      $92 = $h; //@line 145 "cjson/cjson.c"
      $93 = (($92) + ($91))|0; //@line 145 "cjson/cjson.c"
      $h = $93; //@line 145 "cjson/cjson.c"
      break;
     }
    }
    $0 = 0; //@line 145 "cjson/cjson.c"
    $191 = $0; //@line 151 "cjson/cjson.c"
    STACKTOP = sp;return ($191|0); //@line 151 "cjson/cjson.c"
   }
  } while(0);
 }
 $94 = $h; //@line 146 "cjson/cjson.c"
 $95 = $94 << 4; //@line 146 "cjson/cjson.c"
 $h = $95; //@line 146 "cjson/cjson.c"
 $96 = $1; //@line 146 "cjson/cjson.c"
 $97 = (($96) + 1|0); //@line 146 "cjson/cjson.c"
 $1 = $97; //@line 146 "cjson/cjson.c"
 $98 = $1; //@line 147 "cjson/cjson.c"
 $99 = HEAP8[$98>>0]|0; //@line 147 "cjson/cjson.c"
 $100 = $99&255; //@line 147 "cjson/cjson.c"
 $101 = ($100|0)>=(48); //@line 147 "cjson/cjson.c"
 if ($101) {
  $102 = $1; //@line 147 "cjson/cjson.c"
  $103 = HEAP8[$102>>0]|0; //@line 147 "cjson/cjson.c"
  $104 = $103&255; //@line 147 "cjson/cjson.c"
  $105 = ($104|0)<=(57); //@line 147 "cjson/cjson.c"
  if ($105) {
   $106 = $1; //@line 147 "cjson/cjson.c"
   $107 = HEAP8[$106>>0]|0; //@line 147 "cjson/cjson.c"
   $108 = $107&255; //@line 147 "cjson/cjson.c"
   $109 = (($108) - 48)|0; //@line 147 "cjson/cjson.c"
   $110 = $h; //@line 147 "cjson/cjson.c"
   $111 = (($110) + ($109))|0; //@line 147 "cjson/cjson.c"
   $h = $111; //@line 147 "cjson/cjson.c"
  } else {
   label = 28;
  }
 } else {
  label = 28;
 }
 if ((label|0) == 28) {
  $112 = $1; //@line 147 "cjson/cjson.c"
  $113 = HEAP8[$112>>0]|0; //@line 147 "cjson/cjson.c"
  $114 = $113&255; //@line 147 "cjson/cjson.c"
  $115 = ($114|0)>=(65); //@line 147 "cjson/cjson.c"
  if ($115) {
   $116 = $1; //@line 147 "cjson/cjson.c"
   $117 = HEAP8[$116>>0]|0; //@line 147 "cjson/cjson.c"
   $118 = $117&255; //@line 147 "cjson/cjson.c"
   $119 = ($118|0)<=(70); //@line 147 "cjson/cjson.c"
   if ($119) {
    $120 = $1; //@line 147 "cjson/cjson.c"
    $121 = HEAP8[$120>>0]|0; //@line 147 "cjson/cjson.c"
    $122 = $121&255; //@line 147 "cjson/cjson.c"
    $123 = (10 + ($122))|0; //@line 147 "cjson/cjson.c"
    $124 = (($123) - 65)|0; //@line 147 "cjson/cjson.c"
    $125 = $h; //@line 147 "cjson/cjson.c"
    $126 = (($125) + ($124))|0; //@line 147 "cjson/cjson.c"
    $h = $126; //@line 147 "cjson/cjson.c"
   } else {
    label = 31;
   }
  } else {
   label = 31;
  }
  do {
   if ((label|0) == 31) {
    $127 = $1; //@line 147 "cjson/cjson.c"
    $128 = HEAP8[$127>>0]|0; //@line 147 "cjson/cjson.c"
    $129 = $128&255; //@line 147 "cjson/cjson.c"
    $130 = ($129|0)>=(97); //@line 147 "cjson/cjson.c"
    if ($130) {
     $131 = $1; //@line 147 "cjson/cjson.c"
     $132 = HEAP8[$131>>0]|0; //@line 147 "cjson/cjson.c"
     $133 = $132&255; //@line 147 "cjson/cjson.c"
     $134 = ($133|0)<=(102); //@line 147 "cjson/cjson.c"
     if ($134) {
      $135 = $1; //@line 147 "cjson/cjson.c"
      $136 = HEAP8[$135>>0]|0; //@line 147 "cjson/cjson.c"
      $137 = $136&255; //@line 147 "cjson/cjson.c"
      $138 = (10 + ($137))|0; //@line 147 "cjson/cjson.c"
      $139 = (($138) - 97)|0; //@line 147 "cjson/cjson.c"
      $140 = $h; //@line 147 "cjson/cjson.c"
      $141 = (($140) + ($139))|0; //@line 147 "cjson/cjson.c"
      $h = $141; //@line 147 "cjson/cjson.c"
      break;
     }
    }
    $0 = 0; //@line 147 "cjson/cjson.c"
    $191 = $0; //@line 151 "cjson/cjson.c"
    STACKTOP = sp;return ($191|0); //@line 151 "cjson/cjson.c"
   }
  } while(0);
 }
 $142 = $h; //@line 148 "cjson/cjson.c"
 $143 = $142 << 4; //@line 148 "cjson/cjson.c"
 $h = $143; //@line 148 "cjson/cjson.c"
 $144 = $1; //@line 148 "cjson/cjson.c"
 $145 = (($144) + 1|0); //@line 148 "cjson/cjson.c"
 $1 = $145; //@line 148 "cjson/cjson.c"
 $146 = $1; //@line 149 "cjson/cjson.c"
 $147 = HEAP8[$146>>0]|0; //@line 149 "cjson/cjson.c"
 $148 = $147&255; //@line 149 "cjson/cjson.c"
 $149 = ($148|0)>=(48); //@line 149 "cjson/cjson.c"
 if ($149) {
  $150 = $1; //@line 149 "cjson/cjson.c"
  $151 = HEAP8[$150>>0]|0; //@line 149 "cjson/cjson.c"
  $152 = $151&255; //@line 149 "cjson/cjson.c"
  $153 = ($152|0)<=(57); //@line 149 "cjson/cjson.c"
  if ($153) {
   $154 = $1; //@line 149 "cjson/cjson.c"
   $155 = HEAP8[$154>>0]|0; //@line 149 "cjson/cjson.c"
   $156 = $155&255; //@line 149 "cjson/cjson.c"
   $157 = (($156) - 48)|0; //@line 149 "cjson/cjson.c"
   $158 = $h; //@line 149 "cjson/cjson.c"
   $159 = (($158) + ($157))|0; //@line 149 "cjson/cjson.c"
   $h = $159; //@line 149 "cjson/cjson.c"
  } else {
   label = 40;
  }
 } else {
  label = 40;
 }
 if ((label|0) == 40) {
  $160 = $1; //@line 149 "cjson/cjson.c"
  $161 = HEAP8[$160>>0]|0; //@line 149 "cjson/cjson.c"
  $162 = $161&255; //@line 149 "cjson/cjson.c"
  $163 = ($162|0)>=(65); //@line 149 "cjson/cjson.c"
  if ($163) {
   $164 = $1; //@line 149 "cjson/cjson.c"
   $165 = HEAP8[$164>>0]|0; //@line 149 "cjson/cjson.c"
   $166 = $165&255; //@line 149 "cjson/cjson.c"
   $167 = ($166|0)<=(70); //@line 149 "cjson/cjson.c"
   if ($167) {
    $168 = $1; //@line 149 "cjson/cjson.c"
    $169 = HEAP8[$168>>0]|0; //@line 149 "cjson/cjson.c"
    $170 = $169&255; //@line 149 "cjson/cjson.c"
    $171 = (10 + ($170))|0; //@line 149 "cjson/cjson.c"
    $172 = (($171) - 65)|0; //@line 149 "cjson/cjson.c"
    $173 = $h; //@line 149 "cjson/cjson.c"
    $174 = (($173) + ($172))|0; //@line 149 "cjson/cjson.c"
    $h = $174; //@line 149 "cjson/cjson.c"
   } else {
    label = 43;
   }
  } else {
   label = 43;
  }
  do {
   if ((label|0) == 43) {
    $175 = $1; //@line 149 "cjson/cjson.c"
    $176 = HEAP8[$175>>0]|0; //@line 149 "cjson/cjson.c"
    $177 = $176&255; //@line 149 "cjson/cjson.c"
    $178 = ($177|0)>=(97); //@line 149 "cjson/cjson.c"
    if ($178) {
     $179 = $1; //@line 149 "cjson/cjson.c"
     $180 = HEAP8[$179>>0]|0; //@line 149 "cjson/cjson.c"
     $181 = $180&255; //@line 149 "cjson/cjson.c"
     $182 = ($181|0)<=(102); //@line 149 "cjson/cjson.c"
     if ($182) {
      $183 = $1; //@line 149 "cjson/cjson.c"
      $184 = HEAP8[$183>>0]|0; //@line 149 "cjson/cjson.c"
      $185 = $184&255; //@line 149 "cjson/cjson.c"
      $186 = (10 + ($185))|0; //@line 149 "cjson/cjson.c"
      $187 = (($186) - 97)|0; //@line 149 "cjson/cjson.c"
      $188 = $h; //@line 149 "cjson/cjson.c"
      $189 = (($188) + ($187))|0; //@line 149 "cjson/cjson.c"
      $h = $189; //@line 149 "cjson/cjson.c"
      break;
     }
    }
    $0 = 0; //@line 149 "cjson/cjson.c"
    $191 = $0; //@line 151 "cjson/cjson.c"
    STACKTOP = sp;return ($191|0); //@line 151 "cjson/cjson.c"
   }
  } while(0);
 }
 $190 = $h; //@line 150 "cjson/cjson.c"
 $0 = $190; //@line 150 "cjson/cjson.c"
 $191 = $0; //@line 151 "cjson/cjson.c"
 STACKTOP = sp;return ($191|0); //@line 151 "cjson/cjson.c"
}
function _ot_new_client($send,$event,$id) {
 $send = $send|0;
 $event = $event|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $client = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $send;
 $1 = $event;
 $2 = $id;
 $3 = (_malloc(36)|0); //@line 148 "client.c"
 $client = $3; //@line 148 "client.c"
 $4 = $client; //@line 149 "client.c"
 $5 = (($4) + 28|0); //@line 149 "client.c"
 HEAP32[$5>>2] = 0; //@line 149 "client.c"
 $6 = $client; //@line 150 "client.c"
 $7 = (($6) + 20|0); //@line 150 "client.c"
 HEAP32[$7>>2] = 0; //@line 150 "client.c"
 $8 = $0; //@line 151 "client.c"
 $9 = $client; //@line 151 "client.c"
 HEAP32[$9>>2] = $8; //@line 151 "client.c"
 $10 = $1; //@line 152 "client.c"
 $11 = $client; //@line 152 "client.c"
 $12 = (($11) + 4|0); //@line 152 "client.c"
 HEAP32[$12>>2] = $10; //@line 152 "client.c"
 $13 = $client; //@line 153 "client.c"
 $14 = (($13) + 8|0); //@line 153 "client.c"
 HEAP32[$14>>2] = 0; //@line 153 "client.c"
 $15 = $2; //@line 154 "client.c"
 $16 = $client; //@line 154 "client.c"
 $17 = (($16) + 12|0); //@line 154 "client.c"
 HEAP32[$17>>2] = $15; //@line 154 "client.c"
 $18 = $client; //@line 155 "client.c"
 $19 = (($18) + 16|0); //@line 155 "client.c"
 HEAP8[$19>>0] = 0; //@line 155 "client.c"
 $20 = $client; //@line 156 "client.c"
 $21 = (($20) + 24|0); //@line 156 "client.c"
 HEAP8[$21>>0] = 0; //@line 156 "client.c"
 $22 = $client; //@line 157 "client.c"
 $23 = (($22) + 32|0); //@line 157 "client.c"
 HEAP8[$23>>0] = 0; //@line 157 "client.c"
 $24 = $client; //@line 159 "client.c"
 STACKTOP = sp;return ($24|0); //@line 159 "client.c"
}
function _free_anticipated($client) {
 $client = $client|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $client;
 $1 = $0; //@line 4 "client.c"
 $2 = (($1) + 20|0); //@line 4 "client.c"
 $3 = HEAP32[$2>>2]|0; //@line 4 "client.c"
 $4 = ($3|0)==(0|0); //@line 4 "client.c"
 if ($4) {
  STACKTOP = sp;return; //@line 15 "client.c"
 }
 $5 = $0; //@line 8 "client.c"
 $6 = (($5) + 24|0); //@line 8 "client.c"
 $7 = HEAP8[$6>>0]|0; //@line 8 "client.c"
 $8 = $7&1; //@line 8 "client.c"
 if ($8) {
  $9 = $0; //@line 9 "client.c"
  $10 = (($9) + 20|0); //@line 9 "client.c"
  $11 = HEAP32[$10>>2]|0; //@line 9 "client.c"
  _ot_free_op($11); //@line 9 "client.c"
  $12 = $0; //@line 10 "client.c"
  $13 = (($12) + 24|0); //@line 10 "client.c"
  HEAP8[$13>>0] = 0; //@line 10 "client.c"
 } else {
  $14 = $0; //@line 12 "client.c"
  $15 = (($14) + 20|0); //@line 12 "client.c"
  $16 = HEAP32[$15>>2]|0; //@line 12 "client.c"
  _free($16); //@line 12 "client.c"
 }
 $17 = $0; //@line 15 "client.c"
 $18 = (($17) + 20|0); //@line 15 "client.c"
 HEAP32[$18>>2] = 0; //@line 15 "client.c"
 STACKTOP = sp;return; //@line 15 "client.c"
}
function _free_buffer($client) {
 $client = $client|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $client;
 $1 = $0; //@line 19 "client.c"
 $2 = (($1) + 28|0); //@line 19 "client.c"
 $3 = HEAP32[$2>>2]|0; //@line 19 "client.c"
 $4 = ($3|0)==(0|0); //@line 19 "client.c"
 if ($4) {
  STACKTOP = sp;return; //@line 30 "client.c"
 }
 $5 = $0; //@line 23 "client.c"
 $6 = (($5) + 32|0); //@line 23 "client.c"
 $7 = HEAP8[$6>>0]|0; //@line 23 "client.c"
 $8 = $7&1; //@line 23 "client.c"
 if ($8) {
  $9 = $0; //@line 24 "client.c"
  $10 = (($9) + 28|0); //@line 24 "client.c"
  $11 = HEAP32[$10>>2]|0; //@line 24 "client.c"
  _ot_free_op($11); //@line 24 "client.c"
  $12 = $0; //@line 25 "client.c"
  $13 = (($12) + 32|0); //@line 25 "client.c"
  HEAP8[$13>>0] = 0; //@line 25 "client.c"
 } else {
  $14 = $0; //@line 27 "client.c"
  $15 = (($14) + 28|0); //@line 27 "client.c"
  $16 = HEAP32[$15>>2]|0; //@line 27 "client.c"
  _free($16); //@line 27 "client.c"
 }
 $17 = $0; //@line 30 "client.c"
 $18 = (($17) + 28|0); //@line 30 "client.c"
 HEAP32[$18>>2] = 0; //@line 30 "client.c"
 STACKTOP = sp;return; //@line 30 "client.c"
}
function _ot_client_open($client,$doc) {
 $client = $client|0;
 $doc = $doc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $client;
 $1 = $doc;
 $2 = $1; //@line 173 "client.c"
 $3 = $0; //@line 173 "client.c"
 $4 = (($3) + 8|0); //@line 173 "client.c"
 HEAP32[$4>>2] = $2; //@line 173 "client.c"
 STACKTOP = sp;return; //@line 173 "client.c"
}
function _ot_client_receive($client,$op) {
 $client = $client|0;
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $apply = 0, $dec = 0, $err = 0, $hex = 0;
 var $inter = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer10 = sp + 8|0;
 $vararg_buffer7 = sp + 16|0;
 $vararg_buffer4 = sp + 32|0;
 $vararg_buffer1 = sp + 24|0;
 $vararg_buffer = sp;
 $hex = sp + 60|0;
 $inter = sp + 48|0;
 $apply = sp + 56|0;
 $0 = $client;
 $1 = $op;
 $2 = HEAP32[_stderr>>2]|0; //@line 176 "client.c"
 $3 = $1; //@line 176 "client.c"
 HEAP32[$vararg_buffer>>2] = $3; //@line 176 "client.c"
 (_fprintf(($2|0),(128|0),($vararg_buffer|0))|0); //@line 176 "client.c"
 $4 = (_ot_new_op(0,152)|0); //@line 178 "client.c"
 $dec = $4; //@line 178 "client.c"
 $5 = $dec; //@line 179 "client.c"
 $6 = $1; //@line 179 "client.c"
 $7 = (_ot_decode($5,$6)|0); //@line 179 "client.c"
 $err = $7; //@line 179 "client.c"
 $8 = $err; //@line 180 "client.c"
 $9 = ($8|0)!=(0); //@line 180 "client.c"
 if ($9) {
  $10 = HEAP32[_stderr>>2]|0; //@line 181 "client.c"
  $11 = $err; //@line 181 "client.c"
  HEAP32[$vararg_buffer1>>2] = $11; //@line 181 "client.c"
  (_fprintf(($10|0),(160|0),($vararg_buffer1|0))|0); //@line 181 "client.c"
  $12 = $dec; //@line 182 "client.c"
  _ot_free_op($12); //@line 182 "client.c"
  STACKTOP = sp;return; //@line 223 "client.c"
 }
 $13 = $dec; //@line 186 "client.c"
 $14 = HEAP32[$13>>2]|0; //@line 186 "client.c"
 $15 = $0; //@line 186 "client.c"
 $16 = (($15) + 12|0); //@line 186 "client.c"
 $17 = HEAP32[$16>>2]|0; //@line 186 "client.c"
 $18 = ($14|0)==($17|0); //@line 186 "client.c"
 if ($18) {
  $19 = $dec; //@line 188 "client.c"
  $20 = (($19) + 24|0); //@line 188 "client.c"
  (_atohex($hex,$20,20)|0); //@line 188 "client.c"
  $21 = HEAP32[_stderr>>2]|0; //@line 189 "client.c"
  HEAP32[$vararg_buffer4>>2] = $hex; //@line 189 "client.c"
  (_fprintf(($21|0),(208|0),($vararg_buffer4|0))|0); //@line 189 "client.c"
  $22 = $0; //@line 191 "client.c"
  $23 = (($22) + 16|0); //@line 191 "client.c"
  HEAP8[$23>>0] = 0; //@line 191 "client.c"
  $24 = $0; //@line 192 "client.c"
  $25 = $dec; //@line 192 "client.c"
  $26 = (($25) + 24|0); //@line 192 "client.c"
  _send_buffer($24,$26); //@line 192 "client.c"
  $27 = $dec; //@line 194 "client.c"
  _ot_free_op($27); //@line 194 "client.c"
  STACKTOP = sp;return; //@line 223 "client.c"
 }
 $28 = $0; //@line 199 "client.c"
 $29 = $dec; //@line 199 "client.c"
 $30 = (_xform_anticipated($28,$29,$inter)|0); //@line 199 "client.c"
 $err = $30; //@line 199 "client.c"
 $31 = $err; //@line 200 "client.c"
 $32 = ($31|0)!=(0); //@line 200 "client.c"
 if ($32) {
  $33 = HEAP32[_stderr>>2]|0; //@line 201 "client.c"
  $34 = $err; //@line 201 "client.c"
  HEAP32[$vararg_buffer7>>2] = $34; //@line 201 "client.c"
  (_fprintf(($33|0),(240|0),($vararg_buffer7|0))|0); //@line 201 "client.c"
  $35 = $dec; //@line 204 "client.c"
  _ot_free_op($35); //@line 204 "client.c"
  ___assert_fail((304|0),(312|0),205,(328|0)); //@line 205 "client.c"
  // unreachable; //@line 205 "client.c"
 }
 $36 = $0; //@line 210 "client.c"
 $37 = HEAP32[$inter>>2]|0; //@line 210 "client.c"
 $38 = (_xform_buffer($36,$37,$apply)|0); //@line 210 "client.c"
 $err = $38; //@line 210 "client.c"
 $39 = $err; //@line 211 "client.c"
 $40 = ($39|0)!=(0); //@line 211 "client.c"
 if ($40) {
  $41 = HEAP32[_stderr>>2]|0; //@line 212 "client.c"
  $42 = $err; //@line 212 "client.c"
  HEAP32[$vararg_buffer10>>2] = $42; //@line 212 "client.c"
  (_fprintf(($41|0),(352|0),($vararg_buffer10|0))|0); //@line 212 "client.c"
  $43 = HEAP32[$inter>>2]|0; //@line 214 "client.c"
  _ot_free_op($43); //@line 214 "client.c"
  ___assert_fail((304|0),(312|0),215,(328|0)); //@line 215 "client.c"
  // unreachable; //@line 215 "client.c"
 }
 $44 = $0; //@line 219 "client.c"
 $45 = (($44) + 8|0); //@line 219 "client.c"
 $46 = HEAP32[$45>>2]|0; //@line 219 "client.c"
 $47 = ($46|0)==(0|0); //@line 219 "client.c"
 if ($47) {
  $48 = (_ot_new_doc()|0); //@line 220 "client.c"
  $49 = $0; //@line 220 "client.c"
  $50 = (($49) + 8|0); //@line 220 "client.c"
  HEAP32[$50>>2] = $48; //@line 220 "client.c"
 }
 $51 = $0; //@line 222 "client.c"
 $52 = (($51) + 8|0); //@line 222 "client.c"
 $53 = HEAP32[$52>>2]|0; //@line 222 "client.c"
 (_ot_doc_append($53,$apply)|0); //@line 222 "client.c"
 $54 = $0; //@line 223 "client.c"
 $55 = HEAP32[$apply>>2]|0; //@line 223 "client.c"
 _fire_op_event($54,$55); //@line 223 "client.c"
 STACKTOP = sp;return; //@line 223 "client.c"
}
function _send_buffer($client,$received_hash) {
 $client = $client|0;
 $received_hash = $received_hash|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $enc_buf = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $client;
 $1 = $received_hash;
 $2 = $0; //@line 67 "client.c"
 $3 = (($2) + 28|0); //@line 67 "client.c"
 $4 = HEAP32[$3>>2]|0; //@line 67 "client.c"
 $5 = ($4|0)==(0|0); //@line 67 "client.c"
 if ($5) {
  $6 = $0; //@line 68 "client.c"
  _free_anticipated($6); //@line 68 "client.c"
  STACKTOP = sp;return; //@line 86 "client.c"
 }
 $7 = $1; //@line 72 "client.c"
 $8 = ($7|0)!=(0|0); //@line 72 "client.c"
 if ($8) {
  $9 = $0; //@line 73 "client.c"
  $10 = (($9) + 28|0); //@line 73 "client.c"
  $11 = HEAP32[$10>>2]|0; //@line 73 "client.c"
  $12 = (($11) + 4|0); //@line 73 "client.c"
  $13 = $1; //@line 73 "client.c"
  dest=$12+0|0; src=$13+0|0; stop=dest+20|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0)); //@line 73 "client.c"
 }
 $14 = $0; //@line 76 "client.c"
 $15 = (($14) + 28|0); //@line 76 "client.c"
 $16 = HEAP32[$15>>2]|0; //@line 76 "client.c"
 $17 = (_ot_encode($16)|0); //@line 76 "client.c"
 $enc_buf = $17; //@line 76 "client.c"
 $18 = $0; //@line 77 "client.c"
 $19 = HEAP32[$18>>2]|0; //@line 77 "client.c"
 $20 = $enc_buf; //@line 77 "client.c"
 (FUNCTION_TABLE_ii[$19 & 15]($20)|0); //@line 77 "client.c"
 $21 = $enc_buf; //@line 78 "client.c"
 _free($21); //@line 78 "client.c"
 $22 = $0; //@line 80 "client.c"
 _free_anticipated($22); //@line 80 "client.c"
 $23 = (_malloc(60)|0); //@line 81 "client.c"
 $24 = $0; //@line 81 "client.c"
 $25 = (($24) + 20|0); //@line 81 "client.c"
 HEAP32[$25>>2] = $23; //@line 81 "client.c"
 $26 = $0; //@line 82 "client.c"
 $27 = (($26) + 20|0); //@line 82 "client.c"
 $28 = HEAP32[$27>>2]|0; //@line 82 "client.c"
 $29 = $0; //@line 82 "client.c"
 $30 = (($29) + 28|0); //@line 82 "client.c"
 $31 = HEAP32[$30>>2]|0; //@line 82 "client.c"
 dest=$28+0|0; src=$31+0|0; stop=dest+60|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0)); //@line 82 "client.c"
 $32 = $0; //@line 83 "client.c"
 $33 = (($32) + 24|0); //@line 83 "client.c"
 HEAP8[$33>>0] = 0; //@line 83 "client.c"
 $34 = $0; //@line 85 "client.c"
 _free_buffer($34); //@line 85 "client.c"
 $35 = $0; //@line 86 "client.c"
 $36 = (($35) + 16|0); //@line 86 "client.c"
 HEAP8[$36>>0] = 1; //@line 86 "client.c"
 STACKTOP = sp;return; //@line 86 "client.c"
}
function _xform_anticipated($client,$received,$inter) {
 $client = $client|0;
 $received = $received|0;
 $inter = $inter|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $p = sp;
 $1 = $client;
 $2 = $received;
 $3 = $inter;
 $4 = $1; //@line 103 "client.c"
 $5 = (($4) + 20|0); //@line 103 "client.c"
 $6 = HEAP32[$5>>2]|0; //@line 103 "client.c"
 $7 = ($6|0)==(0|0); //@line 103 "client.c"
 if ($7) {
  $8 = $2; //@line 104 "client.c"
  $9 = $3; //@line 104 "client.c"
  HEAP32[$9>>2] = $8; //@line 104 "client.c"
  $0 = 0; //@line 105 "client.c"
  $29 = $0; //@line 121 "client.c"
  STACKTOP = sp;return ($29|0); //@line 121 "client.c"
 }
 $10 = $2; //@line 108 "client.c"
 $11 = $1; //@line 108 "client.c"
 $12 = (($11) + 20|0); //@line 108 "client.c"
 $13 = HEAP32[$12>>2]|0; //@line 108 "client.c"
 _ot_xform($p,$10,$13); //@line 108 "client.c"
 $14 = HEAP32[$p>>2]|0; //@line 109 "client.c"
 $15 = ($14|0)==(0|0); //@line 109 "client.c"
 if (!($15)) {
  $16 = (($p) + 4|0); //@line 109 "client.c"
  $17 = HEAP32[$16>>2]|0; //@line 109 "client.c"
  $18 = ($17|0)==(0|0); //@line 109 "client.c"
  if (!($18)) {
   $19 = $1; //@line 113 "client.c"
   _free_anticipated($19); //@line 113 "client.c"
   $20 = HEAP32[$p>>2]|0; //@line 114 "client.c"
   $21 = $3; //@line 114 "client.c"
   HEAP32[$21>>2] = $20; //@line 114 "client.c"
   $22 = (($p) + 4|0); //@line 116 "client.c"
   $23 = HEAP32[$22>>2]|0; //@line 116 "client.c"
   $24 = $1; //@line 116 "client.c"
   $25 = (($24) + 20|0); //@line 116 "client.c"
   HEAP32[$25>>2] = $23; //@line 116 "client.c"
   $26 = $1; //@line 117 "client.c"
   $27 = (($26) + 24|0); //@line 117 "client.c"
   HEAP8[$27>>0] = 1; //@line 117 "client.c"
   $28 = $2; //@line 119 "client.c"
   _ot_free_op($28); //@line 119 "client.c"
   $0 = 0; //@line 121 "client.c"
   $29 = $0; //@line 121 "client.c"
   STACKTOP = sp;return ($29|0); //@line 121 "client.c"
  }
 }
 $0 = 9; //@line 110 "client.c"
 $29 = $0; //@line 121 "client.c"
 STACKTOP = sp;return ($29|0); //@line 121 "client.c"
}
function _xform_buffer($client,$inter,$apply) {
 $client = $client|0;
 $inter = $inter|0;
 $apply = $apply|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $p = sp;
 $1 = $client;
 $2 = $inter;
 $3 = $apply;
 $4 = $1; //@line 127 "client.c"
 $5 = (($4) + 28|0); //@line 127 "client.c"
 $6 = HEAP32[$5>>2]|0; //@line 127 "client.c"
 $7 = ($6|0)==(0|0); //@line 127 "client.c"
 if ($7) {
  $8 = $2; //@line 128 "client.c"
  $9 = $3; //@line 128 "client.c"
  HEAP32[$9>>2] = $8; //@line 128 "client.c"
  $0 = 0; //@line 129 "client.c"
  $29 = $0; //@line 144 "client.c"
  STACKTOP = sp;return ($29|0); //@line 144 "client.c"
 }
 $10 = $1; //@line 132 "client.c"
 $11 = (($10) + 28|0); //@line 132 "client.c"
 $12 = HEAP32[$11>>2]|0; //@line 132 "client.c"
 $13 = $2; //@line 132 "client.c"
 _ot_xform($p,$12,$13); //@line 132 "client.c"
 $14 = HEAP32[$p>>2]|0; //@line 133 "client.c"
 $15 = ($14|0)==(0|0); //@line 133 "client.c"
 if (!($15)) {
  $16 = (($p) + 4|0); //@line 133 "client.c"
  $17 = HEAP32[$16>>2]|0; //@line 133 "client.c"
  $18 = ($17|0)==(0|0); //@line 133 "client.c"
  if (!($18)) {
   $19 = (($p) + 4|0); //@line 137 "client.c"
   $20 = HEAP32[$19>>2]|0; //@line 137 "client.c"
   $21 = $3; //@line 137 "client.c"
   HEAP32[$21>>2] = $20; //@line 137 "client.c"
   $22 = $1; //@line 138 "client.c"
   _free_buffer($22); //@line 138 "client.c"
   $23 = $2; //@line 139 "client.c"
   _ot_free_op($23); //@line 139 "client.c"
   $24 = HEAP32[$p>>2]|0; //@line 141 "client.c"
   $25 = $1; //@line 141 "client.c"
   $26 = (($25) + 28|0); //@line 141 "client.c"
   HEAP32[$26>>2] = $24; //@line 141 "client.c"
   $27 = $1; //@line 142 "client.c"
   $28 = (($27) + 32|0); //@line 142 "client.c"
   HEAP8[$28>>0] = 1; //@line 142 "client.c"
   $0 = 0; //@line 144 "client.c"
   $29 = $0; //@line 144 "client.c"
   STACKTOP = sp;return ($29|0); //@line 144 "client.c"
  }
 }
 $0 = 9; //@line 134 "client.c"
 $29 = $0; //@line 144 "client.c"
 STACKTOP = sp;return ($29|0); //@line 144 "client.c"
}
function _fire_op_event($client,$op) {
 $client = $client|0;
 $op = $op|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $client;
 $1 = $op;
 $2 = $0; //@line 90 "client.c"
 $3 = (($2) + 4|0); //@line 90 "client.c"
 $4 = HEAP32[$3>>2]|0; //@line 90 "client.c"
 $5 = $1; //@line 90 "client.c"
 (FUNCTION_TABLE_iii[$4 & 15](2,$5)|0); //@line 90 "client.c"
 STACKTOP = sp;return; //@line 91 "client.c"
}
function _ot_client_apply($client,$op) {
 $client = $client|0;
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $append_err = 0, $buf_err = 0, $doc = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $client;
 $2 = $op;
 $3 = $1; //@line 227 "client.c"
 $4 = (($3) + 12|0); //@line 227 "client.c"
 $5 = HEAP32[$4>>2]|0; //@line 227 "client.c"
 $6 = $2; //@line 227 "client.c"
 $7 = HEAP32[$6>>2]|0; //@line 227 "client.c"
 HEAP32[$7>>2] = $5; //@line 227 "client.c"
 $8 = $1; //@line 229 "client.c"
 $9 = (($8) + 8|0); //@line 229 "client.c"
 $10 = HEAP32[$9>>2]|0; //@line 229 "client.c"
 $11 = ($10|0)==(0|0); //@line 229 "client.c"
 if ($11) {
  $12 = (_ot_new_doc()|0); //@line 230 "client.c"
  $13 = $1; //@line 230 "client.c"
  $14 = (($13) + 8|0); //@line 230 "client.c"
  HEAP32[$14>>2] = $12; //@line 230 "client.c"
 }
 $15 = $1; //@line 233 "client.c"
 $16 = (($15) + 8|0); //@line 233 "client.c"
 $17 = HEAP32[$16>>2]|0; //@line 233 "client.c"
 $doc = $17; //@line 233 "client.c"
 $18 = $doc; //@line 234 "client.c"
 $19 = $2; //@line 234 "client.c"
 $20 = (_ot_doc_append($18,$19)|0); //@line 234 "client.c"
 $append_err = $20; //@line 234 "client.c"
 $21 = $append_err; //@line 235 "client.c"
 $22 = ($21|0)!=(0); //@line 235 "client.c"
 if ($22) {
  $23 = $append_err; //@line 236 "client.c"
  $0 = $23; //@line 236 "client.c"
  $36 = $0; //@line 249 "client.c"
  STACKTOP = sp;return ($36|0); //@line 249 "client.c"
 }
 $24 = $1; //@line 239 "client.c"
 $25 = $2; //@line 239 "client.c"
 $26 = HEAP32[$25>>2]|0; //@line 239 "client.c"
 $27 = (_buffer_op($24,$26)|0); //@line 239 "client.c"
 $buf_err = $27; //@line 239 "client.c"
 $28 = $buf_err; //@line 240 "client.c"
 $29 = ($28|0)!=(0); //@line 240 "client.c"
 if ($29) {
  $30 = $buf_err; //@line 241 "client.c"
  $0 = $30; //@line 241 "client.c"
  $36 = $0; //@line 249 "client.c"
  STACKTOP = sp;return ($36|0); //@line 249 "client.c"
 }
 $31 = $1; //@line 244 "client.c"
 $32 = (($31) + 16|0); //@line 244 "client.c"
 $33 = HEAP8[$32>>0]|0; //@line 244 "client.c"
 $34 = $33&1; //@line 244 "client.c"
 if (!($34)) {
  $35 = $1; //@line 245 "client.c"
  _send_buffer($35,0); //@line 245 "client.c"
 }
 $0 = 0; //@line 248 "client.c"
 $36 = $0; //@line 249 "client.c"
 STACKTOP = sp;return ($36|0); //@line 249 "client.c"
}
function _buffer_op($client,$op) {
 $client = $client|0;
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $composed = 0, $enc = 0, $enc1 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $client;
 $2 = $op;
 $3 = $1; //@line 34 "client.c"
 $4 = (($3) + 28|0); //@line 34 "client.c"
 $5 = HEAP32[$4>>2]|0; //@line 34 "client.c"
 $6 = ($5|0)==(0|0); //@line 34 "client.c"
 if ($6) {
  $7 = (_malloc(60)|0); //@line 35 "client.c"
  $8 = $1; //@line 35 "client.c"
  $9 = (($8) + 28|0); //@line 35 "client.c"
  HEAP32[$9>>2] = $7; //@line 35 "client.c"
  $10 = $1; //@line 36 "client.c"
  $11 = (($10) + 28|0); //@line 36 "client.c"
  $12 = HEAP32[$11>>2]|0; //@line 36 "client.c"
  $13 = $2; //@line 36 "client.c"
  dest=$12+0|0; src=$13+0|0; stop=dest+60|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0)); //@line 36 "client.c"
  $14 = $1; //@line 40 "client.c"
  $15 = (($14) + 32|0); //@line 40 "client.c"
  HEAP8[$15>>0] = 0; //@line 40 "client.c"
  $0 = 0; //@line 41 "client.c"
  $39 = $0; //@line 63 "client.c"
  STACKTOP = sp;return ($39|0); //@line 63 "client.c"
 }
 $16 = $1; //@line 44 "client.c"
 $17 = (($16) + 28|0); //@line 44 "client.c"
 $18 = HEAP32[$17>>2]|0; //@line 44 "client.c"
 $19 = $2; //@line 44 "client.c"
 $20 = (_ot_compose($18,$19)|0); //@line 44 "client.c"
 $composed = $20; //@line 44 "client.c"
 $21 = $composed; //@line 45 "client.c"
 $22 = ($21|0)==(0|0); //@line 45 "client.c"
 if ($22) {
  $23 = $2; //@line 46 "client.c"
  $24 = (_ot_encode($23)|0); //@line 46 "client.c"
  $enc = $24; //@line 46 "client.c"
  $25 = HEAP32[_stderr>>2]|0; //@line 47 "client.c"
  $26 = $enc; //@line 47 "client.c"
  HEAP32[$vararg_buffer>>2] = $26; //@line 47 "client.c"
  (_fprintf(($25|0),(408|0),($vararg_buffer|0))|0); //@line 47 "client.c"
  $27 = $enc; //@line 48 "client.c"
  _free($27); //@line 48 "client.c"
  $0 = 7; //@line 49 "client.c"
  $39 = $0; //@line 63 "client.c"
  STACKTOP = sp;return ($39|0); //@line 63 "client.c"
 } else {
  $28 = $1; //@line 52 "client.c"
  _free_buffer($28); //@line 52 "client.c"
  $29 = $composed; //@line 56 "client.c"
  $30 = $1; //@line 56 "client.c"
  $31 = (($30) + 28|0); //@line 56 "client.c"
  HEAP32[$31>>2] = $29; //@line 56 "client.c"
  $32 = $1; //@line 57 "client.c"
  $33 = (($32) + 32|0); //@line 57 "client.c"
  HEAP8[$33>>0] = 1; //@line 57 "client.c"
  $34 = $composed; //@line 59 "client.c"
  $35 = (_ot_encode($34)|0); //@line 59 "client.c"
  $enc1 = $35; //@line 59 "client.c"
  $36 = HEAP32[_stderr>>2]|0; //@line 60 "client.c"
  $37 = $enc1; //@line 60 "client.c"
  HEAP32[$vararg_buffer1>>2] = $37; //@line 60 "client.c"
  (_fprintf(($36|0),(456|0),($vararg_buffer1|0))|0); //@line 60 "client.c"
  $38 = $enc1; //@line 61 "client.c"
  _free($38); //@line 61 "client.c"
  $0 = 0; //@line 63 "client.c"
  $39 = $0; //@line 63 "client.c"
  STACKTOP = sp;return ($39|0); //@line 63 "client.c"
 }
 return 0|0;
}
function _ot_compose($op1,$op2) {
 $op1 = $op1|0;
 $op2 = $op2|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $composed = 0, $count = 0, $len = 0, $op1_comp = 0, $op1_comps = 0, $op1_delete = 0, $op1_delete$byval_copy = 0, $op1_insert = 0, $op1_insert$byval_copy = 0;
 var $op1_insert$byval_copy3 = 0, $op1_insert$byval_copy4 = 0, $op1_iter = 0, $op1_next = 0, $op1_skip = 0, $op1_skip$byval_copy = 0, $op1_skip$byval_copy1 = 0, $op1_skip$byval_copy2 = 0, $op2_comp = 0, $op2_comps = 0, $op2_delete = 0, $op2_delete$byval_copy = 0, $op2_delete7 = 0, $op2_delete7$byval_copy = 0, $op2_insert = 0, $op2_insert$byval_copy = 0, $op2_insert5 = 0, $op2_insert5$byval_copy = 0, $op2_iter = 0, $op2_next = 0;
 var $op2_skip = 0, $op2_skip$byval_copy = 0, $op2_skip3 = 0, $op2_skip3$byval_copy = 0, $p = 0, $p1 = 0, $p2 = 0, $p4 = 0, $p6 = 0, $p8 = 0, $p9 = 0, $parent = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $op1_delete$byval_copy = sp + 176|0;
 $op2_delete7$byval_copy = sp + 72|0;
 $op1_insert$byval_copy4 = sp + 4|0;
 $op2_insert5$byval_copy = sp;
 $op1_insert$byval_copy3 = sp + 196|0;
 $op2_skip3$byval_copy = sp + 8|0;
 $op1_insert$byval_copy = sp + 20|0;
 $op2_delete$byval_copy = sp + 24|0;
 $op1_skip$byval_copy2 = sp + 28|0;
 $op2_insert$byval_copy = sp + 32|0;
 $op1_skip$byval_copy1 = sp + 36|0;
 $op2_skip$byval_copy = sp + 40|0;
 $op1_skip$byval_copy = sp + 44|0;
 $parent = sp + 228|0;
 $op1_iter = sp + 208|0;
 $op2_iter = sp + 80|0;
 $op1_skip = sp + 128|0;
 $op2_skip = sp + 132|0;
 $p = sp + 136|0;
 $op2_insert = sp + 12|0;
 $p1 = sp + 144|0;
 $op2_delete = sp + 60|0;
 $p2 = sp + 152|0;
 $op1_insert = sp + 16|0;
 $op2_skip3 = sp + 64|0;
 $p4 = sp + 168|0;
 $op2_insert5 = sp + 68|0;
 $p6 = sp + 184|0;
 $op2_delete7 = sp + 76|0;
 $p8 = sp + 104|0;
 $op1_delete = sp + 96|0;
 $p9 = sp + 160|0;
 $1 = $op1;
 $2 = $op2;
 $3 = $1; //@line 114 "compose.c"
 $4 = (($3) + 4|0); //@line 114 "compose.c"
 dest=$parent+0|0; src=$4+0|0; stop=dest+20|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0)); //@line 114 "compose.c"
 $5 = $1; //@line 115 "compose.c"
 $6 = HEAP32[$5>>2]|0; //@line 115 "compose.c"
 $7 = (_ot_new_op($6,$parent)|0); //@line 115 "compose.c"
 $composed = $7; //@line 115 "compose.c"
 $8 = $1; //@line 117 "compose.c"
 $9 = (($8) + 44|0); //@line 117 "compose.c"
 $10 = (($9) + 12|0); //@line 117 "compose.c"
 $11 = HEAP32[$10>>2]|0; //@line 117 "compose.c"
 $op1_comps = $11; //@line 117 "compose.c"
 $12 = $2; //@line 118 "compose.c"
 $13 = (($12) + 44|0); //@line 118 "compose.c"
 $14 = (($13) + 12|0); //@line 118 "compose.c"
 $15 = HEAP32[$14>>2]|0; //@line 118 "compose.c"
 $op2_comps = $15; //@line 118 "compose.c"
 $16 = $1; //@line 121 "compose.c"
 _ot_iter_init($op1_iter,$16); //@line 121 "compose.c"
 $17 = $2; //@line 124 "compose.c"
 _ot_iter_init($op2_iter,$17); //@line 124 "compose.c"
 $18 = (_ot_iter_next($op1_iter)|0); //@line 126 "compose.c"
 $19 = $18&1; //@line 126 "compose.c"
 $op1_next = $19; //@line 126 "compose.c"
 $20 = (_ot_iter_next($op2_iter)|0); //@line 127 "compose.c"
 $21 = $20&1; //@line 127 "compose.c"
 $op2_next = $21; //@line 127 "compose.c"
 while(1) {
  $22 = $op1_next; //@line 128 "compose.c"
  $23 = $22&1; //@line 128 "compose.c"
  if ($23) {
   $210 = 1;
  } else {
   $24 = $op2_next; //@line 128 "compose.c"
   $25 = $24&1; //@line 128 "compose.c"
   $210 = $25;
  }
  if (!($210)) {
   label = 63;
   break;
  }
  $26 = $op1_next; //@line 130 "compose.c"
  $27 = $26&1; //@line 130 "compose.c"
  if ($27) {
   $28 = $op1_comps; //@line 131 "compose.c"
   $29 = (($op1_iter) + 4|0); //@line 131 "compose.c"
   $30 = HEAP32[$29>>2]|0; //@line 131 "compose.c"
   $31 = (($28) + (($30*36)|0)|0); //@line 131 "compose.c"
   $op1_comp = $31; //@line 131 "compose.c"
  } else {
   $op1_comp = 0; //@line 133 "compose.c"
  }
  $32 = $op2_next; //@line 137 "compose.c"
  $33 = $32&1; //@line 137 "compose.c"
  if ($33) {
   $34 = $op2_comps; //@line 138 "compose.c"
   $35 = (($op2_iter) + 4|0); //@line 138 "compose.c"
   $36 = HEAP32[$35>>2]|0; //@line 138 "compose.c"
   $37 = (($34) + (($36*36)|0)|0); //@line 138 "compose.c"
   $op2_comp = $37; //@line 138 "compose.c"
  } else {
   $op2_comp = 0; //@line 140 "compose.c"
  }
  $38 = $op1_comp; //@line 143 "compose.c"
  $39 = ($38|0)==(0|0); //@line 143 "compose.c"
  if ($39) {
   $40 = $op2_comp; //@line 144 "compose.c"
   $41 = ($40|0)==(0|0); //@line 144 "compose.c"
   if ($41) {
    label = 13;
    break;
   }
   $42 = $op2_comp; //@line 146 "compose.c"
   $43 = HEAP32[$42>>2]|0; //@line 146 "compose.c"
   $44 = ($43|0)==(1); //@line 146 "compose.c"
   if ($44) {
    $45 = $composed; //@line 147 "compose.c"
    $46 = $op2_comp; //@line 147 "compose.c"
    $47 = (($46) + 4|0); //@line 147 "compose.c"
    $48 = HEAP32[$47>>2]|0; //@line 147 "compose.c"
    _ot_insert($45,$48); //@line 147 "compose.c"
    $49 = $op2_comp; //@line 148 "compose.c"
    $50 = (($49) + 4|0); //@line 148 "compose.c"
    $51 = HEAP32[$50>>2]|0; //@line 148 "compose.c"
    $52 = (_strlen(($51|0))|0); //@line 148 "compose.c"
    $len = $52; //@line 148 "compose.c"
    $53 = $len; //@line 149 "compose.c"
    $54 = (_ot_iter_skip($op2_iter,$53)|0); //@line 149 "compose.c"
    $55 = $54&1; //@line 149 "compose.c"
    $op2_next = $55; //@line 149 "compose.c"
   } else {
    $56 = $op2_comp; //@line 150 "compose.c"
    $57 = HEAP32[$56>>2]|0; //@line 150 "compose.c"
    $58 = ($57|0)==(3); //@line 150 "compose.c"
    if ($58) {
    } else {
     $59 = $op2_comp; //@line 152 "compose.c"
     $60 = HEAP32[$59>>2]|0; //@line 152 "compose.c"
     $61 = ($60|0)==(4); //@line 152 "compose.c"
     if ($61) {
     } else {
      $62 = $op2_comp; //@line 154 "compose.c"
      $63 = HEAP32[$62>>2]|0; //@line 154 "compose.c"
      $64 = ($63|0)==(5); //@line 154 "compose.c"
      if (!($64)) {
       label = 22;
       break;
      }
     }
    }
   }
  } else {
   $66 = $op2_comp; //@line 162 "compose.c"
   $67 = ($66|0)==(0|0); //@line 162 "compose.c"
   if ($67) {
    $68 = $op1_comp; //@line 163 "compose.c"
    $69 = ($68|0)==(0|0); //@line 163 "compose.c"
    if ($69) {
     label = 30;
     break;
    }
    $70 = $op1_comp; //@line 165 "compose.c"
    $71 = HEAP32[$70>>2]|0; //@line 165 "compose.c"
    $72 = ($71|0)==(2); //@line 165 "compose.c"
    if (!($72)) {
     label = 33;
     break;
    }
    $73 = $op1_comp; //@line 166 "compose.c"
    $74 = (($73) + 4|0); //@line 166 "compose.c"
    $75 = HEAP32[$74>>2]|0; //@line 166 "compose.c"
    $count = $75; //@line 166 "compose.c"
    $76 = $composed; //@line 167 "compose.c"
    $77 = $count; //@line 167 "compose.c"
    _ot_delete($76,$77); //@line 167 "compose.c"
    $78 = $count; //@line 168 "compose.c"
    $79 = (_ot_iter_skip($op1_iter,$78)|0); //@line 168 "compose.c"
    $80 = $79&1; //@line 168 "compose.c"
    $op1_next = $80; //@line 168 "compose.c"
   } else {
    $82 = $op1_comp; //@line 176 "compose.c"
    $83 = HEAP32[$82>>2]|0; //@line 176 "compose.c"
    $84 = ($83|0)==(0); //@line 176 "compose.c"
    if ($84) {
     $85 = $op1_comp; //@line 177 "compose.c"
     $86 = (($85) + 4|0); //@line 177 "compose.c"
     ;HEAP32[$op1_skip+0>>2]=HEAP32[$86+0>>2]|0; //@line 177 "compose.c"
     $87 = $op2_comp; //@line 179 "compose.c"
     $88 = HEAP32[$87>>2]|0; //@line 179 "compose.c"
     $89 = ($88|0)==(0); //@line 179 "compose.c"
     if ($89) {
      $90 = $op2_comp; //@line 180 "compose.c"
      $91 = (($90) + 4|0); //@line 180 "compose.c"
      ;HEAP32[$op2_skip+0>>2]=HEAP32[$91+0>>2]|0; //@line 180 "compose.c"
      $92 = (($op1_iter) + 8|0); //@line 183 "compose.c"
      $93 = HEAP32[$92>>2]|0; //@line 183 "compose.c"
      $94 = (($op2_iter) + 8|0); //@line 183 "compose.c"
      $95 = HEAP32[$94>>2]|0; //@line 183 "compose.c"
      $96 = $composed; //@line 183 "compose.c"
      ;HEAP32[$op1_skip$byval_copy+0>>2]=HEAP32[$op1_skip+0>>2]|0; //@line 183 "compose.c"
      ;HEAP32[$op2_skip$byval_copy+0>>2]=HEAP32[$op2_skip+0>>2]|0; //@line 183 "compose.c"
      _ot_compose_skip_skip($p,$op1_skip$byval_copy,$93,$op2_skip$byval_copy,$95,$96); //@line 183 "compose.c"
      $97 = HEAP32[$p>>2]|0; //@line 186 "compose.c"
      $98 = (_ot_iter_skip($op1_iter,$97)|0); //@line 186 "compose.c"
      $99 = $98&1; //@line 186 "compose.c"
      $op1_next = $99; //@line 186 "compose.c"
      $100 = (($p) + 4|0); //@line 187 "compose.c"
      $101 = HEAP32[$100>>2]|0; //@line 187 "compose.c"
      $102 = (_ot_iter_skip($op2_iter,$101)|0); //@line 187 "compose.c"
      $103 = $102&1; //@line 187 "compose.c"
      $op2_next = $103; //@line 187 "compose.c"
     } else {
      $104 = $op2_comp; //@line 188 "compose.c"
      $105 = HEAP32[$104>>2]|0; //@line 188 "compose.c"
      $106 = ($105|0)==(1); //@line 188 "compose.c"
      if ($106) {
       $107 = $op2_comp; //@line 189 "compose.c"
       $108 = (($107) + 4|0); //@line 189 "compose.c"
       ;HEAP32[$op2_insert+0>>2]=HEAP32[$108+0>>2]|0; //@line 189 "compose.c"
       $109 = (($op1_iter) + 8|0); //@line 191 "compose.c"
       $110 = HEAP32[$109>>2]|0; //@line 191 "compose.c"
       $111 = (($op2_iter) + 8|0); //@line 191 "compose.c"
       $112 = HEAP32[$111>>2]|0; //@line 191 "compose.c"
       $113 = $composed; //@line 191 "compose.c"
       ;HEAP32[$op1_skip$byval_copy1+0>>2]=HEAP32[$op1_skip+0>>2]|0; //@line 191 "compose.c"
       ;HEAP32[$op2_insert$byval_copy+0>>2]=HEAP32[$op2_insert+0>>2]|0; //@line 191 "compose.c"
       _ot_compose_skip_insert($p1,$op1_skip$byval_copy1,$110,$op2_insert$byval_copy,$112,$113); //@line 191 "compose.c"
       $114 = HEAP32[$p1>>2]|0; //@line 195 "compose.c"
       $115 = (_ot_iter_skip($op1_iter,$114)|0); //@line 195 "compose.c"
       $116 = $115&1; //@line 195 "compose.c"
       $op1_next = $116; //@line 195 "compose.c"
       $117 = (($p1) + 4|0); //@line 196 "compose.c"
       $118 = HEAP32[$117>>2]|0; //@line 196 "compose.c"
       $119 = (_ot_iter_skip($op2_iter,$118)|0); //@line 196 "compose.c"
       $120 = $119&1; //@line 196 "compose.c"
       $op2_next = $120; //@line 196 "compose.c"
      } else {
       $121 = $op2_comp; //@line 197 "compose.c"
       $122 = HEAP32[$121>>2]|0; //@line 197 "compose.c"
       $123 = ($122|0)==(2); //@line 197 "compose.c"
       if ($123) {
        $124 = $op2_comp; //@line 198 "compose.c"
        $125 = (($124) + 4|0); //@line 198 "compose.c"
        ;HEAP32[$op2_delete+0>>2]=HEAP32[$125+0>>2]|0; //@line 198 "compose.c"
        $126 = (($op1_iter) + 8|0); //@line 200 "compose.c"
        $127 = HEAP32[$126>>2]|0; //@line 200 "compose.c"
        $128 = (($op2_iter) + 8|0); //@line 200 "compose.c"
        $129 = HEAP32[$128>>2]|0; //@line 200 "compose.c"
        $130 = $composed; //@line 200 "compose.c"
        ;HEAP32[$op1_skip$byval_copy2+0>>2]=HEAP32[$op1_skip+0>>2]|0; //@line 200 "compose.c"
        ;HEAP32[$op2_delete$byval_copy+0>>2]=HEAP32[$op2_delete+0>>2]|0; //@line 200 "compose.c"
        _ot_compose_skip_delete($p2,$op1_skip$byval_copy2,$127,$op2_delete$byval_copy,$129,$130); //@line 200 "compose.c"
        $131 = HEAP32[$p2>>2]|0; //@line 204 "compose.c"
        $132 = (_ot_iter_skip($op1_iter,$131)|0); //@line 204 "compose.c"
        $133 = $132&1; //@line 204 "compose.c"
        $op1_next = $133; //@line 204 "compose.c"
        $134 = (($p2) + 4|0); //@line 205 "compose.c"
        $135 = HEAP32[$134>>2]|0; //@line 205 "compose.c"
        $136 = (_ot_iter_skip($op2_iter,$135)|0); //@line 205 "compose.c"
        $137 = $136&1; //@line 205 "compose.c"
        $op2_next = $137; //@line 205 "compose.c"
       }
      }
     }
    } else {
     $138 = $op1_comp; //@line 207 "compose.c"
     $139 = HEAP32[$138>>2]|0; //@line 207 "compose.c"
     $140 = ($139|0)==(1); //@line 207 "compose.c"
     if ($140) {
      $141 = $op1_comp; //@line 208 "compose.c"
      $142 = (($141) + 4|0); //@line 208 "compose.c"
      ;HEAP32[$op1_insert+0>>2]=HEAP32[$142+0>>2]|0; //@line 208 "compose.c"
      $143 = $op2_comp; //@line 210 "compose.c"
      $144 = HEAP32[$143>>2]|0; //@line 210 "compose.c"
      $145 = ($144|0)==(0); //@line 210 "compose.c"
      if ($145) {
       $146 = $op2_comp; //@line 211 "compose.c"
       $147 = (($146) + 4|0); //@line 211 "compose.c"
       ;HEAP32[$op2_skip3+0>>2]=HEAP32[$147+0>>2]|0; //@line 211 "compose.c"
       $148 = (($op1_iter) + 8|0); //@line 214 "compose.c"
       $149 = HEAP32[$148>>2]|0; //@line 214 "compose.c"
       $150 = (($op2_iter) + 8|0); //@line 214 "compose.c"
       $151 = HEAP32[$150>>2]|0; //@line 214 "compose.c"
       $152 = $composed; //@line 214 "compose.c"
       ;HEAP32[$op1_insert$byval_copy+0>>2]=HEAP32[$op1_insert+0>>2]|0; //@line 214 "compose.c"
       ;HEAP32[$op2_skip3$byval_copy+0>>2]=HEAP32[$op2_skip3+0>>2]|0; //@line 214 "compose.c"
       _ot_compose_insert_skip($p4,$op1_insert$byval_copy,$149,$op2_skip3$byval_copy,$151,$152); //@line 214 "compose.c"
       $153 = HEAP32[$p4>>2]|0; //@line 217 "compose.c"
       $154 = (_ot_iter_skip($op1_iter,$153)|0); //@line 217 "compose.c"
       $155 = $154&1; //@line 217 "compose.c"
       $op1_next = $155; //@line 217 "compose.c"
       $156 = (($p4) + 4|0); //@line 218 "compose.c"
       $157 = HEAP32[$156>>2]|0; //@line 218 "compose.c"
       $158 = (_ot_iter_skip($op2_iter,$157)|0); //@line 218 "compose.c"
       $159 = $158&1; //@line 218 "compose.c"
       $op2_next = $159; //@line 218 "compose.c"
      } else {
       $160 = $op2_comp; //@line 219 "compose.c"
       $161 = HEAP32[$160>>2]|0; //@line 219 "compose.c"
       $162 = ($161|0)==(1); //@line 219 "compose.c"
       if ($162) {
        $163 = $op2_comp; //@line 220 "compose.c"
        $164 = (($163) + 4|0); //@line 220 "compose.c"
        ;HEAP32[$op2_insert5+0>>2]=HEAP32[$164+0>>2]|0; //@line 220 "compose.c"
        $165 = (($op1_iter) + 8|0); //@line 222 "compose.c"
        $166 = HEAP32[$165>>2]|0; //@line 222 "compose.c"
        $167 = (($op2_iter) + 8|0); //@line 222 "compose.c"
        $168 = HEAP32[$167>>2]|0; //@line 222 "compose.c"
        $169 = $composed; //@line 222 "compose.c"
        ;HEAP32[$op1_insert$byval_copy3+0>>2]=HEAP32[$op1_insert+0>>2]|0; //@line 222 "compose.c"
        ;HEAP32[$op2_insert5$byval_copy+0>>2]=HEAP32[$op2_insert5+0>>2]|0; //@line 222 "compose.c"
        _ot_compose_insert_insert($p6,$op1_insert$byval_copy3,$166,$op2_insert5$byval_copy,$168,$169); //@line 222 "compose.c"
        $170 = HEAP32[$p6>>2]|0; //@line 226 "compose.c"
        $171 = (_ot_iter_skip($op1_iter,$170)|0); //@line 226 "compose.c"
        $172 = $171&1; //@line 226 "compose.c"
        $op1_next = $172; //@line 226 "compose.c"
        $173 = (($p6) + 4|0); //@line 227 "compose.c"
        $174 = HEAP32[$173>>2]|0; //@line 227 "compose.c"
        $175 = (_ot_iter_skip($op2_iter,$174)|0); //@line 227 "compose.c"
        $176 = $175&1; //@line 227 "compose.c"
        $op2_next = $176; //@line 227 "compose.c"
       } else {
        $177 = $op2_comp; //@line 228 "compose.c"
        $178 = HEAP32[$177>>2]|0; //@line 228 "compose.c"
        $179 = ($178|0)==(2); //@line 228 "compose.c"
        if ($179) {
         $180 = $op2_comp; //@line 229 "compose.c"
         $181 = (($180) + 4|0); //@line 229 "compose.c"
         ;HEAP32[$op2_delete7+0>>2]=HEAP32[$181+0>>2]|0; //@line 229 "compose.c"
         $182 = (($op1_iter) + 8|0); //@line 231 "compose.c"
         $183 = HEAP32[$182>>2]|0; //@line 231 "compose.c"
         $184 = (($op2_iter) + 8|0); //@line 231 "compose.c"
         $185 = HEAP32[$184>>2]|0; //@line 231 "compose.c"
         ;HEAP32[$op1_insert$byval_copy4+0>>2]=HEAP32[$op1_insert+0>>2]|0; //@line 231 "compose.c"
         ;HEAP32[$op2_delete7$byval_copy+0>>2]=HEAP32[$op2_delete7+0>>2]|0; //@line 231 "compose.c"
         _ot_compose_insert_delete($p8,$op1_insert$byval_copy4,$183,$op2_delete7$byval_copy,$185); //@line 231 "compose.c"
         $186 = HEAP32[$p8>>2]|0; //@line 234 "compose.c"
         $187 = (_ot_iter_skip($op1_iter,$186)|0); //@line 234 "compose.c"
         $188 = $187&1; //@line 234 "compose.c"
         $op1_next = $188; //@line 234 "compose.c"
         $189 = (($p8) + 4|0); //@line 235 "compose.c"
         $190 = HEAP32[$189>>2]|0; //@line 235 "compose.c"
         $191 = (_ot_iter_skip($op2_iter,$190)|0); //@line 235 "compose.c"
         $192 = $191&1; //@line 235 "compose.c"
         $op2_next = $192; //@line 235 "compose.c"
        }
       }
      }
     } else {
      $193 = $op1_comp; //@line 237 "compose.c"
      $194 = HEAP32[$193>>2]|0; //@line 237 "compose.c"
      $195 = ($194|0)==(2); //@line 237 "compose.c"
      if ($195) {
       $196 = $op1_comp; //@line 238 "compose.c"
       $197 = (($196) + 4|0); //@line 238 "compose.c"
       ;HEAP32[$op1_delete+0>>2]=HEAP32[$197+0>>2]|0; //@line 238 "compose.c"
       $198 = (($op1_iter) + 8|0); //@line 240 "compose.c"
       $199 = HEAP32[$198>>2]|0; //@line 240 "compose.c"
       $200 = $composed; //@line 240 "compose.c"
       ;HEAP32[$op1_delete$byval_copy+0>>2]=HEAP32[$op1_delete+0>>2]|0; //@line 240 "compose.c"
       _ot_compose_delete($p9,$op1_delete$byval_copy,$199,$200); //@line 240 "compose.c"
       $201 = HEAP32[$p9>>2]|0; //@line 242 "compose.c"
       $202 = (_ot_iter_skip($op1_iter,$201)|0); //@line 242 "compose.c"
       $203 = $202&1; //@line 242 "compose.c"
       $op1_next = $203; //@line 242 "compose.c"
       $204 = (($p9) + 4|0); //@line 243 "compose.c"
       $205 = HEAP32[$204>>2]|0; //@line 243 "compose.c"
       $206 = (_ot_iter_skip($op2_iter,$205)|0); //@line 243 "compose.c"
       $207 = $206&1; //@line 243 "compose.c"
       $op2_next = $207; //@line 243 "compose.c"
      }
     }
    }
   }
  }
 }
 if ((label|0) == 13) {
  ___assert_fail((488|0),(536|0),145,(552|0)); //@line 145 "compose.c"
  // unreachable; //@line 145 "compose.c"
 }
 else if ((label|0) == 22) {
  $65 = $composed; //@line 159 "compose.c"
  _ot_free_op($65); //@line 159 "compose.c"
  $0 = 0; //@line 160 "compose.c"
  $209 = $0; //@line 248 "compose.c"
  STACKTOP = sp;return ($209|0); //@line 248 "compose.c"
 }
 else if ((label|0) == 30) {
  ___assert_fail((488|0),(536|0),164,(552|0)); //@line 164 "compose.c"
  // unreachable; //@line 164 "compose.c"
 }
 else if ((label|0) == 33) {
  $81 = $composed; //@line 173 "compose.c"
  _ot_free_op($81); //@line 173 "compose.c"
  $0 = 0; //@line 174 "compose.c"
  $209 = $0; //@line 248 "compose.c"
  STACKTOP = sp;return ($209|0); //@line 248 "compose.c"
 }
 else if ((label|0) == 63) {
  $208 = $composed; //@line 247 "compose.c"
  $0 = $208; //@line 247 "compose.c"
  $209 = $0; //@line 248 "compose.c"
  STACKTOP = sp;return ($209|0); //@line 248 "compose.c"
 }
 return 0|0;
}
function _ot_compose_skip_skip($agg$result,$skip1,$offset1,$skip2,$offset2,$composed) {
 $agg$result = $agg$result|0;
 $skip1 = $skip1|0;
 $offset1 = $offset1|0;
 $skip2 = $skip2|0;
 $offset2 = $offset2|0;
 $composed = $composed|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $min_len = 0, $skip1_count = 0, $skip2_count = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $offset1;
 $1 = $offset2;
 $2 = $composed;
 $3 = HEAP32[$skip1>>2]|0; //@line 20 "compose.c"
 $4 = $0; //@line 20 "compose.c"
 $5 = (($3) - ($4))|0; //@line 20 "compose.c"
 $skip1_count = $5; //@line 20 "compose.c"
 $6 = HEAP32[$skip2>>2]|0; //@line 21 "compose.c"
 $7 = $1; //@line 21 "compose.c"
 $8 = (($6) - ($7))|0; //@line 21 "compose.c"
 $skip2_count = $8; //@line 21 "compose.c"
 $9 = $skip1_count; //@line 22 "compose.c"
 $10 = $skip2_count; //@line 22 "compose.c"
 $11 = (_min($9,$10)|0); //@line 22 "compose.c"
 $min_len = $11; //@line 22 "compose.c"
 $12 = $2; //@line 24 "compose.c"
 $13 = $min_len; //@line 24 "compose.c"
 _ot_skip($12,$13); //@line 24 "compose.c"
 $14 = $min_len; //@line 26 "compose.c"
 HEAP32[$agg$result>>2] = $14; //@line 26 "compose.c"
 $15 = (($agg$result) + 4|0); //@line 26 "compose.c"
 $16 = $min_len; //@line 26 "compose.c"
 HEAP32[$15>>2] = $16; //@line 26 "compose.c"
 STACKTOP = sp;return; //@line 26 "compose.c"
}
function _ot_compose_skip_insert($agg$result,$skip,$skip_offset,$insert,$insert_offset,$composed) {
 $agg$result = $agg$result|0;
 $skip = $skip|0;
 $skip_offset = $skip_offset|0;
 $insert = $insert|0;
 $insert_offset = $insert_offset|0;
 $composed = $composed|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $insert_len = 0, $min_len = 0, $skip_len = 0, $substr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $skip_offset;
 $1 = $insert_offset;
 $2 = $composed;
 $3 = HEAP32[$insert>>2]|0; //@line 33 "compose.c"
 $4 = (_strlen(($3|0))|0); //@line 33 "compose.c"
 $5 = $1; //@line 33 "compose.c"
 $6 = (($4) - ($5))|0; //@line 33 "compose.c"
 $insert_len = $6; //@line 33 "compose.c"
 $7 = HEAP32[$skip>>2]|0; //@line 34 "compose.c"
 $8 = $0; //@line 34 "compose.c"
 $9 = (($7) - ($8))|0; //@line 34 "compose.c"
 $skip_len = $9; //@line 34 "compose.c"
 $10 = $skip_len; //@line 35 "compose.c"
 $11 = $insert_len; //@line 35 "compose.c"
 $12 = (_min($10,$11)|0); //@line 35 "compose.c"
 $min_len = $12; //@line 35 "compose.c"
 $13 = $min_len; //@line 37 "compose.c"
 $14 = $13; //@line 37 "compose.c"
 $15 = (($14) + 1)|0; //@line 37 "compose.c"
 $16 = (_malloc($15)|0); //@line 37 "compose.c"
 $substr = $16; //@line 37 "compose.c"
 $17 = $substr; //@line 38 "compose.c"
 $18 = HEAP32[$insert>>2]|0; //@line 38 "compose.c"
 $19 = $1; //@line 38 "compose.c"
 $20 = (($18) + ($19)|0); //@line 38 "compose.c"
 $21 = $min_len; //@line 38 "compose.c"
 _memcpy(($17|0),($20|0),($21|0))|0; //@line 38 "compose.c"
 $22 = $min_len; //@line 39 "compose.c"
 $23 = $substr; //@line 39 "compose.c"
 $24 = (($23) + ($22)|0); //@line 39 "compose.c"
 HEAP8[$24>>0] = 0; //@line 39 "compose.c"
 $25 = $2; //@line 40 "compose.c"
 $26 = $substr; //@line 40 "compose.c"
 _ot_insert($25,$26); //@line 40 "compose.c"
 $27 = $substr; //@line 41 "compose.c"
 _free($27); //@line 41 "compose.c"
 HEAP32[$agg$result>>2] = 0; //@line 43 "compose.c"
 $28 = (($agg$result) + 4|0); //@line 43 "compose.c"
 $29 = $min_len; //@line 43 "compose.c"
 HEAP32[$28>>2] = $29; //@line 43 "compose.c"
 STACKTOP = sp;return; //@line 43 "compose.c"
}
function _ot_compose_skip_delete($agg$result,$skip,$skip_offset,$delete,$delete_offset,$composed) {
 $agg$result = $agg$result|0;
 $skip = $skip|0;
 $skip_offset = $skip_offset|0;
 $delete = $delete|0;
 $delete_offset = $delete_offset|0;
 $composed = $composed|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $delete_len = 0, $min_len = 0, $skip_len = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $skip_offset;
 $1 = $delete_offset;
 $2 = $composed;
 $3 = HEAP32[$skip>>2]|0; //@line 50 "compose.c"
 $4 = $0; //@line 50 "compose.c"
 $5 = (($3) - ($4))|0; //@line 50 "compose.c"
 $skip_len = $5; //@line 50 "compose.c"
 $6 = HEAP32[$delete>>2]|0; //@line 51 "compose.c"
 $7 = $1; //@line 51 "compose.c"
 $8 = (($6) - ($7))|0; //@line 51 "compose.c"
 $delete_len = $8; //@line 51 "compose.c"
 $9 = $skip_len; //@line 52 "compose.c"
 $10 = $delete_len; //@line 52 "compose.c"
 $11 = (_min($9,$10)|0); //@line 52 "compose.c"
 $min_len = $11; //@line 52 "compose.c"
 $12 = $2; //@line 54 "compose.c"
 $13 = $min_len; //@line 54 "compose.c"
 _ot_delete($12,$13); //@line 54 "compose.c"
 $14 = $min_len; //@line 56 "compose.c"
 HEAP32[$agg$result>>2] = $14; //@line 56 "compose.c"
 $15 = (($agg$result) + 4|0); //@line 56 "compose.c"
 $16 = $min_len; //@line 56 "compose.c"
 HEAP32[$15>>2] = $16; //@line 56 "compose.c"
 STACKTOP = sp;return; //@line 56 "compose.c"
}
function _ot_compose_insert_skip($agg$result,$insert,$insert_offset,$skip,$skip_offset,$composed) {
 $agg$result = $agg$result|0;
 $insert = $insert|0;
 $insert_offset = $insert_offset|0;
 $skip = $skip|0;
 $skip_offset = $skip_offset|0;
 $composed = $composed|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $insert_len = 0, $min_len = 0, $skip_len = 0, $substr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $insert_offset;
 $1 = $skip_offset;
 $2 = $composed;
 $3 = HEAP32[$insert>>2]|0; //@line 63 "compose.c"
 $4 = (_strlen(($3|0))|0); //@line 63 "compose.c"
 $5 = $0; //@line 63 "compose.c"
 $6 = (($4) - ($5))|0; //@line 63 "compose.c"
 $insert_len = $6; //@line 63 "compose.c"
 $7 = HEAP32[$skip>>2]|0; //@line 64 "compose.c"
 $8 = $1; //@line 64 "compose.c"
 $9 = (($7) - ($8))|0; //@line 64 "compose.c"
 $skip_len = $9; //@line 64 "compose.c"
 $10 = $skip_len; //@line 65 "compose.c"
 $11 = $insert_len; //@line 65 "compose.c"
 $12 = (_min($10,$11)|0); //@line 65 "compose.c"
 $min_len = $12; //@line 65 "compose.c"
 $13 = $min_len; //@line 67 "compose.c"
 $14 = $13; //@line 67 "compose.c"
 $15 = (($14) + 1)|0; //@line 67 "compose.c"
 $16 = (_malloc($15)|0); //@line 67 "compose.c"
 $substr = $16; //@line 67 "compose.c"
 $17 = $substr; //@line 68 "compose.c"
 $18 = HEAP32[$insert>>2]|0; //@line 68 "compose.c"
 $19 = $0; //@line 68 "compose.c"
 $20 = (($18) + ($19)|0); //@line 68 "compose.c"
 $21 = $min_len; //@line 68 "compose.c"
 _memcpy(($17|0),($20|0),($21|0))|0; //@line 68 "compose.c"
 $22 = $min_len; //@line 69 "compose.c"
 $23 = $substr; //@line 69 "compose.c"
 $24 = (($23) + ($22)|0); //@line 69 "compose.c"
 HEAP8[$24>>0] = 0; //@line 69 "compose.c"
 $25 = $2; //@line 70 "compose.c"
 $26 = $substr; //@line 70 "compose.c"
 _ot_insert($25,$26); //@line 70 "compose.c"
 $27 = $substr; //@line 71 "compose.c"
 _free($27); //@line 71 "compose.c"
 $28 = $min_len; //@line 73 "compose.c"
 HEAP32[$agg$result>>2] = $28; //@line 73 "compose.c"
 $29 = (($agg$result) + 4|0); //@line 73 "compose.c"
 $30 = $min_len; //@line 73 "compose.c"
 HEAP32[$29>>2] = $30; //@line 73 "compose.c"
 STACKTOP = sp;return; //@line 73 "compose.c"
}
function _ot_compose_insert_insert($agg$result,$insert1,$offset1,$insert2,$offset2,$composed) {
 $agg$result = $agg$result|0;
 $insert1 = $insert1|0;
 $offset1 = $offset1|0;
 $insert2 = $insert2|0;
 $offset2 = $offset2|0;
 $composed = $composed|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $insert1_len = 0, $insert2_len = 0, $min_len = 0, $substr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $offset1;
 $1 = $offset2;
 $2 = $composed;
 $3 = HEAP32[$insert1>>2]|0; //@line 80 "compose.c"
 $4 = (_strlen(($3|0))|0); //@line 80 "compose.c"
 $5 = $0; //@line 80 "compose.c"
 $6 = (($4) - ($5))|0; //@line 80 "compose.c"
 $insert1_len = $6; //@line 80 "compose.c"
 $7 = HEAP32[$insert2>>2]|0; //@line 81 "compose.c"
 $8 = (_strlen(($7|0))|0); //@line 81 "compose.c"
 $9 = $1; //@line 81 "compose.c"
 $10 = (($8) - ($9))|0; //@line 81 "compose.c"
 $insert2_len = $10; //@line 81 "compose.c"
 $11 = $insert1_len; //@line 82 "compose.c"
 $12 = $insert2_len; //@line 82 "compose.c"
 $13 = (_min($11,$12)|0); //@line 82 "compose.c"
 $min_len = $13; //@line 82 "compose.c"
 $14 = $min_len; //@line 84 "compose.c"
 $15 = $14; //@line 84 "compose.c"
 $16 = (($15) + 1)|0; //@line 84 "compose.c"
 $17 = (_malloc($16)|0); //@line 84 "compose.c"
 $substr = $17; //@line 84 "compose.c"
 $18 = $substr; //@line 85 "compose.c"
 $19 = HEAP32[$insert2>>2]|0; //@line 85 "compose.c"
 $20 = $1; //@line 85 "compose.c"
 $21 = (($19) + ($20)|0); //@line 85 "compose.c"
 $22 = $min_len; //@line 85 "compose.c"
 _memcpy(($18|0),($21|0),($22|0))|0; //@line 85 "compose.c"
 $23 = $min_len; //@line 86 "compose.c"
 $24 = $substr; //@line 86 "compose.c"
 $25 = (($24) + ($23)|0); //@line 86 "compose.c"
 HEAP8[$25>>0] = 0; //@line 86 "compose.c"
 $26 = $2; //@line 87 "compose.c"
 $27 = $substr; //@line 87 "compose.c"
 _ot_insert($26,$27); //@line 87 "compose.c"
 $28 = $substr; //@line 88 "compose.c"
 _free($28); //@line 88 "compose.c"
 HEAP32[$agg$result>>2] = 0; //@line 90 "compose.c"
 $29 = (($agg$result) + 4|0); //@line 90 "compose.c"
 $30 = $min_len; //@line 90 "compose.c"
 HEAP32[$29>>2] = $30; //@line 90 "compose.c"
 STACKTOP = sp;return; //@line 90 "compose.c"
}
function _ot_compose_insert_delete($agg$result,$ins,$ins_offset,$del,$del_offset) {
 $agg$result = $agg$result|0;
 $ins = $ins|0;
 $ins_offset = $ins_offset|0;
 $del = $del|0;
 $del_offset = $del_offset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $del_len = 0, $ins_len = 0, $min_len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $ins_offset;
 $1 = $del_offset;
 $2 = HEAP32[$ins>>2]|0; //@line 96 "compose.c"
 $3 = (_strlen(($2|0))|0); //@line 96 "compose.c"
 $4 = $0; //@line 96 "compose.c"
 $5 = (($3) - ($4))|0; //@line 96 "compose.c"
 $ins_len = $5; //@line 96 "compose.c"
 $6 = HEAP32[$del>>2]|0; //@line 97 "compose.c"
 $7 = $1; //@line 97 "compose.c"
 $8 = (($6) - ($7))|0; //@line 97 "compose.c"
 $del_len = $8; //@line 97 "compose.c"
 $9 = $ins_len; //@line 98 "compose.c"
 $10 = $del_len; //@line 98 "compose.c"
 $11 = (_min($9,$10)|0); //@line 98 "compose.c"
 $min_len = $11; //@line 98 "compose.c"
 $12 = $min_len; //@line 100 "compose.c"
 HEAP32[$agg$result>>2] = $12; //@line 100 "compose.c"
 $13 = (($agg$result) + 4|0); //@line 100 "compose.c"
 $14 = $min_len; //@line 100 "compose.c"
 HEAP32[$13>>2] = $14; //@line 100 "compose.c"
 STACKTOP = sp;return; //@line 100 "compose.c"
}
function _ot_compose_delete($agg$result,$del,$del_offset,$composed) {
 $agg$result = $agg$result|0;
 $del = $del|0;
 $del_offset = $del_offset|0;
 $composed = $composed|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $del_len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $del_offset;
 $1 = $composed;
 $2 = HEAP32[$del>>2]|0; //@line 106 "compose.c"
 $3 = $0; //@line 106 "compose.c"
 $4 = (($2) - ($3))|0; //@line 106 "compose.c"
 $del_len = $4; //@line 106 "compose.c"
 $5 = $1; //@line 107 "compose.c"
 $6 = $del_len; //@line 107 "compose.c"
 _ot_delete($5,$6); //@line 107 "compose.c"
 $7 = $del_len; //@line 109 "compose.c"
 HEAP32[$agg$result>>2] = $7; //@line 109 "compose.c"
 $8 = (($agg$result) + 4|0); //@line 109 "compose.c"
 HEAP32[$8>>2] = 0; //@line 109 "compose.c"
 STACKTOP = sp;return; //@line 109 "compose.c"
}
function _min($s1,$s2) {
 $s1 = $s1|0;
 $s2 = $s2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $s1;
 $2 = $s2;
 $3 = $1; //@line 9 "compose.c"
 $4 = $2; //@line 9 "compose.c"
 $5 = ($3>>>0)<($4>>>0); //@line 9 "compose.c"
 if ($5) {
  $6 = $1; //@line 10 "compose.c"
  $0 = $6; //@line 10 "compose.c"
 } else {
  $7 = $2; //@line 12 "compose.c"
  $0 = $7; //@line 12 "compose.c"
 }
 $8 = $0; //@line 14 "compose.c"
 STACKTOP = sp;return ($8|0); //@line 14 "compose.c"
}
function _ot_new_doc() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $doc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = (_malloc(20)|0); //@line 4 "doc.c"
 $doc = $0; //@line 4 "doc.c"
 $1 = $doc; //@line 5 "doc.c"
 _array_init($1,60); //@line 5 "doc.c"
 $2 = $doc; //@line 6 "doc.c"
 $3 = (($2) + 16|0); //@line 6 "doc.c"
 HEAP32[$3>>2] = 0; //@line 6 "doc.c"
 $4 = $doc; //@line 7 "doc.c"
 STACKTOP = sp;return ($4|0); //@line 7 "doc.c"
}
function _ot_doc_append($doc,$op) {
 $doc = $doc|0;
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $head = 0, $history = 0, $len = 0, $new_composed = 0, $prev = 0, $zero = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $zero = sp + 32|0;
 $1 = $doc;
 $2 = $op;
 $3 = $1; //@line 36 "doc.c"
 $4 = (_array_append($3)|0); //@line 36 "doc.c"
 $head = $4; //@line 36 "doc.c"
 $5 = $head; //@line 37 "doc.c"
 $6 = $2; //@line 37 "doc.c"
 $7 = HEAP32[$6>>2]|0; //@line 37 "doc.c"
 dest=$5+0|0; src=$7+0|0; stop=dest+60|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0)); //@line 37 "doc.c"
 $8 = $1; //@line 39 "doc.c"
 $9 = HEAP32[$8>>2]|0; //@line 39 "doc.c"
 $len = $9; //@line 39 "doc.c"
 $10 = $len; //@line 40 "doc.c"
 $11 = ($10>>>0)>(1); //@line 40 "doc.c"
 if ($11) {
  $12 = $1; //@line 41 "doc.c"
  $13 = (($12) + 12|0); //@line 41 "doc.c"
  $14 = HEAP32[$13>>2]|0; //@line 41 "doc.c"
  $history = $14; //@line 41 "doc.c"
  $15 = $len; //@line 42 "doc.c"
  $16 = (($15) - 2)|0; //@line 42 "doc.c"
  $17 = $history; //@line 42 "doc.c"
  $18 = (($17) + (($16*60)|0)|0); //@line 42 "doc.c"
  $prev = $18; //@line 42 "doc.c"
  $19 = $head; //@line 43 "doc.c"
  $20 = (($19) + 4|0); //@line 43 "doc.c"
  $21 = $prev; //@line 43 "doc.c"
  $22 = (($21) + 24|0); //@line 43 "doc.c"
  dest=$20+0|0; src=$22+0|0; stop=dest+20|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0)); //@line 43 "doc.c"
 } else {
  dest=$zero+0|0; stop=dest+20|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0)); //@line 45 "doc.c"
  $23 = $head; //@line 46 "doc.c"
  $24 = (($23) + 4|0); //@line 46 "doc.c"
  dest=$24+0|0; src=$zero+0|0; stop=dest+20|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0)); //@line 46 "doc.c"
 }
 $25 = $1; //@line 54 "doc.c"
 $26 = HEAP32[$25>>2]|0; //@line 54 "doc.c"
 $27 = ($26>>>0)<=(2); //@line 54 "doc.c"
 if ($27) {
  $28 = $1; //@line 55 "doc.c"
  $29 = (($28) + 12|0); //@line 55 "doc.c"
  $30 = HEAP32[$29>>2]|0; //@line 55 "doc.c"
  $31 = $1; //@line 55 "doc.c"
  $32 = (($31) + 16|0); //@line 55 "doc.c"
  HEAP32[$32>>2] = $30; //@line 55 "doc.c"
 }
 $33 = $1; //@line 60 "doc.c"
 $34 = HEAP32[$33>>2]|0; //@line 60 "doc.c"
 $35 = ($34>>>0)>(1); //@line 60 "doc.c"
 if ($35) {
  $36 = $1; //@line 61 "doc.c"
  $37 = (($36) + 16|0); //@line 61 "doc.c"
  $38 = HEAP32[$37>>2]|0; //@line 61 "doc.c"
  $39 = $head; //@line 61 "doc.c"
  $40 = (_ot_compose($38,$39)|0); //@line 61 "doc.c"
  $new_composed = $40; //@line 61 "doc.c"
  $41 = $new_composed; //@line 62 "doc.c"
  $42 = ($41|0)==(0|0); //@line 62 "doc.c"
  if ($42) {
   $43 = $1; //@line 63 "doc.c"
   $44 = HEAP32[$43>>2]|0; //@line 63 "doc.c"
   $45 = (($44) + -1)|0; //@line 63 "doc.c"
   HEAP32[$43>>2] = $45; //@line 63 "doc.c"
   $0 = 8; //@line 64 "doc.c"
   $68 = $0; //@line 88 "doc.c"
   STACKTOP = sp;return ($68|0); //@line 88 "doc.c"
  }
  $46 = $1; //@line 71 "doc.c"
  $47 = HEAP32[$46>>2]|0; //@line 71 "doc.c"
  $48 = ($47>>>0)>(2); //@line 71 "doc.c"
  if ($48) {
   $49 = $1; //@line 72 "doc.c"
   $50 = (($49) + 16|0); //@line 72 "doc.c"
   $51 = HEAP32[$50>>2]|0; //@line 72 "doc.c"
   _ot_free_op($51); //@line 72 "doc.c"
  }
  $52 = $new_composed; //@line 74 "doc.c"
  $53 = $1; //@line 74 "doc.c"
  $54 = (($53) + 16|0); //@line 74 "doc.c"
  HEAP32[$54>>2] = $52; //@line 74 "doc.c"
 }
 $55 = $2; //@line 80 "doc.c"
 $56 = HEAP32[$55>>2]|0; //@line 80 "doc.c"
 _free($56); //@line 80 "doc.c"
 $57 = $head; //@line 81 "doc.c"
 $58 = $2; //@line 81 "doc.c"
 HEAP32[$58>>2] = $57; //@line 81 "doc.c"
 $59 = $1; //@line 85 "doc.c"
 $60 = (($59) + 16|0); //@line 85 "doc.c"
 $61 = HEAP32[$60>>2]|0; //@line 85 "doc.c"
 _hash_op($61); //@line 85 "doc.c"
 $62 = $head; //@line 86 "doc.c"
 $63 = (($62) + 24|0); //@line 86 "doc.c"
 $64 = $1; //@line 86 "doc.c"
 $65 = (($64) + 16|0); //@line 86 "doc.c"
 $66 = HEAP32[$65>>2]|0; //@line 86 "doc.c"
 $67 = (($66) + 24|0); //@line 86 "doc.c"
 dest=$63+0|0; src=$67+0|0; stop=dest+20|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0)); //@line 86 "doc.c"
 $0 = 0; //@line 88 "doc.c"
 $68 = $0; //@line 88 "doc.c"
 STACKTOP = sp;return ($68|0); //@line 88 "doc.c"
}
function _ot_doc_compose_after($doc,$after) {
 $doc = $doc|0;
 $after = $after|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $after_null = 0, $composed = 0, $found = 0, $history = 0, $i = 0, $i1 = 0, $i2 = 0, $op = 0, $ops = 0, $start = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $history = sp + 32|0;
 $1 = $doc;
 $2 = $after;
 $3 = $1; //@line 92 "doc.c"
 ;HEAP32[$history+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$history+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$history+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$history+12>>2]=HEAP32[$3+12>>2]|0; //@line 92 "doc.c"
 $4 = HEAP32[$history>>2]|0; //@line 93 "doc.c"
 $5 = ($4|0)==(0); //@line 93 "doc.c"
 if ($5) {
  $0 = 0; //@line 94 "doc.c"
  $60 = $0; //@line 135 "doc.c"
  STACKTOP = sp;return ($60|0); //@line 135 "doc.c"
 }
 $after_null = 1; //@line 97 "doc.c"
 $i = 0; //@line 98 "doc.c"
 while(1) {
  $6 = $i; //@line 98 "doc.c"
  $7 = ($6|0)<(20); //@line 98 "doc.c"
  if (!($7)) {
   break;
  }
  $8 = $i; //@line 99 "doc.c"
  $9 = $2; //@line 99 "doc.c"
  $10 = (($9) + ($8)|0); //@line 99 "doc.c"
  $11 = HEAP8[$10>>0]|0; //@line 99 "doc.c"
  $12 = $11&255; //@line 99 "doc.c"
  $13 = ($12|0)!=(0); //@line 99 "doc.c"
  if ($13) {
   label = 6;
   break;
  }
  $14 = $i; //@line 98 "doc.c"
  $15 = (($14) + 1)|0; //@line 98 "doc.c"
  $i = $15; //@line 98 "doc.c"
 }
 if ((label|0) == 6) {
  $after_null = 0; //@line 100 "doc.c"
 }
 $found = 0; //@line 105 "doc.c"
 $start = 0; //@line 106 "doc.c"
 $16 = (($history) + 12|0); //@line 107 "doc.c"
 $17 = HEAP32[$16>>2]|0; //@line 107 "doc.c"
 $ops = $17; //@line 107 "doc.c"
 $18 = $after_null; //@line 108 "doc.c"
 $19 = $18&1; //@line 108 "doc.c"
 do {
  if (!($19)) {
   $20 = HEAP32[$history>>2]|0; //@line 109 "doc.c"
   $21 = (($20) - 1)|0; //@line 109 "doc.c"
   $i1 = $21; //@line 109 "doc.c"
   while(1) {
    $22 = $i1; //@line 109 "doc.c"
    $23 = HEAP32[$history>>2]|0; //@line 109 "doc.c"
    $24 = ($22>>>0)<($23>>>0); //@line 109 "doc.c"
    if (!($24)) {
     break;
    }
    $25 = $ops; //@line 110 "doc.c"
    $26 = $i1; //@line 110 "doc.c"
    $27 = (($25) + (($26*60)|0)|0); //@line 110 "doc.c"
    $op = $27; //@line 110 "doc.c"
    $28 = $op; //@line 111 "doc.c"
    $29 = (($28) + 24|0); //@line 111 "doc.c"
    $30 = $2; //@line 111 "doc.c"
    $31 = (_memcmp($29,$30,20)|0); //@line 111 "doc.c"
    $32 = ($31|0)==(0); //@line 111 "doc.c"
    if ($32) {
     label = 13;
     break;
    }
    $35 = $i1; //@line 109 "doc.c"
    $36 = (($35) + -1)|0; //@line 109 "doc.c"
    $i1 = $36; //@line 109 "doc.c"
   }
   if ((label|0) == 13) {
    $33 = $i1; //@line 112 "doc.c"
    $34 = (($33) + 1)|0; //@line 112 "doc.c"
    $start = $34; //@line 112 "doc.c"
    $found = 1; //@line 113 "doc.c"
   }
   $37 = $found; //@line 118 "doc.c"
   $38 = $37&1; //@line 118 "doc.c"
   if ($38) {
    break;
   }
   $0 = 0; //@line 119 "doc.c"
   $60 = $0; //@line 135 "doc.c"
   STACKTOP = sp;return ($60|0); //@line 135 "doc.c"
  }
 } while(0);
 $39 = $ops; //@line 123 "doc.c"
 $40 = $start; //@line 123 "doc.c"
 $41 = (($39) + (($40*60)|0)|0); //@line 123 "doc.c"
 $42 = (_ot_dup_op($41)|0); //@line 123 "doc.c"
 $composed = $42; //@line 123 "doc.c"
 $43 = $start; //@line 125 "doc.c"
 $44 = (($43) + 1)|0; //@line 125 "doc.c"
 $i2 = $44; //@line 125 "doc.c"
 while(1) {
  $45 = $i2; //@line 125 "doc.c"
  $46 = HEAP32[$history>>2]|0; //@line 125 "doc.c"
  $47 = ($45>>>0)<($46>>>0); //@line 125 "doc.c"
  if (!($47)) {
   label = 25;
   break;
  }
  $48 = $composed; //@line 126 "doc.c"
  $49 = $ops; //@line 126 "doc.c"
  $50 = $i2; //@line 126 "doc.c"
  $51 = (($49) + (($50*60)|0)|0); //@line 126 "doc.c"
  $52 = (_ot_compose($48,$51)|0); //@line 126 "doc.c"
  $temp = $52; //@line 126 "doc.c"
  $53 = $composed; //@line 127 "doc.c"
  _ot_free_op($53); //@line 127 "doc.c"
  $54 = $temp; //@line 128 "doc.c"
  $composed = $54; //@line 128 "doc.c"
  $55 = $composed; //@line 129 "doc.c"
  $56 = ($55|0)==(0|0); //@line 129 "doc.c"
  if ($56) {
   label = 22;
   break;
  }
  $57 = $i2; //@line 125 "doc.c"
  $58 = (($57) + 1)|0; //@line 125 "doc.c"
  $i2 = $58; //@line 125 "doc.c"
 }
 if ((label|0) == 22) {
  $0 = 0; //@line 130 "doc.c"
  $60 = $0; //@line 135 "doc.c"
  STACKTOP = sp;return ($60|0); //@line 135 "doc.c"
 }
 else if ((label|0) == 25) {
  $59 = $composed; //@line 134 "doc.c"
  $0 = $59; //@line 134 "doc.c"
  $60 = $0; //@line 135 "doc.c"
  STACKTOP = sp;return ($60|0); //@line 135 "doc.c"
 }
 return 0|0;
}
function _hextoa($a,$alen,$hex,$hexlen) {
 $a = $a|0;
 $alen = $alen|0;
 $hex = $hex|0;
 $hexlen = $hexlen|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $c = 0;
 var $i = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $a;
 $1 = $alen;
 $2 = $hex;
 $3 = $hexlen;
 $4 = $1; //@line 5 "hex.c"
 $5 = $3; //@line 5 "hex.c"
 $6 = (($5>>>0) / 2)&-1; //@line 5 "hex.c"
 $7 = (($4) - ($6))|0; //@line 5 "hex.c"
 $j = $7; //@line 5 "hex.c"
 $i = 0; //@line 6 "hex.c"
 while(1) {
  $8 = $i; //@line 6 "hex.c"
  $9 = $3; //@line 6 "hex.c"
  $10 = ($8>>>0)<($9>>>0); //@line 6 "hex.c"
  if (!($10)) {
   break;
  }
  $11 = $i; //@line 8 "hex.c"
  $12 = $2; //@line 8 "hex.c"
  $13 = (($12) + ($11)|0); //@line 8 "hex.c"
  $14 = HEAP8[$13>>0]|0; //@line 8 "hex.c"
  $15 = $14&255; //@line 8 "hex.c"
  $16 = ($15|0)>=(97); //@line 8 "hex.c"
  if ($16) {
   $17 = $i; //@line 9 "hex.c"
   $18 = $2; //@line 9 "hex.c"
   $19 = (($18) + ($17)|0); //@line 9 "hex.c"
   $20 = HEAP8[$19>>0]|0; //@line 9 "hex.c"
   $21 = $20&255; //@line 9 "hex.c"
   $22 = (($21) - 87)|0; //@line 9 "hex.c"
   $23 = $22 << 4; //@line 9 "hex.c"
   $24 = $23&255; //@line 9 "hex.c"
   $c = $24; //@line 9 "hex.c"
  } else {
   $25 = $i; //@line 10 "hex.c"
   $26 = $2; //@line 10 "hex.c"
   $27 = (($26) + ($25)|0); //@line 10 "hex.c"
   $28 = HEAP8[$27>>0]|0; //@line 10 "hex.c"
   $29 = $28&255; //@line 10 "hex.c"
   $30 = ($29|0)>=(65); //@line 10 "hex.c"
   if ($30) {
    $31 = $i; //@line 11 "hex.c"
    $32 = $2; //@line 11 "hex.c"
    $33 = (($32) + ($31)|0); //@line 11 "hex.c"
    $34 = HEAP8[$33>>0]|0; //@line 11 "hex.c"
    $35 = $34&255; //@line 11 "hex.c"
    $36 = (($35) - 55)|0; //@line 11 "hex.c"
    $37 = $36 << 4; //@line 11 "hex.c"
    $38 = $37&255; //@line 11 "hex.c"
    $c = $38; //@line 11 "hex.c"
   } else {
    $39 = $i; //@line 13 "hex.c"
    $40 = $2; //@line 13 "hex.c"
    $41 = (($40) + ($39)|0); //@line 13 "hex.c"
    $42 = HEAP8[$41>>0]|0; //@line 13 "hex.c"
    $43 = $42&255; //@line 13 "hex.c"
    $44 = (($43) - 48)|0; //@line 13 "hex.c"
    $45 = $44 << 4; //@line 13 "hex.c"
    $46 = $45&255; //@line 13 "hex.c"
    $c = $46; //@line 13 "hex.c"
   }
  }
  $47 = $i; //@line 16 "hex.c"
  $48 = (($47) + 1)|0; //@line 16 "hex.c"
  $i = $48; //@line 16 "hex.c"
  $49 = $i; //@line 18 "hex.c"
  $50 = $2; //@line 18 "hex.c"
  $51 = (($50) + ($49)|0); //@line 18 "hex.c"
  $52 = HEAP8[$51>>0]|0; //@line 18 "hex.c"
  $53 = $52&255; //@line 18 "hex.c"
  $54 = ($53|0)>=(97); //@line 18 "hex.c"
  if ($54) {
   $55 = $i; //@line 19 "hex.c"
   $56 = $2; //@line 19 "hex.c"
   $57 = (($56) + ($55)|0); //@line 19 "hex.c"
   $58 = HEAP8[$57>>0]|0; //@line 19 "hex.c"
   $59 = $58&255; //@line 19 "hex.c"
   $60 = (($59) - 87)|0; //@line 19 "hex.c"
   $61 = $c; //@line 19 "hex.c"
   $62 = $61&255; //@line 19 "hex.c"
   $63 = (($62) + ($60))|0; //@line 19 "hex.c"
   $64 = $63&255; //@line 19 "hex.c"
   $c = $64; //@line 19 "hex.c"
  } else {
   $65 = $i; //@line 20 "hex.c"
   $66 = $2; //@line 20 "hex.c"
   $67 = (($66) + ($65)|0); //@line 20 "hex.c"
   $68 = HEAP8[$67>>0]|0; //@line 20 "hex.c"
   $69 = $68&255; //@line 20 "hex.c"
   $70 = ($69|0)>=(65); //@line 20 "hex.c"
   if ($70) {
    $71 = $i; //@line 21 "hex.c"
    $72 = $2; //@line 21 "hex.c"
    $73 = (($72) + ($71)|0); //@line 21 "hex.c"
    $74 = HEAP8[$73>>0]|0; //@line 21 "hex.c"
    $75 = $74&255; //@line 21 "hex.c"
    $76 = (($75) - 55)|0; //@line 21 "hex.c"
    $77 = $c; //@line 21 "hex.c"
    $78 = $77&255; //@line 21 "hex.c"
    $79 = (($78) + ($76))|0; //@line 21 "hex.c"
    $80 = $79&255; //@line 21 "hex.c"
    $c = $80; //@line 21 "hex.c"
   } else {
    $81 = $i; //@line 23 "hex.c"
    $82 = $2; //@line 23 "hex.c"
    $83 = (($82) + ($81)|0); //@line 23 "hex.c"
    $84 = HEAP8[$83>>0]|0; //@line 23 "hex.c"
    $85 = $84&255; //@line 23 "hex.c"
    $86 = (($85) - 48)|0; //@line 23 "hex.c"
    $87 = $c; //@line 23 "hex.c"
    $88 = $87&255; //@line 23 "hex.c"
    $89 = (($88) + ($86))|0; //@line 23 "hex.c"
    $90 = $89&255; //@line 23 "hex.c"
    $c = $90; //@line 23 "hex.c"
   }
  }
  $91 = $c; //@line 26 "hex.c"
  $92 = $j; //@line 26 "hex.c"
  $93 = $0; //@line 26 "hex.c"
  $94 = (($93) + ($92)|0); //@line 26 "hex.c"
  HEAP8[$94>>0] = $91; //@line 26 "hex.c"
  $95 = $j; //@line 27 "hex.c"
  $96 = (($95) + 1)|0; //@line 27 "hex.c"
  $j = $96; //@line 27 "hex.c"
  $97 = $i; //@line 6 "hex.c"
  $98 = (($97) + 1)|0; //@line 6 "hex.c"
  $i = $98; //@line 6 "hex.c"
 }
 STACKTOP = sp;return 0; //@line 30 "hex.c"
}
function _atohex($hex,$a,$len) {
 $hex = $hex|0;
 $a = $a|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, $high = 0, $i = 0, $j = 0, $low = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $hex;
 $1 = $a;
 $2 = $len;
 $j = 0; //@line 34 "hex.c"
 $i = 0; //@line 35 "hex.c"
 while(1) {
  $3 = $i; //@line 35 "hex.c"
  $4 = $2; //@line 35 "hex.c"
  $5 = ($3>>>0)<($4>>>0); //@line 35 "hex.c"
  if (!($5)) {
   break;
  }
  $6 = $i; //@line 37 "hex.c"
  $7 = $1; //@line 37 "hex.c"
  $8 = (($7) + ($6)|0); //@line 37 "hex.c"
  $9 = HEAP8[$8>>0]|0; //@line 37 "hex.c"
  $10 = $9&255; //@line 37 "hex.c"
  $11 = ($10|0)==(0); //@line 37 "hex.c"
  if ($11) {
   $12 = $j; //@line 37 "hex.c"
   $13 = ($12|0)==(0); //@line 37 "hex.c"
   if ($13) {
    $14 = $i; //@line 37 "hex.c"
    $15 = $2; //@line 37 "hex.c"
    $16 = (($15) - 1)|0; //@line 37 "hex.c"
    $17 = ($14|0)!=($16|0); //@line 37 "hex.c"
    if ($17) {
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
  } else {
   label = 7;
  }
  if ((label|0) == 7) {
   label = 0;
   $18 = $i; //@line 41 "hex.c"
   $19 = $1; //@line 41 "hex.c"
   $20 = (($19) + ($18)|0); //@line 41 "hex.c"
   $21 = HEAP8[$20>>0]|0; //@line 41 "hex.c"
   $22 = $21&255; //@line 41 "hex.c"
   $23 = $22 >> 4; //@line 41 "hex.c"
   $24 = $23&255; //@line 41 "hex.c"
   $high = $24; //@line 41 "hex.c"
   $25 = $i; //@line 42 "hex.c"
   $26 = $1; //@line 42 "hex.c"
   $27 = (($26) + ($25)|0); //@line 42 "hex.c"
   $28 = HEAP8[$27>>0]|0; //@line 42 "hex.c"
   $29 = $28&255; //@line 42 "hex.c"
   $30 = $29 & 15; //@line 42 "hex.c"
   $31 = $30&255; //@line 42 "hex.c"
   $low = $31; //@line 42 "hex.c"
   $32 = $high; //@line 43 "hex.c"
   $33 = $32&255; //@line 43 "hex.c"
   $34 = ($33|0)<=(9); //@line 43 "hex.c"
   if ($34) {
    $35 = $high; //@line 44 "hex.c"
    $36 = $35&255; //@line 44 "hex.c"
    $37 = (($36) + 48)|0; //@line 44 "hex.c"
    $38 = $37&255; //@line 44 "hex.c"
    $39 = $j; //@line 44 "hex.c"
    $40 = $0; //@line 44 "hex.c"
    $41 = (($40) + ($39)|0); //@line 44 "hex.c"
    HEAP8[$41>>0] = $38; //@line 44 "hex.c"
   } else {
    $42 = $high; //@line 46 "hex.c"
    $43 = $42&255; //@line 46 "hex.c"
    $44 = (($43) + 87)|0; //@line 46 "hex.c"
    $45 = $44&255; //@line 46 "hex.c"
    $46 = $j; //@line 46 "hex.c"
    $47 = $0; //@line 46 "hex.c"
    $48 = (($47) + ($46)|0); //@line 46 "hex.c"
    HEAP8[$48>>0] = $45; //@line 46 "hex.c"
   }
   $49 = $j; //@line 48 "hex.c"
   $50 = (($49) + 1)|0; //@line 48 "hex.c"
   $j = $50; //@line 48 "hex.c"
   $51 = $low; //@line 50 "hex.c"
   $52 = $51&255; //@line 50 "hex.c"
   $53 = ($52|0)<=(9); //@line 50 "hex.c"
   if ($53) {
    $54 = $low; //@line 51 "hex.c"
    $55 = $54&255; //@line 51 "hex.c"
    $56 = (($55) + 48)|0; //@line 51 "hex.c"
    $57 = $j; //@line 51 "hex.c"
    $58 = $0; //@line 51 "hex.c"
    $59 = (($58) + ($57)|0); //@line 51 "hex.c"
    $60 = HEAP8[$59>>0]|0; //@line 51 "hex.c"
    $61 = $60&255; //@line 51 "hex.c"
    $62 = (($61) + ($56))|0; //@line 51 "hex.c"
    $63 = $62&255; //@line 51 "hex.c"
    HEAP8[$59>>0] = $63; //@line 51 "hex.c"
   } else {
    $64 = $low; //@line 53 "hex.c"
    $65 = $64&255; //@line 53 "hex.c"
    $66 = (($65) + 87)|0; //@line 53 "hex.c"
    $67 = $j; //@line 53 "hex.c"
    $68 = $0; //@line 53 "hex.c"
    $69 = (($68) + ($67)|0); //@line 53 "hex.c"
    $70 = HEAP8[$69>>0]|0; //@line 53 "hex.c"
    $71 = $70&255; //@line 53 "hex.c"
    $72 = (($71) + ($66))|0; //@line 53 "hex.c"
    $73 = $72&255; //@line 53 "hex.c"
    HEAP8[$69>>0] = $73; //@line 53 "hex.c"
   }
   $74 = $j; //@line 55 "hex.c"
   $75 = (($74) + 1)|0; //@line 55 "hex.c"
   $j = $75; //@line 55 "hex.c"
  }
  $76 = $i; //@line 35 "hex.c"
  $77 = (($76) + 1)|0; //@line 35 "hex.c"
  $i = $77; //@line 35 "hex.c"
 }
 $78 = $j; //@line 57 "hex.c"
 $79 = $0; //@line 57 "hex.c"
 $80 = (($79) + ($78)|0); //@line 57 "hex.c"
 HEAP8[$80>>0] = 0; //@line 57 "hex.c"
 STACKTOP = sp;return 0; //@line 59 "hex.c"
}
function _ot_new_op($client_id,$parent) {
 $client_id = $client_id|0;
 $parent = $parent|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $op = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $client_id;
 $1 = $parent;
 $2 = (_malloc(60)|0); //@line 25 "ot.c"
 $op = $2; //@line 25 "ot.c"
 $3 = $0; //@line 26 "ot.c"
 $4 = $op; //@line 26 "ot.c"
 HEAP32[$4>>2] = $3; //@line 26 "ot.c"
 $5 = $op; //@line 27 "ot.c"
 $6 = (($5) + 44|0); //@line 27 "ot.c"
 _array_init($6,36); //@line 27 "ot.c"
 $7 = $op; //@line 28 "ot.c"
 $8 = (($7) + 4|0); //@line 28 "ot.c"
 $9 = $1; //@line 28 "ot.c"
 dest=$8+0|0; src=$9+0|0; stop=dest+20|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0)); //@line 28 "ot.c"
 $10 = $op; //@line 29 "ot.c"
 $11 = (($10) + 24|0); //@line 29 "ot.c"
 dest=$11+0|0; stop=dest+20|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0)); //@line 29 "ot.c"
 $12 = $op; //@line 31 "ot.c"
 STACKTOP = sp;return ($12|0); //@line 31 "ot.c"
}
function _ot_free_op($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $comps = 0, $i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $op;
 $1 = $0; //@line 35 "ot.c"
 $2 = (($1) + 44|0); //@line 35 "ot.c"
 $3 = (($2) + 12|0); //@line 35 "ot.c"
 $4 = HEAP32[$3>>2]|0; //@line 35 "ot.c"
 $comps = $4; //@line 35 "ot.c"
 $i = 0; //@line 36 "ot.c"
 while(1) {
  $5 = $i; //@line 36 "ot.c"
  $6 = $0; //@line 36 "ot.c"
  $7 = (($6) + 44|0); //@line 36 "ot.c"
  $8 = HEAP32[$7>>2]|0; //@line 36 "ot.c"
  $9 = ($5>>>0)<($8>>>0); //@line 36 "ot.c"
  if (!($9)) {
   break;
  }
  $10 = $comps; //@line 37 "ot.c"
  $11 = $i; //@line 37 "ot.c"
  $12 = (($10) + (($11*36)|0)|0); //@line 37 "ot.c"
  _ot_free_comp($12); //@line 37 "ot.c"
  $13 = $i; //@line 36 "ot.c"
  $14 = (($13) + 1)|0; //@line 36 "ot.c"
  $i = $14; //@line 36 "ot.c"
 }
 $15 = $0; //@line 39 "ot.c"
 $16 = (($15) + 44|0); //@line 39 "ot.c"
 _array_free($16); //@line 39 "ot.c"
 $17 = $0; //@line 40 "ot.c"
 _free($17); //@line 40 "ot.c"
 STACKTOP = sp;return; //@line 41 "ot.c"
}
function _ot_free_comp($comp) {
 $comp = $comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $comp;
 $1 = $0; //@line 44 "ot.c"
 $2 = HEAP32[$1>>2]|0; //@line 44 "ot.c"
 if ((($2|0) == 3)) {
  $6 = $0; //@line 49 "ot.c"
  $7 = (($6) + 4|0); //@line 49 "ot.c"
  $8 = HEAP32[$7>>2]|0; //@line 49 "ot.c"
  _free($8); //@line 49 "ot.c"
  STACKTOP = sp;return; //@line 56 "ot.c"
 } else if ((($2|0) == 1)) {
  $3 = $0; //@line 46 "ot.c"
  $4 = (($3) + 4|0); //@line 46 "ot.c"
  $5 = HEAP32[$4>>2]|0; //@line 46 "ot.c"
  _free($5); //@line 46 "ot.c"
  STACKTOP = sp;return; //@line 56 "ot.c"
 } else if ((($2|0) == 5)) {
  $9 = $0; //@line 52 "ot.c"
  $10 = (($9) + 4|0); //@line 52 "ot.c"
  _ot_free_fmtbound($10); //@line 52 "ot.c"
 }
 STACKTOP = sp;return; //@line 56 "ot.c"
}
function _ot_free_fmtbound($fmtbound) {
 $fmtbound = $fmtbound|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $end_data = 0, $i = 0, $i1 = 0, $start_data = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $fmtbound;
 $1 = $0; //@line 9 "ot.c"
 $2 = (($1) + 12|0); //@line 9 "ot.c"
 $3 = HEAP32[$2>>2]|0; //@line 9 "ot.c"
 $start_data = $3; //@line 9 "ot.c"
 $i = 0; //@line 10 "ot.c"
 while(1) {
  $4 = $i; //@line 10 "ot.c"
  $5 = $0; //@line 10 "ot.c"
  $6 = HEAP32[$5>>2]|0; //@line 10 "ot.c"
  $7 = ($4>>>0)<($6>>>0); //@line 10 "ot.c"
  if (!($7)) {
   break;
  }
  $8 = $i; //@line 11 "ot.c"
  $9 = $start_data; //@line 11 "ot.c"
  $10 = (($9) + ($8<<3)|0); //@line 11 "ot.c"
  $11 = HEAP32[$10>>2]|0; //@line 11 "ot.c"
  _free($11); //@line 11 "ot.c"
  $12 = $i; //@line 12 "ot.c"
  $13 = $start_data; //@line 12 "ot.c"
  $14 = (($13) + ($12<<3)|0); //@line 12 "ot.c"
  $15 = (($14) + 4|0); //@line 12 "ot.c"
  $16 = HEAP32[$15>>2]|0; //@line 12 "ot.c"
  _free($16); //@line 12 "ot.c"
  $17 = $i; //@line 10 "ot.c"
  $18 = (($17) + 1)|0; //@line 10 "ot.c"
  $i = $18; //@line 10 "ot.c"
 }
 $19 = $0; //@line 14 "ot.c"
 _array_free($19); //@line 14 "ot.c"
 $20 = $0; //@line 16 "ot.c"
 $21 = (($20) + 16|0); //@line 16 "ot.c"
 $22 = (($21) + 12|0); //@line 16 "ot.c"
 $23 = HEAP32[$22>>2]|0; //@line 16 "ot.c"
 $end_data = $23; //@line 16 "ot.c"
 $i1 = 0; //@line 17 "ot.c"
 while(1) {
  $24 = $i1; //@line 17 "ot.c"
  $25 = $0; //@line 17 "ot.c"
  $26 = (($25) + 16|0); //@line 17 "ot.c"
  $27 = HEAP32[$26>>2]|0; //@line 17 "ot.c"
  $28 = ($24>>>0)<($27>>>0); //@line 17 "ot.c"
  if (!($28)) {
   break;
  }
  $29 = $i1; //@line 18 "ot.c"
  $30 = $end_data; //@line 18 "ot.c"
  $31 = (($30) + ($29<<3)|0); //@line 18 "ot.c"
  $32 = HEAP32[$31>>2]|0; //@line 18 "ot.c"
  _free($32); //@line 18 "ot.c"
  $33 = $i1; //@line 19 "ot.c"
  $34 = $end_data; //@line 19 "ot.c"
  $35 = (($34) + ($33<<3)|0); //@line 19 "ot.c"
  $36 = (($35) + 4|0); //@line 19 "ot.c"
  $37 = HEAP32[$36>>2]|0; //@line 19 "ot.c"
  _free($37); //@line 19 "ot.c"
  $38 = $i1; //@line 17 "ot.c"
  $39 = (($38) + 1)|0; //@line 17 "ot.c"
  $i1 = $39; //@line 17 "ot.c"
 }
 $40 = $0; //@line 21 "ot.c"
 $41 = (($40) + 16|0); //@line 21 "ot.c"
 _array_free($41); //@line 21 "ot.c"
 STACKTOP = sp;return; //@line 22 "ot.c"
}
function _ot_dup_op($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $comp = 0, $comps = 0, $dup = 0, $i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $op;
 $1 = (_malloc(60)|0); //@line 62 "ot.c"
 $dup = $1; //@line 62 "ot.c"
 $2 = $dup; //@line 63 "ot.c"
 $3 = $0; //@line 63 "ot.c"
 dest=$2+0|0; src=$3+0|0; stop=dest+60|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0)); //@line 63 "ot.c"
 $4 = $dup; //@line 64 "ot.c"
 $5 = (($4) + 44|0); //@line 64 "ot.c"
 _array_init($5,36); //@line 64 "ot.c"
 $6 = $0; //@line 66 "ot.c"
 $7 = (($6) + 44|0); //@line 66 "ot.c"
 $8 = (($7) + 12|0); //@line 66 "ot.c"
 $9 = HEAP32[$8>>2]|0; //@line 66 "ot.c"
 $comps = $9; //@line 66 "ot.c"
 $i = 0; //@line 67 "ot.c"
 while(1) {
  $10 = $i; //@line 67 "ot.c"
  $11 = $0; //@line 67 "ot.c"
  $12 = (($11) + 44|0); //@line 67 "ot.c"
  $13 = HEAP32[$12>>2]|0; //@line 67 "ot.c"
  $14 = ($10>>>0)<($13>>>0); //@line 67 "ot.c"
  if (!($14)) {
   break;
  }
  $15 = $comps; //@line 68 "ot.c"
  $16 = $i; //@line 68 "ot.c"
  $17 = (($15) + (($16*36)|0)|0); //@line 68 "ot.c"
  $comp = $17; //@line 68 "ot.c"
  $18 = $comp; //@line 69 "ot.c"
  $19 = HEAP32[$18>>2]|0; //@line 69 "ot.c"
  switch ($19|0) {
  case 4:  {
   $36 = $dup; //@line 83 "ot.c"
   _ot_close_element($36); //@line 83 "ot.c"
   break;
  }
  case 3:  {
   $32 = $dup; //@line 80 "ot.c"
   $33 = $comp; //@line 80 "ot.c"
   $34 = (($33) + 4|0); //@line 80 "ot.c"
   $35 = HEAP32[$34>>2]|0; //@line 80 "ot.c"
   _ot_open_element($32,$35); //@line 80 "ot.c"
   break;
  }
  case 0:  {
   $20 = $dup; //@line 71 "ot.c"
   $21 = $comp; //@line 71 "ot.c"
   $22 = (($21) + 4|0); //@line 71 "ot.c"
   $23 = HEAP32[$22>>2]|0; //@line 71 "ot.c"
   _ot_skip($20,$23); //@line 71 "ot.c"
   break;
  }
  case 1:  {
   $24 = $dup; //@line 74 "ot.c"
   $25 = $comp; //@line 74 "ot.c"
   $26 = (($25) + 4|0); //@line 74 "ot.c"
   $27 = HEAP32[$26>>2]|0; //@line 74 "ot.c"
   _ot_insert($24,$27); //@line 74 "ot.c"
   break;
  }
  case 5:  {
   break;
  }
  case 2:  {
   $28 = $dup; //@line 77 "ot.c"
   $29 = $comp; //@line 77 "ot.c"
   $30 = (($29) + 4|0); //@line 77 "ot.c"
   $31 = HEAP32[$30>>2]|0; //@line 77 "ot.c"
   _ot_delete($28,$31); //@line 77 "ot.c"
   break;
  }
  default: {
  }
  }
  $37 = $i; //@line 67 "ot.c"
  $38 = (($37) + 1)|0; //@line 67 "ot.c"
  $i = $38; //@line 67 "ot.c"
 }
 $39 = $dup; //@line 90 "ot.c"
 STACKTOP = sp;return ($39|0); //@line 90 "ot.c"
}
function _ot_skip($op,$count) {
 $op = $op|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $comp = 0, $comps = 0, $last = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $op;
 $1 = $count;
 $2 = $0; //@line 163 "ot.c"
 $3 = (($2) + 44|0); //@line 163 "ot.c"
 $4 = (($3) + 12|0); //@line 163 "ot.c"
 $5 = HEAP32[$4>>2]|0; //@line 163 "ot.c"
 $comps = $5; //@line 163 "ot.c"
 $6 = $comps; //@line 164 "ot.c"
 $7 = $0; //@line 164 "ot.c"
 $8 = (($7) + 44|0); //@line 164 "ot.c"
 $9 = HEAP32[$8>>2]|0; //@line 164 "ot.c"
 $10 = (($9) - 1)|0; //@line 164 "ot.c"
 $11 = (($6) + (($10*36)|0)|0); //@line 164 "ot.c"
 $last = $11; //@line 164 "ot.c"
 $12 = $0; //@line 165 "ot.c"
 $13 = (($12) + 44|0); //@line 165 "ot.c"
 $14 = HEAP32[$13>>2]|0; //@line 165 "ot.c"
 $15 = ($14>>>0)>(0); //@line 165 "ot.c"
 if ($15) {
  $16 = $last; //@line 165 "ot.c"
  $17 = HEAP32[$16>>2]|0; //@line 165 "ot.c"
  $18 = ($17|0)==(0); //@line 165 "ot.c"
  if ($18) {
   $19 = $1; //@line 166 "ot.c"
   $20 = $last; //@line 166 "ot.c"
   $21 = (($20) + 4|0); //@line 166 "ot.c"
   $22 = HEAP32[$21>>2]|0; //@line 166 "ot.c"
   $23 = (($22) + ($19))|0; //@line 166 "ot.c"
   HEAP32[$21>>2] = $23; //@line 166 "ot.c"
   STACKTOP = sp;return; //@line 172 "ot.c"
  }
 }
 $24 = $0; //@line 168 "ot.c"
 $25 = (($24) + 44|0); //@line 168 "ot.c"
 $26 = (_array_append($25)|0); //@line 168 "ot.c"
 $comp = $26; //@line 168 "ot.c"
 $27 = $comp; //@line 169 "ot.c"
 HEAP32[$27>>2] = 0; //@line 169 "ot.c"
 $28 = $1; //@line 170 "ot.c"
 $29 = $comp; //@line 170 "ot.c"
 $30 = (($29) + 4|0); //@line 170 "ot.c"
 HEAP32[$30>>2] = $28; //@line 170 "ot.c"
 STACKTOP = sp;return; //@line 172 "ot.c"
}
function _ot_insert($op,$text) {
 $op = $op|0;
 $text = $text|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $comp = 0, $comps = 0, $last = 0, $len1 = 0;
 var $len2 = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $op;
 $1 = $text;
 $2 = $0; //@line 175 "ot.c"
 $3 = (($2) + 44|0); //@line 175 "ot.c"
 $4 = (($3) + 12|0); //@line 175 "ot.c"
 $5 = HEAP32[$4>>2]|0; //@line 175 "ot.c"
 $comps = $5; //@line 175 "ot.c"
 $6 = $comps; //@line 176 "ot.c"
 $7 = $0; //@line 176 "ot.c"
 $8 = (($7) + 44|0); //@line 176 "ot.c"
 $9 = HEAP32[$8>>2]|0; //@line 176 "ot.c"
 $10 = (($9) - 1)|0; //@line 176 "ot.c"
 $11 = (($6) + (($10*36)|0)|0); //@line 176 "ot.c"
 $last = $11; //@line 176 "ot.c"
 $12 = $0; //@line 177 "ot.c"
 $13 = (($12) + 44|0); //@line 177 "ot.c"
 $14 = HEAP32[$13>>2]|0; //@line 177 "ot.c"
 $15 = ($14>>>0)>(0); //@line 177 "ot.c"
 if ($15) {
  $16 = $last; //@line 177 "ot.c"
  $17 = HEAP32[$16>>2]|0; //@line 177 "ot.c"
  $18 = ($17|0)==(1); //@line 177 "ot.c"
  if ($18) {
   $19 = $last; //@line 178 "ot.c"
   $20 = (($19) + 4|0); //@line 178 "ot.c"
   $21 = HEAP32[$20>>2]|0; //@line 178 "ot.c"
   $22 = (_strlen(($21|0))|0); //@line 178 "ot.c"
   $len1 = $22; //@line 178 "ot.c"
   $23 = $1; //@line 179 "ot.c"
   $24 = (_strlen(($23|0))|0); //@line 179 "ot.c"
   $len2 = $24; //@line 179 "ot.c"
   $25 = $last; //@line 181 "ot.c"
   $26 = (($25) + 4|0); //@line 181 "ot.c"
   $27 = HEAP32[$26>>2]|0; //@line 181 "ot.c"
   $28 = $len1; //@line 181 "ot.c"
   $29 = $len2; //@line 181 "ot.c"
   $30 = (($28) + ($29))|0; //@line 181 "ot.c"
   $31 = (($30) + 1)|0; //@line 181 "ot.c"
   $32 = (_realloc($27,$31)|0); //@line 181 "ot.c"
   $33 = $last; //@line 181 "ot.c"
   $34 = (($33) + 4|0); //@line 181 "ot.c"
   HEAP32[$34>>2] = $32; //@line 181 "ot.c"
   $35 = $last; //@line 182 "ot.c"
   $36 = (($35) + 4|0); //@line 182 "ot.c"
   $37 = HEAP32[$36>>2]|0; //@line 182 "ot.c"
   $38 = $1; //@line 182 "ot.c"
   (_strcat(($37|0),($38|0))|0); //@line 182 "ot.c"
   STACKTOP = sp;return; //@line 190 "ot.c"
  }
 }
 $39 = $0; //@line 184 "ot.c"
 $40 = (($39) + 44|0); //@line 184 "ot.c"
 $41 = (_array_append($40)|0); //@line 184 "ot.c"
 $comp = $41; //@line 184 "ot.c"
 $42 = $comp; //@line 185 "ot.c"
 HEAP32[$42>>2] = 1; //@line 185 "ot.c"
 $43 = $1; //@line 186 "ot.c"
 $44 = (_strlen(($43|0))|0); //@line 186 "ot.c"
 $45 = (($44) + 1)|0; //@line 186 "ot.c"
 $46 = $45; //@line 186 "ot.c"
 $size = $46; //@line 186 "ot.c"
 $47 = $size; //@line 187 "ot.c"
 $48 = (_malloc($47)|0); //@line 187 "ot.c"
 $49 = $comp; //@line 187 "ot.c"
 $50 = (($49) + 4|0); //@line 187 "ot.c"
 HEAP32[$50>>2] = $48; //@line 187 "ot.c"
 $51 = $comp; //@line 188 "ot.c"
 $52 = (($51) + 4|0); //@line 188 "ot.c"
 $53 = HEAP32[$52>>2]|0; //@line 188 "ot.c"
 $54 = $1; //@line 188 "ot.c"
 $55 = $size; //@line 188 "ot.c"
 _memcpy(($53|0),($54|0),($55|0))|0; //@line 188 "ot.c"
 STACKTOP = sp;return; //@line 190 "ot.c"
}
function _ot_delete($op,$count) {
 $op = $op|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $comp = 0, $comps = 0, $last = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $op;
 $1 = $count;
 $2 = $0; //@line 193 "ot.c"
 $3 = (($2) + 44|0); //@line 193 "ot.c"
 $4 = (($3) + 12|0); //@line 193 "ot.c"
 $5 = HEAP32[$4>>2]|0; //@line 193 "ot.c"
 $comps = $5; //@line 193 "ot.c"
 $6 = $comps; //@line 194 "ot.c"
 $7 = $0; //@line 194 "ot.c"
 $8 = (($7) + 44|0); //@line 194 "ot.c"
 $9 = HEAP32[$8>>2]|0; //@line 194 "ot.c"
 $10 = (($9) - 1)|0; //@line 194 "ot.c"
 $11 = (($6) + (($10*36)|0)|0); //@line 194 "ot.c"
 $last = $11; //@line 194 "ot.c"
 $12 = $0; //@line 195 "ot.c"
 $13 = (($12) + 44|0); //@line 195 "ot.c"
 $14 = HEAP32[$13>>2]|0; //@line 195 "ot.c"
 $15 = ($14>>>0)>(0); //@line 195 "ot.c"
 if ($15) {
  $16 = $last; //@line 195 "ot.c"
  $17 = HEAP32[$16>>2]|0; //@line 195 "ot.c"
  $18 = ($17|0)==(2); //@line 195 "ot.c"
  if ($18) {
   $19 = $1; //@line 196 "ot.c"
   $20 = $last; //@line 196 "ot.c"
   $21 = (($20) + 4|0); //@line 196 "ot.c"
   $22 = HEAP32[$21>>2]|0; //@line 196 "ot.c"
   $23 = (($22) + ($19))|0; //@line 196 "ot.c"
   HEAP32[$21>>2] = $23; //@line 196 "ot.c"
   STACKTOP = sp;return; //@line 202 "ot.c"
  }
 }
 $24 = $0; //@line 198 "ot.c"
 $25 = (($24) + 44|0); //@line 198 "ot.c"
 $26 = (_array_append($25)|0); //@line 198 "ot.c"
 $comp = $26; //@line 198 "ot.c"
 $27 = $comp; //@line 199 "ot.c"
 HEAP32[$27>>2] = 2; //@line 199 "ot.c"
 $28 = $1; //@line 200 "ot.c"
 $29 = $comp; //@line 200 "ot.c"
 $30 = (($29) + 4|0); //@line 200 "ot.c"
 HEAP32[$30>>2] = $28; //@line 200 "ot.c"
 STACKTOP = sp;return; //@line 202 "ot.c"
}
function _ot_open_element($op,$elem) {
 $op = $op|0;
 $elem = $elem|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $comp = 0;
 var $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $op;
 $1 = $elem;
 $2 = $0; //@line 205 "ot.c"
 $3 = (($2) + 44|0); //@line 205 "ot.c"
 $4 = (_array_append($3)|0); //@line 205 "ot.c"
 $comp = $4; //@line 205 "ot.c"
 $5 = $comp; //@line 206 "ot.c"
 HEAP32[$5>>2] = 3; //@line 206 "ot.c"
 $6 = $1; //@line 207 "ot.c"
 $7 = (_strlen(($6|0))|0); //@line 207 "ot.c"
 $8 = (($7) + 1)|0; //@line 207 "ot.c"
 $9 = $8; //@line 207 "ot.c"
 $size = $9; //@line 207 "ot.c"
 $10 = $size; //@line 208 "ot.c"
 $11 = (_malloc($10)|0); //@line 208 "ot.c"
 $12 = $comp; //@line 208 "ot.c"
 $13 = (($12) + 4|0); //@line 208 "ot.c"
 HEAP32[$13>>2] = $11; //@line 208 "ot.c"
 $14 = $comp; //@line 209 "ot.c"
 $15 = (($14) + 4|0); //@line 209 "ot.c"
 $16 = HEAP32[$15>>2]|0; //@line 209 "ot.c"
 $17 = $1; //@line 209 "ot.c"
 $18 = $size; //@line 209 "ot.c"
 _memcpy(($16|0),($17|0),($18|0))|0; //@line 209 "ot.c"
 STACKTOP = sp;return; //@line 210 "ot.c"
}
function _ot_close_element($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $comp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $op;
 $1 = $0; //@line 213 "ot.c"
 $2 = (($1) + 44|0); //@line 213 "ot.c"
 $3 = (_array_append($2)|0); //@line 213 "ot.c"
 $comp = $3; //@line 213 "ot.c"
 $4 = $comp; //@line 214 "ot.c"
 HEAP32[$4>>2] = 4; //@line 214 "ot.c"
 STACKTOP = sp;return; //@line 215 "ot.c"
}
function _ot_snapshot($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $comp_len = 0, $comps = 0, $i = 0, $oldsize = 0, $size = 0, $snapshot = 0, $t = 0, $written = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $op;
 $size = 1; //@line 286 "ot.c"
 $written = 0; //@line 287 "ot.c"
 $snapshot = 0; //@line 288 "ot.c"
 $1 = $0; //@line 289 "ot.c"
 $2 = (($1) + 44|0); //@line 289 "ot.c"
 $3 = (($2) + 12|0); //@line 289 "ot.c"
 $4 = HEAP32[$3>>2]|0; //@line 289 "ot.c"
 $comps = $4; //@line 289 "ot.c"
 $i = 0; //@line 291 "ot.c"
 while(1) {
  $5 = $i; //@line 291 "ot.c"
  $6 = $0; //@line 291 "ot.c"
  $7 = (($6) + 44|0); //@line 291 "ot.c"
  $8 = HEAP32[$7>>2]|0; //@line 291 "ot.c"
  $9 = ($5>>>0)<($8>>>0); //@line 291 "ot.c"
  if (!($9)) {
   break;
  }
  $10 = $i; //@line 292 "ot.c"
  $11 = $comps; //@line 292 "ot.c"
  $12 = (($11) + (($10*36)|0)|0); //@line 292 "ot.c"
  $13 = HEAP32[$12>>2]|0; //@line 292 "ot.c"
  $14 = ($13|0)==(1); //@line 292 "ot.c"
  if ($14) {
   $15 = $size; //@line 293 "ot.c"
   $oldsize = $15; //@line 293 "ot.c"
   $16 = $i; //@line 294 "ot.c"
   $17 = $comps; //@line 294 "ot.c"
   $18 = (($17) + (($16*36)|0)|0); //@line 294 "ot.c"
   $19 = (($18) + 4|0); //@line 294 "ot.c"
   $20 = HEAP32[$19>>2]|0; //@line 294 "ot.c"
   $t = $20; //@line 294 "ot.c"
   $21 = $t; //@line 295 "ot.c"
   $22 = (_strlen(($21|0))|0); //@line 295 "ot.c"
   $comp_len = $22; //@line 295 "ot.c"
   $23 = $comp_len; //@line 296 "ot.c"
   $24 = $23; //@line 296 "ot.c"
   $25 = $size; //@line 296 "ot.c"
   $26 = (($25) + ($24))|0; //@line 296 "ot.c"
   $size = $26; //@line 296 "ot.c"
   $27 = $snapshot; //@line 297 "ot.c"
   $28 = $size; //@line 297 "ot.c"
   $29 = (_realloc($27,$28)|0); //@line 297 "ot.c"
   $snapshot = $29; //@line 297 "ot.c"
   $30 = $snapshot; //@line 298 "ot.c"
   $31 = $oldsize; //@line 298 "ot.c"
   $32 = (($30) + ($31)|0); //@line 298 "ot.c"
   $33 = (($32) + -1|0); //@line 298 "ot.c"
   $34 = $t; //@line 298 "ot.c"
   $35 = $comp_len; //@line 298 "ot.c"
   _memcpy(($33|0),($34|0),($35|0))|0; //@line 298 "ot.c"
   $36 = $comp_len; //@line 299 "ot.c"
   $37 = $written; //@line 299 "ot.c"
   $38 = (($37) + ($36))|0; //@line 299 "ot.c"
   $written = $38; //@line 299 "ot.c"
  }
  $39 = $i; //@line 291 "ot.c"
  $40 = (($39) + 1)|0; //@line 291 "ot.c"
  $i = $40; //@line 291 "ot.c"
 }
 $41 = $snapshot; //@line 303 "ot.c"
 $42 = ($41|0)!=(0|0); //@line 303 "ot.c"
 if (!($42)) {
  $46 = $snapshot; //@line 307 "ot.c"
  STACKTOP = sp;return ($46|0); //@line 307 "ot.c"
 }
 $43 = $written; //@line 304 "ot.c"
 $44 = $snapshot; //@line 304 "ot.c"
 $45 = (($44) + ($43)|0); //@line 304 "ot.c"
 HEAP8[$45>>0] = 0; //@line 304 "ot.c"
 $46 = $snapshot; //@line 307 "ot.c"
 STACKTOP = sp;return ($46|0); //@line 307 "ot.c"
}
function _ot_iter_init($iter,$op) {
 $iter = $iter|0;
 $op = $op|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $iter;
 $1 = $op;
 $2 = $1; //@line 311 "ot.c"
 $3 = $0; //@line 311 "ot.c"
 HEAP32[$3>>2] = $2; //@line 311 "ot.c"
 $4 = $0; //@line 312 "ot.c"
 $5 = (($4) + 12|0); //@line 312 "ot.c"
 HEAP8[$5>>0] = 0; //@line 312 "ot.c"
 STACKTOP = sp;return; //@line 313 "ot.c"
}
function _ot_iter_next($iter) {
 $iter = $iter|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $iter;
 $1 = $0; //@line 330 "ot.c"
 $2 = (_ot_iter_skip($1,1)|0); //@line 330 "ot.c"
 STACKTOP = sp;return ($2|0); //@line 330 "ot.c"
}
function _ot_iter_skip($iter,$count) {
 $iter = $iter|0;
 $count = $count|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $comp = 0, $delete = 0;
 var $i = 0, $insert = 0, $max = 0, $skip = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $skip = sp + 12|0;
 $insert = sp + 8|0;
 $delete = sp + 4|0;
 $1 = $iter;
 $2 = $count;
 $3 = $1; //@line 336 "ot.c"
 $4 = HEAP32[$3>>2]|0; //@line 336 "ot.c"
 $5 = (($4) + 44|0); //@line 336 "ot.c"
 $6 = HEAP32[$5>>2]|0; //@line 336 "ot.c"
 $7 = ($6|0)==(0); //@line 336 "ot.c"
 if ($7) {
  $$expand_i1_val = 0; //@line 337 "ot.c"
  $0 = $$expand_i1_val; //@line 337 "ot.c"
  $$pre_trunc = $0; //@line 380 "ot.c"
  $72 = $$pre_trunc&1; //@line 380 "ot.c"
  STACKTOP = sp;return ($72|0); //@line 380 "ot.c"
 }
 $8 = $1; //@line 340 "ot.c"
 $9 = (($8) + 12|0); //@line 340 "ot.c"
 $10 = HEAP8[$9>>0]|0; //@line 340 "ot.c"
 $11 = $10&1; //@line 340 "ot.c"
 if (!($11)) {
  $12 = $1; //@line 341 "ot.c"
  $13 = (($12) + 4|0); //@line 341 "ot.c"
  HEAP32[$13>>2] = 0; //@line 341 "ot.c"
  $14 = $1; //@line 342 "ot.c"
  $15 = (($14) + 8|0); //@line 342 "ot.c"
  HEAP32[$15>>2] = 0; //@line 342 "ot.c"
  $16 = $1; //@line 343 "ot.c"
  $17 = (($16) + 12|0); //@line 343 "ot.c"
  HEAP8[$17>>0] = 1; //@line 343 "ot.c"
  $$expand_i1_val2 = 1; //@line 344 "ot.c"
  $0 = $$expand_i1_val2; //@line 344 "ot.c"
  $$pre_trunc = $0; //@line 380 "ot.c"
  $72 = $$pre_trunc&1; //@line 380 "ot.c"
  STACKTOP = sp;return ($72|0); //@line 380 "ot.c"
 }
 $i = 0; //@line 347 "ot.c"
 while(1) {
  $18 = $i; //@line 347 "ot.c"
  $19 = $2; //@line 347 "ot.c"
  $20 = ($18>>>0)<($19>>>0); //@line 347 "ot.c"
  if (!($20)) {
   label = 31;
   break;
  }
  $max = 0; //@line 348 "ot.c"
  $21 = $1; //@line 349 "ot.c"
  $22 = HEAP32[$21>>2]|0; //@line 349 "ot.c"
  $23 = (($22) + 44|0); //@line 349 "ot.c"
  $24 = (($23) + 12|0); //@line 349 "ot.c"
  $25 = HEAP32[$24>>2]|0; //@line 349 "ot.c"
  $26 = $1; //@line 349 "ot.c"
  $27 = (($26) + 4|0); //@line 349 "ot.c"
  $28 = HEAP32[$27>>2]|0; //@line 349 "ot.c"
  $29 = (($25) + (($28*36)|0)|0); //@line 349 "ot.c"
  $comp = $29; //@line 349 "ot.c"
  $30 = $comp; //@line 350 "ot.c"
  $31 = HEAP32[$30>>2]|0; //@line 350 "ot.c"
  $32 = ($31|0)==(0); //@line 350 "ot.c"
  if ($32) {
   $33 = $comp; //@line 351 "ot.c"
   $34 = (($33) + 4|0); //@line 351 "ot.c"
   ;HEAP32[$skip+0>>2]=HEAP32[$34+0>>2]|0; //@line 351 "ot.c"
   $35 = HEAP32[$skip>>2]|0; //@line 352 "ot.c"
   $max = $35; //@line 352 "ot.c"
  } else {
   $36 = $comp; //@line 353 "ot.c"
   $37 = HEAP32[$36>>2]|0; //@line 353 "ot.c"
   $38 = ($37|0)==(1); //@line 353 "ot.c"
   if ($38) {
    $39 = $comp; //@line 354 "ot.c"
    $40 = (($39) + 4|0); //@line 354 "ot.c"
    ;HEAP32[$insert+0>>2]=HEAP32[$40+0>>2]|0; //@line 354 "ot.c"
    $41 = HEAP32[$insert>>2]|0; //@line 355 "ot.c"
    $42 = (_strlen(($41|0))|0); //@line 355 "ot.c"
    $max = $42; //@line 355 "ot.c"
   } else {
    $43 = $comp; //@line 356 "ot.c"
    $44 = HEAP32[$43>>2]|0; //@line 356 "ot.c"
    $45 = ($44|0)==(2); //@line 356 "ot.c"
    if ($45) {
     $46 = $comp; //@line 357 "ot.c"
     $47 = (($46) + 4|0); //@line 357 "ot.c"
     ;HEAP32[$delete+0>>2]=HEAP32[$47+0>>2]|0; //@line 357 "ot.c"
     $48 = HEAP32[$delete>>2]|0; //@line 358 "ot.c"
     $max = $48; //@line 358 "ot.c"
    } else {
     $49 = $comp; //@line 359 "ot.c"
     $50 = HEAP32[$49>>2]|0; //@line 359 "ot.c"
     $51 = ($50|0)==(3); //@line 359 "ot.c"
     if ($51) {
      $max = 0; //@line 360 "ot.c"
     } else {
      $52 = $comp; //@line 361 "ot.c"
      $53 = HEAP32[$52>>2]|0; //@line 361 "ot.c"
      $54 = ($53|0)==(4); //@line 361 "ot.c"
      if ($54) {
       $max = 0; //@line 362 "ot.c"
      } else {
       $55 = $comp; //@line 363 "ot.c"
       $56 = HEAP32[$55>>2]|0; //@line 363 "ot.c"
       $57 = ($56|0)==(5); //@line 363 "ot.c"
       if (!($57)) {
        label = 19;
        break;
       }
       $max = 0; //@line 364 "ot.c"
      }
     }
    }
   }
  }
  $58 = $1; //@line 369 "ot.c"
  $59 = $2; //@line 369 "ot.c"
  $60 = $max; //@line 369 "ot.c"
  $61 = (_ot_iter_adv($58,$59,$60)|0); //@line 369 "ot.c"
  if (!($61)) {
   label = 26;
   break;
  }
  $62 = $1; //@line 373 "ot.c"
  $63 = (($62) + 8|0); //@line 373 "ot.c"
  $64 = HEAP32[$63>>2]|0; //@line 373 "ot.c"
  $65 = ($64|0)==(0); //@line 373 "ot.c"
  if ($65) {
   $66 = $max; //@line 374 "ot.c"
   $67 = $i; //@line 374 "ot.c"
   $68 = (($67) + ($66))|0; //@line 374 "ot.c"
   $i = $68; //@line 374 "ot.c"
  } else {
   $69 = $2; //@line 376 "ot.c"
   $70 = $i; //@line 376 "ot.c"
   $71 = (($70) + ($69))|0; //@line 376 "ot.c"
   $i = $71; //@line 376 "ot.c"
  }
 }
 if ((label|0) == 19) {
  ___assert_fail((568|0),(632|0),366,(640|0)); //@line 366 "ot.c"
  // unreachable; //@line 366 "ot.c"
 }
 else if ((label|0) == 26) {
  $$expand_i1_val4 = 0; //@line 370 "ot.c"
  $0 = $$expand_i1_val4; //@line 370 "ot.c"
  $$pre_trunc = $0; //@line 380 "ot.c"
  $72 = $$pre_trunc&1; //@line 380 "ot.c"
  STACKTOP = sp;return ($72|0); //@line 380 "ot.c"
 }
 else if ((label|0) == 31) {
  $$expand_i1_val6 = 1; //@line 380 "ot.c"
  $0 = $$expand_i1_val6; //@line 380 "ot.c"
  $$pre_trunc = $0; //@line 380 "ot.c"
  $72 = $$pre_trunc&1; //@line 380 "ot.c"
  STACKTOP = sp;return ($72|0); //@line 380 "ot.c"
 }
 return 0|0;
}
function _ot_iter_adv($iter,$n,$max) {
 $iter = $iter|0;
 $n = $n|0;
 $max = $max|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $iter;
 $2 = $n;
 $3 = $max;
 $4 = $1; //@line 316 "ot.c"
 $5 = (($4) + 8|0); //@line 316 "ot.c"
 $6 = HEAP32[$5>>2]|0; //@line 316 "ot.c"
 $7 = $2; //@line 316 "ot.c"
 $8 = (($6) + ($7))|0; //@line 316 "ot.c"
 $9 = $3; //@line 316 "ot.c"
 $10 = ($8>>>0)<($9>>>0); //@line 316 "ot.c"
 if ($10) {
  $11 = $2; //@line 317 "ot.c"
  $12 = $1; //@line 317 "ot.c"
  $13 = (($12) + 8|0); //@line 317 "ot.c"
  $14 = HEAP32[$13>>2]|0; //@line 317 "ot.c"
  $15 = (($14) + ($11))|0; //@line 317 "ot.c"
  HEAP32[$13>>2] = $15; //@line 317 "ot.c"
  $$expand_i1_val = 1; //@line 318 "ot.c"
  $0 = $$expand_i1_val; //@line 318 "ot.c"
  $$pre_trunc = $0; //@line 326 "ot.c"
  $31 = $$pre_trunc&1; //@line 326 "ot.c"
  STACKTOP = sp;return ($31|0); //@line 326 "ot.c"
 }
 $16 = $1; //@line 320 "ot.c"
 $17 = (($16) + 4|0); //@line 320 "ot.c"
 $18 = HEAP32[$17>>2]|0; //@line 320 "ot.c"
 $19 = $1; //@line 320 "ot.c"
 $20 = HEAP32[$19>>2]|0; //@line 320 "ot.c"
 $21 = (($20) + 44|0); //@line 320 "ot.c"
 $22 = HEAP32[$21>>2]|0; //@line 320 "ot.c"
 $23 = (($22) - 1)|0; //@line 320 "ot.c"
 $24 = ($18>>>0)<($23>>>0); //@line 320 "ot.c"
 if ($24) {
  $25 = $1; //@line 321 "ot.c"
  $26 = (($25) + 4|0); //@line 321 "ot.c"
  $27 = HEAP32[$26>>2]|0; //@line 321 "ot.c"
  $28 = (($27) + 1)|0; //@line 321 "ot.c"
  HEAP32[$26>>2] = $28; //@line 321 "ot.c"
  $29 = $1; //@line 322 "ot.c"
  $30 = (($29) + 8|0); //@line 322 "ot.c"
  HEAP32[$30>>2] = 0; //@line 322 "ot.c"
  $$expand_i1_val2 = 1; //@line 323 "ot.c"
  $0 = $$expand_i1_val2; //@line 323 "ot.c"
  $$pre_trunc = $0; //@line 326 "ot.c"
  $31 = $$pre_trunc&1; //@line 326 "ot.c"
  STACKTOP = sp;return ($31|0); //@line 326 "ot.c"
 } else {
  $$expand_i1_val4 = 0; //@line 326 "ot.c"
  $0 = $$expand_i1_val4; //@line 326 "ot.c"
  $$pre_trunc = $0; //@line 326 "ot.c"
  $31 = $$pre_trunc&1; //@line 326 "ot.c"
  STACKTOP = sp;return ($31|0); //@line 326 "ot.c"
 }
 return 0|0;
}
function _decode_cjson_op($json,$op) {
 $json = $json|0;
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $client_idf = 0, $components = 0, $delete = 0;
 var $hashf = 0, $i = 0, $insert = 0, $item = 0, $open_elem = 0, $open_elem1 = 0, $open_elem2 = 0, $parentf = 0, $size = 0, $skip = 0, $text = 0, $text_size = 0, $type = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $1 = $json;
 $2 = $op;
 $3 = $1; //@line 5 "otdecode.c"
 $4 = (_cJSON_GetObjectItem($3,656)|0); //@line 5 "otdecode.c"
 $client_idf = $4; //@line 5 "otdecode.c"
 $5 = $client_idf; //@line 6 "otdecode.c"
 $6 = ($5|0)==(0|0); //@line 6 "otdecode.c"
 if ($6) {
  $0 = 2; //@line 7 "otdecode.c"
  $136 = $0; //@line 68 "otdecode.c"
  STACKTOP = sp;return ($136|0); //@line 68 "otdecode.c"
 }
 $7 = $client_idf; //@line 9 "otdecode.c"
 $8 = (($7) + 20|0); //@line 9 "otdecode.c"
 $9 = HEAP32[$8>>2]|0; //@line 9 "otdecode.c"
 $10 = $2; //@line 9 "otdecode.c"
 HEAP32[$10>>2] = $9; //@line 9 "otdecode.c"
 $11 = $1; //@line 11 "otdecode.c"
 $12 = (_cJSON_GetObjectItem($11,672)|0); //@line 11 "otdecode.c"
 $parentf = $12; //@line 11 "otdecode.c"
 $13 = $parentf; //@line 12 "otdecode.c"
 $14 = ($13|0)==(0|0); //@line 12 "otdecode.c"
 if ($14) {
  $0 = 1; //@line 13 "otdecode.c"
  $136 = $0; //@line 68 "otdecode.c"
  STACKTOP = sp;return ($136|0); //@line 68 "otdecode.c"
 }
 $15 = $2; //@line 15 "otdecode.c"
 $16 = (($15) + 4|0); //@line 15 "otdecode.c"
 dest=$16+0|0; stop=dest+20|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0)); //@line 15 "otdecode.c"
 $17 = $2; //@line 16 "otdecode.c"
 $18 = (($17) + 4|0); //@line 16 "otdecode.c"
 $19 = $parentf; //@line 16 "otdecode.c"
 $20 = (($19) + 16|0); //@line 16 "otdecode.c"
 $21 = HEAP32[$20>>2]|0; //@line 16 "otdecode.c"
 $22 = $parentf; //@line 16 "otdecode.c"
 $23 = (($22) + 16|0); //@line 16 "otdecode.c"
 $24 = HEAP32[$23>>2]|0; //@line 16 "otdecode.c"
 $25 = (_strlen(($24|0))|0); //@line 16 "otdecode.c"
 (_hextoa($18,20,$21,$25)|0); //@line 16 "otdecode.c"
 $26 = $1; //@line 18 "otdecode.c"
 $27 = (_cJSON_GetObjectItem($26,680)|0); //@line 18 "otdecode.c"
 $hashf = $27; //@line 18 "otdecode.c"
 $28 = $hashf; //@line 19 "otdecode.c"
 $29 = ($28|0)==(0|0); //@line 19 "otdecode.c"
 if ($29) {
  $0 = 5; //@line 20 "otdecode.c"
  $136 = $0; //@line 68 "otdecode.c"
  STACKTOP = sp;return ($136|0); //@line 68 "otdecode.c"
 }
 $30 = $2; //@line 22 "otdecode.c"
 $31 = (($30) + 24|0); //@line 22 "otdecode.c"
 dest=$31+0|0; stop=dest+20|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0)); //@line 22 "otdecode.c"
 $32 = $2; //@line 23 "otdecode.c"
 $33 = (($32) + 24|0); //@line 23 "otdecode.c"
 $34 = $hashf; //@line 23 "otdecode.c"
 $35 = (($34) + 16|0); //@line 23 "otdecode.c"
 $36 = HEAP32[$35>>2]|0; //@line 23 "otdecode.c"
 $37 = $hashf; //@line 23 "otdecode.c"
 $38 = (($37) + 16|0); //@line 23 "otdecode.c"
 $39 = HEAP32[$38>>2]|0; //@line 23 "otdecode.c"
 $40 = (_strlen(($39|0))|0); //@line 23 "otdecode.c"
 (_hextoa($33,20,$36,$40)|0); //@line 23 "otdecode.c"
 $41 = $1; //@line 25 "otdecode.c"
 $42 = (_cJSON_GetObjectItem($41,688)|0); //@line 25 "otdecode.c"
 $components = $42; //@line 25 "otdecode.c"
 $43 = $components; //@line 26 "otdecode.c"
 $44 = ($43|0)==(0|0); //@line 26 "otdecode.c"
 if ($44) {
  $0 = 3; //@line 27 "otdecode.c"
  $136 = $0; //@line 68 "otdecode.c"
  STACKTOP = sp;return ($136|0); //@line 68 "otdecode.c"
 }
 $45 = $components; //@line 30 "otdecode.c"
 $46 = (_cJSON_GetArraySize($45)|0); //@line 30 "otdecode.c"
 $size = $46; //@line 30 "otdecode.c"
 $i = 0; //@line 31 "otdecode.c"
 while(1) {
  $47 = $i; //@line 31 "otdecode.c"
  $48 = $size; //@line 31 "otdecode.c"
  $49 = ($47|0)<($48|0); //@line 31 "otdecode.c"
  if (!($49)) {
   label = 31;
   break;
  }
  $50 = $components; //@line 32 "otdecode.c"
  $51 = $i; //@line 32 "otdecode.c"
  $52 = (_cJSON_GetArrayItem($50,$51)|0); //@line 32 "otdecode.c"
  $item = $52; //@line 32 "otdecode.c"
  $53 = $item; //@line 33 "otdecode.c"
  $54 = (_cJSON_GetObjectItem($53,704)|0); //@line 33 "otdecode.c"
  $55 = (($54) + 16|0); //@line 33 "otdecode.c"
  $56 = HEAP32[$55>>2]|0; //@line 33 "otdecode.c"
  $type = $56; //@line 33 "otdecode.c"
  $57 = $type; //@line 34 "otdecode.c"
  $58 = (_memcmp($57,712,4)|0); //@line 34 "otdecode.c"
  $59 = ($58|0)==(0); //@line 34 "otdecode.c"
  if ($59) {
   $60 = $2; //@line 35 "otdecode.c"
   $61 = (($60) + 44|0); //@line 35 "otdecode.c"
   $62 = (_array_append($61)|0); //@line 35 "otdecode.c"
   $skip = $62; //@line 35 "otdecode.c"
   $63 = $skip; //@line 36 "otdecode.c"
   HEAP32[$63>>2] = 0; //@line 36 "otdecode.c"
   $64 = $item; //@line 38 "otdecode.c"
   $65 = (_cJSON_GetObjectItem($64,720)|0); //@line 38 "otdecode.c"
   $66 = (($65) + 20|0); //@line 38 "otdecode.c"
   $67 = HEAP32[$66>>2]|0; //@line 38 "otdecode.c"
   $68 = $skip; //@line 38 "otdecode.c"
   $69 = (($68) + 4|0); //@line 38 "otdecode.c"
   HEAP32[$69>>2] = $67; //@line 38 "otdecode.c"
  } else {
   $70 = $type; //@line 39 "otdecode.c"
   $71 = (_memcmp($70,728,6)|0); //@line 39 "otdecode.c"
   $72 = ($71|0)==(0); //@line 39 "otdecode.c"
   if ($72) {
    $73 = $2; //@line 40 "otdecode.c"
    $74 = (($73) + 44|0); //@line 40 "otdecode.c"
    $75 = (_array_append($74)|0); //@line 40 "otdecode.c"
    $insert = $75; //@line 40 "otdecode.c"
    $76 = $insert; //@line 41 "otdecode.c"
    HEAP32[$76>>2] = 1; //@line 41 "otdecode.c"
    $77 = $item; //@line 43 "otdecode.c"
    $78 = (_cJSON_GetObjectItem($77,736)|0); //@line 43 "otdecode.c"
    $79 = (($78) + 16|0); //@line 43 "otdecode.c"
    $80 = HEAP32[$79>>2]|0; //@line 43 "otdecode.c"
    $text = $80; //@line 43 "otdecode.c"
    $81 = $text; //@line 44 "otdecode.c"
    $82 = (_strlen(($81|0))|0); //@line 44 "otdecode.c"
    $83 = (($82) + 1)|0; //@line 44 "otdecode.c"
    $84 = $83; //@line 44 "otdecode.c"
    $text_size = $84; //@line 44 "otdecode.c"
    $85 = $text_size; //@line 45 "otdecode.c"
    $86 = (_malloc($85)|0); //@line 45 "otdecode.c"
    $87 = $insert; //@line 45 "otdecode.c"
    $88 = (($87) + 4|0); //@line 45 "otdecode.c"
    HEAP32[$88>>2] = $86; //@line 45 "otdecode.c"
    $89 = $insert; //@line 46 "otdecode.c"
    $90 = (($89) + 4|0); //@line 46 "otdecode.c"
    $91 = HEAP32[$90>>2]|0; //@line 46 "otdecode.c"
    $92 = $text; //@line 46 "otdecode.c"
    $93 = $text_size; //@line 46 "otdecode.c"
    _memcpy(($91|0),($92|0),($93|0))|0; //@line 46 "otdecode.c"
   } else {
    $94 = $type; //@line 47 "otdecode.c"
    $95 = (_memcmp($94,744,6)|0); //@line 47 "otdecode.c"
    $96 = ($95|0)==(0); //@line 47 "otdecode.c"
    if ($96) {
     $97 = $2; //@line 48 "otdecode.c"
     $98 = (($97) + 44|0); //@line 48 "otdecode.c"
     $99 = (_array_append($98)|0); //@line 48 "otdecode.c"
     $delete = $99; //@line 48 "otdecode.c"
     $100 = $delete; //@line 49 "otdecode.c"
     HEAP32[$100>>2] = 2; //@line 49 "otdecode.c"
     $101 = $item; //@line 51 "otdecode.c"
     $102 = (_cJSON_GetObjectItem($101,720)|0); //@line 51 "otdecode.c"
     $103 = (($102) + 20|0); //@line 51 "otdecode.c"
     $104 = HEAP32[$103>>2]|0; //@line 51 "otdecode.c"
     $105 = $delete; //@line 51 "otdecode.c"
     $106 = (($105) + 4|0); //@line 51 "otdecode.c"
     HEAP32[$106>>2] = $104; //@line 51 "otdecode.c"
    } else {
     $107 = $type; //@line 52 "otdecode.c"
     $108 = (_memcmp($107,752,11)|0); //@line 52 "otdecode.c"
     $109 = ($108|0)==(0); //@line 52 "otdecode.c"
     if ($109) {
      $110 = $2; //@line 53 "otdecode.c"
      $111 = (($110) + 44|0); //@line 53 "otdecode.c"
      $112 = (_array_append($111)|0); //@line 53 "otdecode.c"
      $open_elem = $112; //@line 53 "otdecode.c"
      $113 = $open_elem; //@line 54 "otdecode.c"
      HEAP32[$113>>2] = 3; //@line 54 "otdecode.c"
      $114 = $item; //@line 56 "otdecode.c"
      $115 = (_cJSON_GetObjectItem($114,768)|0); //@line 56 "otdecode.c"
      $116 = (($115) + 16|0); //@line 56 "otdecode.c"
      $117 = HEAP32[$116>>2]|0; //@line 56 "otdecode.c"
      $118 = $open_elem; //@line 56 "otdecode.c"
      $119 = (($118) + 4|0); //@line 56 "otdecode.c"
      HEAP32[$119>>2] = $117; //@line 56 "otdecode.c"
     } else {
      $120 = $type; //@line 57 "otdecode.c"
      $121 = (_memcmp($120,776,12)|0); //@line 57 "otdecode.c"
      $122 = ($121|0)==(0); //@line 57 "otdecode.c"
      if ($122) {
       $123 = $2; //@line 58 "otdecode.c"
       $124 = (($123) + 44|0); //@line 58 "otdecode.c"
       $125 = (_array_append($124)|0); //@line 58 "otdecode.c"
       $open_elem1 = $125; //@line 58 "otdecode.c"
       $126 = $open_elem1; //@line 59 "otdecode.c"
       HEAP32[$126>>2] = 4; //@line 59 "otdecode.c"
      } else {
       $127 = $type; //@line 60 "otdecode.c"
       $128 = (_memcmp($127,792,18)|0); //@line 60 "otdecode.c"
       $129 = ($128|0)==(0); //@line 60 "otdecode.c"
       if (!($129)) {
        label = 23;
        break;
       }
       $130 = $2; //@line 61 "otdecode.c"
       $131 = (($130) + 44|0); //@line 61 "otdecode.c"
       $132 = (_array_append($131)|0); //@line 61 "otdecode.c"
       $open_elem2 = $132; //@line 61 "otdecode.c"
       $133 = $open_elem2; //@line 62 "otdecode.c"
       HEAP32[$133>>2] = 5; //@line 62 "otdecode.c"
      }
     }
    }
   }
  }
  $134 = $i; //@line 31 "otdecode.c"
  $135 = (($134) + 1)|0; //@line 31 "otdecode.c"
  $i = $135; //@line 31 "otdecode.c"
 }
 if ((label|0) == 23) {
  $0 = 4; //@line 64 "otdecode.c"
  $136 = $0; //@line 68 "otdecode.c"
  STACKTOP = sp;return ($136|0); //@line 68 "otdecode.c"
 }
 else if ((label|0) == 31) {
  $0 = 0; //@line 68 "otdecode.c"
  $136 = $0; //@line 68 "otdecode.c"
  STACKTOP = sp;return ($136|0); //@line 68 "otdecode.c"
 }
 return 0|0;
}
function _ot_decode($op,$json) {
 $op = $op|0;
 $json = $json|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $root = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $op;
 $2 = $json;
 $3 = $2; //@line 73 "otdecode.c"
 $4 = (_cJSON_Parse($3)|0); //@line 73 "otdecode.c"
 $root = $4; //@line 73 "otdecode.c"
 $5 = $root; //@line 74 "otdecode.c"
 $6 = ($5|0)==(0|0); //@line 74 "otdecode.c"
 if ($6) {
  $0 = 6; //@line 75 "otdecode.c"
  $12 = $0; //@line 81 "otdecode.c"
  STACKTOP = sp;return ($12|0); //@line 81 "otdecode.c"
 } else {
  $7 = $root; //@line 78 "otdecode.c"
  $8 = $1; //@line 78 "otdecode.c"
  $9 = (_decode_cjson_op($7,$8)|0); //@line 78 "otdecode.c"
  $err = $9; //@line 78 "otdecode.c"
  $10 = $root; //@line 79 "otdecode.c"
  _cJSON_Delete($10); //@line 79 "otdecode.c"
  $11 = $err; //@line 80 "otdecode.c"
  $0 = $11; //@line 80 "otdecode.c"
  $12 = $0; //@line 81 "otdecode.c"
  STACKTOP = sp;return ($12|0); //@line 81 "otdecode.c"
 }
 return 0|0;
}
function _ot_encode($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $cjson = 0, $enc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $op;
 $1 = $0; //@line 55 "otencode.c"
 $2 = (_cjson_op($1)|0); //@line 55 "otencode.c"
 $cjson = $2; //@line 55 "otencode.c"
 $3 = $cjson; //@line 56 "otencode.c"
 $4 = (_cJSON_PrintUnformatted($3)|0); //@line 56 "otencode.c"
 $enc = $4; //@line 56 "otencode.c"
 $5 = $cjson; //@line 57 "otencode.c"
 _cJSON_Delete($5); //@line 57 "otencode.c"
 $6 = $enc; //@line 59 "otencode.c"
 STACKTOP = sp;return ($6|0); //@line 59 "otencode.c"
}
function _cjson_op($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $component = 0, $components = 0, $comps = 0, $count = 0, $count1 = 0, $elem = 0, $hash = 0;
 var $i = 0, $parent = 0, $root = 0, $t = 0, $text = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $parent = sp + 44|0;
 $hash = sp + 85|0;
 $0 = $op;
 $1 = $0; //@line 9 "otencode.c"
 $2 = (($1) + 44|0); //@line 9 "otencode.c"
 $3 = (($2) + 12|0); //@line 9 "otencode.c"
 $4 = HEAP32[$3>>2]|0; //@line 9 "otencode.c"
 $comps = $4; //@line 9 "otencode.c"
 $5 = (_cJSON_CreateArray()|0); //@line 10 "otencode.c"
 $components = $5; //@line 10 "otencode.c"
 $i = 0; //@line 11 "otencode.c"
 while(1) {
  $6 = $i; //@line 11 "otencode.c"
  $7 = $0; //@line 11 "otencode.c"
  $8 = (($7) + 44|0); //@line 11 "otencode.c"
  $9 = HEAP32[$8>>2]|0; //@line 11 "otencode.c"
  $10 = ($6>>>0)<($9>>>0); //@line 11 "otencode.c"
  if (!($10)) {
   break;
  }
  $11 = $i; //@line 12 "otencode.c"
  $12 = $comps; //@line 12 "otencode.c"
  $13 = (($12) + (($11*36)|0)|0); //@line 12 "otencode.c"
  $14 = HEAP32[$13>>2]|0; //@line 12 "otencode.c"
  $t = $14; //@line 12 "otencode.c"
  $15 = (_cJSON_CreateObject()|0); //@line 13 "otencode.c"
  $component = $15; //@line 13 "otencode.c"
  $16 = $t; //@line 14 "otencode.c"
  $17 = ($16|0)==(0); //@line 14 "otencode.c"
  if ($17) {
   $18 = $component; //@line 15 "otencode.c"
   $19 = (_cJSON_CreateString(824)|0); //@line 15 "otencode.c"
   _cJSON_AddItemToObject($18,816,$19); //@line 15 "otencode.c"
   $20 = $i; //@line 16 "otencode.c"
   $21 = $comps; //@line 16 "otencode.c"
   $22 = (($21) + (($20*36)|0)|0); //@line 16 "otencode.c"
   $23 = (($22) + 4|0); //@line 16 "otencode.c"
   $24 = HEAP32[$23>>2]|0; //@line 16 "otencode.c"
   $count = $24; //@line 16 "otencode.c"
   $25 = $component; //@line 17 "otencode.c"
   $26 = $count; //@line 17 "otencode.c"
   $27 = (+($26>>>0)); //@line 17 "otencode.c"
   $28 = (_cJSON_CreateNumber($27)|0); //@line 17 "otencode.c"
   _cJSON_AddItemToObject($25,832,$28); //@line 17 "otencode.c"
  } else {
   $29 = $t; //@line 18 "otencode.c"
   $30 = ($29|0)==(1); //@line 18 "otencode.c"
   if ($30) {
    $31 = $component; //@line 19 "otencode.c"
    $32 = (_cJSON_CreateString(840)|0); //@line 19 "otencode.c"
    _cJSON_AddItemToObject($31,816,$32); //@line 19 "otencode.c"
    $33 = $i; //@line 20 "otencode.c"
    $34 = $comps; //@line 20 "otencode.c"
    $35 = (($34) + (($33*36)|0)|0); //@line 20 "otencode.c"
    $36 = (($35) + 4|0); //@line 20 "otencode.c"
    $37 = HEAP32[$36>>2]|0; //@line 20 "otencode.c"
    $text = $37; //@line 20 "otencode.c"
    $38 = $component; //@line 21 "otencode.c"
    $39 = $text; //@line 21 "otencode.c"
    $40 = (_cJSON_CreateString($39)|0); //@line 21 "otencode.c"
    _cJSON_AddItemToObject($38,848,$40); //@line 21 "otencode.c"
   } else {
    $41 = $t; //@line 22 "otencode.c"
    $42 = ($41|0)==(2); //@line 22 "otencode.c"
    if ($42) {
     $43 = $component; //@line 23 "otencode.c"
     $44 = (_cJSON_CreateString(856)|0); //@line 23 "otencode.c"
     _cJSON_AddItemToObject($43,816,$44); //@line 23 "otencode.c"
     $45 = $i; //@line 24 "otencode.c"
     $46 = $comps; //@line 24 "otencode.c"
     $47 = (($46) + (($45*36)|0)|0); //@line 24 "otencode.c"
     $48 = (($47) + 4|0); //@line 24 "otencode.c"
     $49 = HEAP32[$48>>2]|0; //@line 24 "otencode.c"
     $count1 = $49; //@line 24 "otencode.c"
     $50 = $component; //@line 25 "otencode.c"
     $51 = $count1; //@line 25 "otencode.c"
     $52 = (+($51>>>0)); //@line 25 "otencode.c"
     $53 = (_cJSON_CreateNumber($52)|0); //@line 25 "otencode.c"
     _cJSON_AddItemToObject($50,832,$53); //@line 25 "otencode.c"
    } else {
     $54 = $t; //@line 26 "otencode.c"
     $55 = ($54|0)==(3); //@line 26 "otencode.c"
     if ($55) {
      $56 = $component; //@line 27 "otencode.c"
      $57 = (_cJSON_CreateString(864)|0); //@line 27 "otencode.c"
      _cJSON_AddItemToObject($56,816,$57); //@line 27 "otencode.c"
      $58 = $i; //@line 28 "otencode.c"
      $59 = $comps; //@line 28 "otencode.c"
      $60 = (($59) + (($58*36)|0)|0); //@line 28 "otencode.c"
      $61 = (($60) + 4|0); //@line 28 "otencode.c"
      $62 = HEAP32[$61>>2]|0; //@line 28 "otencode.c"
      $elem = $62; //@line 28 "otencode.c"
      $63 = $component; //@line 29 "otencode.c"
      $64 = $elem; //@line 29 "otencode.c"
      $65 = (_cJSON_CreateString($64)|0); //@line 29 "otencode.c"
      _cJSON_AddItemToObject($63,880,$65); //@line 29 "otencode.c"
     } else {
      $66 = $t; //@line 30 "otencode.c"
      $67 = ($66|0)==(4); //@line 30 "otencode.c"
      if ($67) {
       $68 = $component; //@line 31 "otencode.c"
       $69 = (_cJSON_CreateString(888)|0); //@line 31 "otencode.c"
       _cJSON_AddItemToObject($68,816,$69); //@line 31 "otencode.c"
      } else {
       $70 = $t; //@line 32 "otencode.c"
       $71 = ($70|0)==(5); //@line 32 "otencode.c"
       if ($71) {
       }
      }
     }
    }
   }
  }
  $72 = $components; //@line 35 "otencode.c"
  $73 = $component; //@line 35 "otencode.c"
  _cJSON_AddItemToArray($72,$73); //@line 35 "otencode.c"
  $74 = $i; //@line 11 "otencode.c"
  $75 = (($74) + 1)|0; //@line 11 "otencode.c"
  $i = $75; //@line 11 "otencode.c"
 }
 dest=$parent+0|0; stop=dest+41|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0)); //@line 38 "otencode.c"
 $76 = $0; //@line 39 "otencode.c"
 $77 = (($76) + 4|0); //@line 39 "otencode.c"
 (_atohex($parent,$77,20)|0); //@line 39 "otencode.c"
 dest=$hash+0|0; stop=dest+41|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0)); //@line 41 "otencode.c"
 $78 = $0; //@line 42 "otencode.c"
 $79 = (($78) + 24|0); //@line 42 "otencode.c"
 (_atohex($hash,$79,20)|0); //@line 42 "otencode.c"
 $80 = (_cJSON_CreateObject()|0); //@line 45 "otencode.c"
 $root = $80; //@line 45 "otencode.c"
 $81 = $root; //@line 46 "otencode.c"
 $82 = $0; //@line 46 "otencode.c"
 $83 = HEAP32[$82>>2]|0; //@line 46 "otencode.c"
 $84 = (+($83>>>0)); //@line 46 "otencode.c"
 $85 = (_cJSON_CreateNumber($84)|0); //@line 46 "otencode.c"
 _cJSON_AddItemToObject($81,904,$85); //@line 46 "otencode.c"
 $86 = $root; //@line 47 "otencode.c"
 $87 = (_cJSON_CreateString($parent)|0); //@line 47 "otencode.c"
 _cJSON_AddItemToObject($86,920,$87); //@line 47 "otencode.c"
 $88 = $root; //@line 48 "otencode.c"
 $89 = (_cJSON_CreateString($hash)|0); //@line 48 "otencode.c"
 _cJSON_AddItemToObject($88,928,$89); //@line 48 "otencode.c"
 $90 = $root; //@line 49 "otencode.c"
 $91 = $components; //@line 49 "otencode.c"
 _cJSON_AddItemToObject($90,936,$91); //@line 49 "otencode.c"
 $92 = $root; //@line 51 "otencode.c"
 STACKTOP = sp;return ($92|0); //@line 51 "otencode.c"
}
function _ot_new_server($send,$event) {
 $send = $send|0;
 $event = $event|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $server = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $send;
 $1 = $event;
 $2 = (_malloc(12)|0); //@line 89 "server.c"
 $server = $2; //@line 89 "server.c"
 $3 = $0; //@line 90 "server.c"
 $4 = $server; //@line 90 "server.c"
 HEAP32[$4>>2] = $3; //@line 90 "server.c"
 $5 = $1; //@line 91 "server.c"
 $6 = $server; //@line 91 "server.c"
 $7 = (($6) + 4|0); //@line 91 "server.c"
 HEAP32[$7>>2] = $5; //@line 91 "server.c"
 $8 = $server; //@line 92 "server.c"
 $9 = (($8) + 8|0); //@line 92 "server.c"
 HEAP32[$9>>2] = 0; //@line 92 "server.c"
 $10 = $server; //@line 94 "server.c"
 STACKTOP = sp;return ($10|0); //@line 94 "server.c"
}
function _ot_server_open($server,$doc) {
 $server = $server|0;
 $doc = $doc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $server;
 $1 = $doc;
 $2 = $1; //@line 105 "server.c"
 $3 = $0; //@line 105 "server.c"
 $4 = (($3) + 8|0); //@line 105 "server.c"
 HEAP32[$4>>2] = $2; //@line 105 "server.c"
 STACKTOP = sp;return; //@line 105 "server.c"
}
function _ot_server_receive($server,$op) {
 $server = $server|0;
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dec = 0, $doc = 0, $doc_enc = 0, $err = 0, $op_prime = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $server;
 $1 = $op;
 $2 = HEAP32[_stderr>>2]|0; //@line 108 "server.c"
 $3 = $1; //@line 108 "server.c"
 HEAP32[$vararg_buffer>>2] = $3; //@line 108 "server.c"
 (_fprintf(($2|0),(952|0),($vararg_buffer|0))|0); //@line 108 "server.c"
 $4 = (_ot_new_op(0,976)|0); //@line 110 "server.c"
 $dec = $4; //@line 110 "server.c"
 $5 = $dec; //@line 111 "server.c"
 $6 = $1; //@line 111 "server.c"
 $7 = (_ot_decode($5,$6)|0); //@line 111 "server.c"
 $err = $7; //@line 111 "server.c"
 $8 = $err; //@line 112 "server.c"
 $9 = ($8|0)!=(0); //@line 112 "server.c"
 if ($9) {
  $10 = HEAP32[_stderr>>2]|0; //@line 113 "server.c"
  $11 = $1; //@line 113 "server.c"
  HEAP32[$vararg_buffer1>>2] = $11; //@line 113 "server.c"
  (_fprintf(($10|0),(984|0),($vararg_buffer1|0))|0); //@line 113 "server.c"
  $12 = $dec; //@line 114 "server.c"
  _ot_free_op($12); //@line 114 "server.c"
  STACKTOP = sp;return; //@line 133 "server.c"
 }
 $13 = $0; //@line 118 "server.c"
 $14 = (($13) + 8|0); //@line 118 "server.c"
 $15 = HEAP32[$14>>2]|0; //@line 118 "server.c"
 $doc = $15; //@line 118 "server.c"
 $16 = $doc; //@line 119 "server.c"
 $17 = ($16|0)==(0|0); //@line 119 "server.c"
 if ($17) {
  $18 = (_ot_new_doc()|0); //@line 120 "server.c"
  $19 = $0; //@line 120 "server.c"
  $20 = (($19) + 8|0); //@line 120 "server.c"
  HEAP32[$20>>2] = $18; //@line 120 "server.c"
  $21 = $0; //@line 121 "server.c"
  $22 = (($21) + 8|0); //@line 121 "server.c"
  $23 = HEAP32[$22>>2]|0; //@line 121 "server.c"
  $doc = $23; //@line 121 "server.c"
  $24 = $0; //@line 122 "server.c"
  $25 = $dec; //@line 122 "server.c"
  _append_op($24,$25); //@line 122 "server.c"
 } else {
  $26 = $doc; //@line 123 "server.c"
  $27 = $dec; //@line 123 "server.c"
  $28 = (_can_append($26,$27)|0); //@line 123 "server.c"
  if ($28) {
   $29 = $0; //@line 124 "server.c"
   $30 = $dec; //@line 124 "server.c"
   _append_op($29,$30); //@line 124 "server.c"
  } else {
   $31 = $doc; //@line 126 "server.c"
   $32 = $dec; //@line 126 "server.c"
   $33 = (_xform($31,$32)|0); //@line 126 "server.c"
   $op_prime = $33; //@line 126 "server.c"
   $34 = $dec; //@line 127 "server.c"
   _ot_free_op($34); //@line 127 "server.c"
   $35 = $0; //@line 128 "server.c"
   $36 = $op_prime; //@line 128 "server.c"
   _append_op($35,$36); //@line 128 "server.c"
  }
 }
 $37 = $doc; //@line 131 "server.c"
 $38 = (($37) + 16|0); //@line 131 "server.c"
 $39 = HEAP32[$38>>2]|0; //@line 131 "server.c"
 $40 = (_ot_encode($39)|0); //@line 131 "server.c"
 $doc_enc = $40; //@line 131 "server.c"
 $41 = HEAP32[_stderr>>2]|0; //@line 132 "server.c"
 $42 = $doc_enc; //@line 132 "server.c"
 HEAP32[$vararg_buffer4>>2] = $42; //@line 132 "server.c"
 (_fprintf(($41|0),(1016|0),($vararg_buffer4|0))|0); //@line 132 "server.c"
 $43 = $doc_enc; //@line 133 "server.c"
 _free($43); //@line 133 "server.c"
 STACKTOP = sp;return; //@line 133 "server.c"
}
function _append_op($server,$op) {
 $server = $server|0;
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $append_enc = 0, $doc = 0;
 var $doc_enc = 0, $err = 0, $op_enc = 0, $op_enc1 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer7 = sp + 16|0;
 $vararg_buffer5 = sp;
 $vararg_buffer1 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $1 = sp + 36|0;
 $0 = $server;
 HEAP32[$1>>2] = $op;
 $2 = $0; //@line 23 "server.c"
 $3 = (($2) + 8|0); //@line 23 "server.c"
 $4 = HEAP32[$3>>2]|0; //@line 23 "server.c"
 $doc = $4; //@line 23 "server.c"
 $5 = $doc; //@line 25 "server.c"
 $6 = (($5) + 16|0); //@line 25 "server.c"
 $7 = HEAP32[$6>>2]|0; //@line 25 "server.c"
 $8 = ($7|0)==(0|0); //@line 25 "server.c"
 if ($8) {
  $9 = HEAP32[$1>>2]|0; //@line 26 "server.c"
  $10 = (_ot_encode($9)|0); //@line 26 "server.c"
  $op_enc = $10; //@line 26 "server.c"
  $11 = HEAP32[_stderr>>2]|0; //@line 27 "server.c"
  $12 = $op_enc; //@line 27 "server.c"
  HEAP32[$vararg_buffer>>2] = $12; //@line 27 "server.c"
  (_fprintf(($11|0),(1208|0),($vararg_buffer|0))|0); //@line 27 "server.c"
  $13 = $op_enc; //@line 28 "server.c"
  _free($13); //@line 28 "server.c"
 } else {
  $14 = $doc; //@line 30 "server.c"
  $15 = (($14) + 16|0); //@line 30 "server.c"
  $16 = HEAP32[$15>>2]|0; //@line 30 "server.c"
  $17 = (_ot_encode($16)|0); //@line 30 "server.c"
  $doc_enc = $17; //@line 30 "server.c"
  $18 = HEAP32[$1>>2]|0; //@line 31 "server.c"
  $19 = (_ot_encode($18)|0); //@line 31 "server.c"
  $op_enc1 = $19; //@line 31 "server.c"
  $20 = HEAP32[_stderr>>2]|0; //@line 32 "server.c"
  $21 = $doc_enc; //@line 32 "server.c"
  $22 = $op_enc1; //@line 32 "server.c"
  HEAP32[$vararg_buffer1>>2] = $21; //@line 32 "server.c"
  $vararg_ptr4 = (($vararg_buffer1) + 4|0); //@line 32 "server.c"
  HEAP32[$vararg_ptr4>>2] = $22; //@line 32 "server.c"
  (_fprintf(($20|0),(1240|0),($vararg_buffer1|0))|0); //@line 32 "server.c"
  $23 = $doc_enc; //@line 33 "server.c"
  _free($23); //@line 33 "server.c"
  $24 = $op_enc1; //@line 34 "server.c"
  _free($24); //@line 34 "server.c"
 }
 $25 = $doc; //@line 37 "server.c"
 $26 = (_ot_doc_append($25,$1)|0); //@line 37 "server.c"
 $err = $26; //@line 37 "server.c"
 $27 = $err; //@line 38 "server.c"
 $28 = ($27|0)!=(0); //@line 38 "server.c"
 if ($28) {
  $29 = HEAP32[_stderr>>2]|0; //@line 39 "server.c"
  (_fprintf(($29|0),(1272|0),($vararg_buffer5|0))|0); //@line 39 "server.c"
  STACKTOP = sp;return; //@line 46 "server.c"
 } else {
  $30 = HEAP32[$1>>2]|0; //@line 43 "server.c"
  $31 = (_ot_encode($30)|0); //@line 43 "server.c"
  $append_enc = $31; //@line 43 "server.c"
  $32 = $0; //@line 44 "server.c"
  $33 = HEAP32[$32>>2]|0; //@line 44 "server.c"
  $34 = $append_enc; //@line 44 "server.c"
  (FUNCTION_TABLE_ii[$33 & 15]($34)|0); //@line 44 "server.c"
  $35 = HEAP32[_stderr>>2]|0; //@line 45 "server.c"
  $36 = $append_enc; //@line 45 "server.c"
  HEAP32[$vararg_buffer7>>2] = $36; //@line 45 "server.c"
  (_fprintf(($35|0),(1296|0),($vararg_buffer7|0))|0); //@line 45 "server.c"
  $37 = $append_enc; //@line 46 "server.c"
  _free($37); //@line 46 "server.c"
  STACKTOP = sp;return; //@line 46 "server.c"
 }
}
function _can_append($doc,$op) {
 $doc = $doc|0;
 $op = $op|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $parent = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $doc;
 $2 = $op;
 $3 = $2; //@line 4 "server.c"
 $4 = (($3) + 4|0); //@line 4 "server.c"
 $parent = $4; //@line 4 "server.c"
 $5 = $1; //@line 5 "server.c"
 $6 = (($5) + 16|0); //@line 5 "server.c"
 $7 = HEAP32[$6>>2]|0; //@line 5 "server.c"
 $8 = (($7) + 24|0); //@line 5 "server.c"
 $9 = $parent; //@line 5 "server.c"
 $10 = (_memcmp($8,$9,20)|0); //@line 5 "server.c"
 $11 = ($10|0)==(0); //@line 5 "server.c"
 do {
  if ($11) {
   $$expand_i1_val = 1; //@line 6 "server.c"
   $0 = $$expand_i1_val; //@line 6 "server.c"
  } else {
   $12 = $1; //@line 9 "server.c"
   $13 = HEAP32[$12>>2]|0; //@line 9 "server.c"
   $14 = ($13|0)==(0); //@line 9 "server.c"
   if (!($14)) {
    $$expand_i1_val6 = 0; //@line 19 "server.c"
    $0 = $$expand_i1_val6; //@line 19 "server.c"
    break;
   }
   $i = 0; //@line 10 "server.c"
   while(1) {
    $15 = $i; //@line 10 "server.c"
    $16 = ($15|0)<(20); //@line 10 "server.c"
    if (!($16)) {
     label = 10;
     break;
    }
    $17 = $i; //@line 11 "server.c"
    $18 = $parent; //@line 11 "server.c"
    $19 = (($18) + ($17)|0); //@line 11 "server.c"
    $20 = HEAP8[$19>>0]|0; //@line 11 "server.c"
    $21 = $20&255; //@line 11 "server.c"
    $22 = ($21|0)!=(0); //@line 11 "server.c"
    if ($22) {
     label = 7;
     break;
    }
    $23 = $i; //@line 10 "server.c"
    $24 = (($23) + 1)|0; //@line 10 "server.c"
    $i = $24; //@line 10 "server.c"
   }
   if ((label|0) == 7) {
    $$expand_i1_val2 = 0; //@line 12 "server.c"
    $0 = $$expand_i1_val2; //@line 12 "server.c"
    break;
   }
   else if ((label|0) == 10) {
    $$expand_i1_val4 = 1; //@line 16 "server.c"
    $0 = $$expand_i1_val4; //@line 16 "server.c"
    break;
   }
  }
 } while(0);
 $$pre_trunc = $0; //@line 19 "server.c"
 $25 = $$pre_trunc&1; //@line 19 "server.c"
 STACKTOP = sp;return ($25|0); //@line 19 "server.c"
}
function _xform($doc,$op) {
 $doc = $doc|0;
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $composed = 0, $composed_enc = 0, $op1_prime_enc = 0, $op2_prime_enc = 0, $op_enc = 0, $p = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0;
 var $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr4 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer7 = sp + 8|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 24|0;
 $p = sp + 56|0;
 $1 = $doc;
 $2 = $op;
 $3 = $2; //@line 50 "server.c"
 $4 = (_ot_encode($3)|0); //@line 50 "server.c"
 $op_enc = $4; //@line 50 "server.c"
 $5 = $1; //@line 51 "server.c"
 $6 = $2; //@line 51 "server.c"
 $7 = (($6) + 4|0); //@line 51 "server.c"
 $8 = (_ot_doc_compose_after($5,$7)|0); //@line 51 "server.c"
 $composed = $8; //@line 51 "server.c"
 $9 = $composed; //@line 52 "server.c"
 $10 = ($9|0)==(0|0); //@line 52 "server.c"
 if ($10) {
  $11 = HEAP32[_stderr>>2]|0; //@line 53 "server.c"
  $12 = $op_enc; //@line 53 "server.c"
  HEAP32[$vararg_buffer>>2] = $12; //@line 53 "server.c"
  (_fprintf(($11|0),(1048|0),($vararg_buffer|0))|0); //@line 53 "server.c"
  $13 = $op_enc; //@line 56 "server.c"
  _free($13); //@line 56 "server.c"
  $0 = 0; //@line 57 "server.c"
  $50 = $0; //@line 86 "server.c"
  STACKTOP = sp;return ($50|0); //@line 86 "server.c"
 }
 $14 = $composed; //@line 60 "server.c"
 $15 = (_ot_encode($14)|0); //@line 60 "server.c"
 $composed_enc = $15; //@line 60 "server.c"
 $16 = HEAP32[_stderr>>2]|0; //@line 61 "server.c"
 $17 = $composed_enc; //@line 61 "server.c"
 $18 = $op_enc; //@line 61 "server.c"
 HEAP32[$vararg_buffer1>>2] = $17; //@line 61 "server.c"
 $vararg_ptr4 = (($vararg_buffer1) + 4|0); //@line 61 "server.c"
 HEAP32[$vararg_ptr4>>2] = $18; //@line 61 "server.c"
 (_fprintf(($16|0),(1104|0),($vararg_buffer1|0))|0); //@line 61 "server.c"
 $19 = $composed_enc; //@line 62 "server.c"
 _free($19); //@line 62 "server.c"
 $20 = $composed; //@line 63 "server.c"
 $21 = $2; //@line 63 "server.c"
 _ot_xform($p,$20,$21); //@line 63 "server.c"
 $22 = HEAP32[$p>>2]|0; //@line 64 "server.c"
 $23 = ($22|0)==(0|0); //@line 64 "server.c"
 if (!($23)) {
  $24 = (($p) + 4|0); //@line 64 "server.c"
  $25 = HEAP32[$24>>2]|0; //@line 64 "server.c"
  $26 = ($25|0)==(0|0); //@line 64 "server.c"
  if (!($26)) {
   $30 = HEAP32[$p>>2]|0; //@line 71 "server.c"
   $31 = (_ot_encode($30)|0); //@line 71 "server.c"
   $op1_prime_enc = $31; //@line 71 "server.c"
   $32 = (($p) + 4|0); //@line 72 "server.c"
   $33 = HEAP32[$32>>2]|0; //@line 72 "server.c"
   $34 = (_ot_encode($33)|0); //@line 72 "server.c"
   $op2_prime_enc = $34; //@line 72 "server.c"
   $35 = HEAP32[_stderr>>2]|0; //@line 74 "server.c"
   $36 = $op1_prime_enc; //@line 74 "server.c"
   $37 = $op2_prime_enc; //@line 74 "server.c"
   HEAP32[$vararg_buffer7>>2] = $36; //@line 74 "server.c"
   $vararg_ptr10 = (($vararg_buffer7) + 4|0); //@line 74 "server.c"
   HEAP32[$vararg_ptr10>>2] = $37; //@line 74 "server.c"
   (_fprintf(($35|0),(1168|0),($vararg_buffer7|0))|0); //@line 74 "server.c"
   $38 = $op_enc; //@line 77 "server.c"
   _free($38); //@line 77 "server.c"
   $39 = $op1_prime_enc; //@line 78 "server.c"
   _free($39); //@line 78 "server.c"
   $40 = $op2_prime_enc; //@line 79 "server.c"
   _free($40); //@line 79 "server.c"
   $41 = HEAP32[$p>>2]|0; //@line 80 "server.c"
   _ot_free_op($41); //@line 80 "server.c"
   $42 = (($p) + 4|0); //@line 82 "server.c"
   $43 = HEAP32[$42>>2]|0; //@line 82 "server.c"
   $44 = (($43) + 4|0); //@line 82 "server.c"
   $45 = $composed; //@line 82 "server.c"
   $46 = (($45) + 24|0); //@line 82 "server.c"
   dest=$44+0|0; src=$46+0|0; stop=dest+20|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0)); //@line 82 "server.c"
   $47 = $composed; //@line 83 "server.c"
   _ot_free_op($47); //@line 83 "server.c"
   $48 = (($p) + 4|0); //@line 85 "server.c"
   $49 = HEAP32[$48>>2]|0; //@line 85 "server.c"
   $0 = $49; //@line 85 "server.c"
   $50 = $0; //@line 86 "server.c"
   STACKTOP = sp;return ($50|0); //@line 86 "server.c"
  }
 }
 $27 = HEAP32[_stderr>>2]|0; //@line 65 "server.c"
 (_fprintf(($27|0),(1136|0),($vararg_buffer5|0))|0); //@line 65 "server.c"
 $28 = $op_enc; //@line 66 "server.c"
 _free($28); //@line 66 "server.c"
 $29 = $composed; //@line 67 "server.c"
 _ot_free_op($29); //@line 67 "server.c"
 $0 = 0; //@line 68 "server.c"
 $50 = $0; //@line 86 "server.c"
 STACKTOP = sp;return ($50|0); //@line 86 "server.c"
}
function _sha1_init($md) {
 $md = $md|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $md;
 $1 = $0; //@line 113 "sha1.c"
 $2 = ($1|0)!=(0|0); //@line 113 "sha1.c"
 if ($2) {
  $3 = $0; //@line 114 "sha1.c"
  $4 = (($3) + 8|0); //@line 114 "sha1.c"
  HEAP32[$4>>2] = 1732584193; //@line 114 "sha1.c"
  $5 = $0; //@line 115 "sha1.c"
  $6 = (($5) + 8|0); //@line 115 "sha1.c"
  $7 = (($6) + 4|0); //@line 115 "sha1.c"
  HEAP32[$7>>2] = -271733879; //@line 115 "sha1.c"
  $8 = $0; //@line 116 "sha1.c"
  $9 = (($8) + 8|0); //@line 116 "sha1.c"
  $10 = (($9) + 8|0); //@line 116 "sha1.c"
  HEAP32[$10>>2] = -1732584194; //@line 116 "sha1.c"
  $11 = $0; //@line 117 "sha1.c"
  $12 = (($11) + 8|0); //@line 117 "sha1.c"
  $13 = (($12) + 12|0); //@line 117 "sha1.c"
  HEAP32[$13>>2] = 271733878; //@line 117 "sha1.c"
  $14 = $0; //@line 118 "sha1.c"
  $15 = (($14) + 8|0); //@line 118 "sha1.c"
  $16 = (($15) + 16|0); //@line 118 "sha1.c"
  HEAP32[$16>>2] = -1009589776; //@line 118 "sha1.c"
  $17 = $0; //@line 119 "sha1.c"
  $18 = (($17) + 28|0); //@line 119 "sha1.c"
  HEAP32[$18>>2] = 0; //@line 119 "sha1.c"
  $19 = $0; //@line 120 "sha1.c"
  $20 = $19; //@line 120 "sha1.c"
  $21 = $20; //@line 120 "sha1.c"
  HEAP32[$21>>2] = 0; //@line 120 "sha1.c"
  $22 = (($20) + 4)|0; //@line 120 "sha1.c"
  $23 = $22; //@line 120 "sha1.c"
  HEAP32[$23>>2] = 0; //@line 120 "sha1.c"
  STACKTOP = sp;return 0; //@line 121 "sha1.c"
 } else {
  ___assert_fail((1320|0),(1336|0),113,(1344|0)); //@line 113 "sha1.c"
  // unreachable; //@line 113 "sha1.c"
 }
 return 0|0;
}
function _sha1_process($md,$in,$inlen) {
 $md = $md|0;
 $in = $in|0;
 $inlen = $inlen|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $err = 0;
 var $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $md;
 $2 = $in;
 $3 = $inlen;
 $4 = $1; //@line 131 "sha1.c"
 $5 = ($4|0)!=(0|0); //@line 131 "sha1.c"
 if (!($5)) {
  ___assert_fail((1320|0),(1336|0),131,(1360|0)); //@line 131 "sha1.c"
  // unreachable; //@line 131 "sha1.c"
 }
 $6 = $2; //@line 131 "sha1.c"
 $7 = ($6|0)!=(0|0); //@line 131 "sha1.c"
 if (!($7)) {
  ___assert_fail((1376|0),(1336|0),131,(1360|0)); //@line 131 "sha1.c"
  // unreachable; //@line 131 "sha1.c"
 }
 $8 = $1; //@line 131 "sha1.c"
 $9 = (($8) + 28|0); //@line 131 "sha1.c"
 $10 = HEAP32[$9>>2]|0; //@line 131 "sha1.c"
 $11 = ($10>>>0)>(64); //@line 131 "sha1.c"
 if ($11) {
  $0 = 1; //@line 131 "sha1.c"
  $98 = $0; //@line 131 "sha1.c"
  STACKTOP = sp;return ($98|0); //@line 131 "sha1.c"
 }
 while(1) {
  $12 = $3; //@line 131 "sha1.c"
  $13 = ($12>>>0)>(0); //@line 131 "sha1.c"
  if (!($13)) {
   label = 23;
   break;
  }
  $14 = $1; //@line 131 "sha1.c"
  $15 = (($14) + 28|0); //@line 131 "sha1.c"
  $16 = HEAP32[$15>>2]|0; //@line 131 "sha1.c"
  $17 = ($16|0)==(0); //@line 131 "sha1.c"
  if ($17) {
   $18 = $3; //@line 131 "sha1.c"
   $19 = ($18>>>0)>=(64); //@line 131 "sha1.c"
   if ($19) {
    $20 = $1; //@line 131 "sha1.c"
    $21 = $2; //@line 131 "sha1.c"
    $22 = (_sha1_compress($20,$21)|0); //@line 131 "sha1.c"
    $err = $22; //@line 131 "sha1.c"
    $23 = ($22|0)!=(0); //@line 131 "sha1.c"
    if ($23) {
     label = 12;
     break;
    }
    $25 = $1; //@line 131 "sha1.c"
    $26 = $25; //@line 131 "sha1.c"
    $27 = $26; //@line 131 "sha1.c"
    $28 = HEAP32[$27>>2]|0; //@line 131 "sha1.c"
    $29 = (($26) + 4)|0; //@line 131 "sha1.c"
    $30 = $29; //@line 131 "sha1.c"
    $31 = HEAP32[$30>>2]|0; //@line 131 "sha1.c"
    $32 = (_i64Add(($28|0),($31|0),512,0)|0); //@line 131 "sha1.c"
    $33 = tempRet0; //@line 131 "sha1.c"
    $34 = $25; //@line 131 "sha1.c"
    $35 = $34; //@line 131 "sha1.c"
    HEAP32[$35>>2] = $32; //@line 131 "sha1.c"
    $36 = (($34) + 4)|0; //@line 131 "sha1.c"
    $37 = $36; //@line 131 "sha1.c"
    HEAP32[$37>>2] = $33; //@line 131 "sha1.c"
    $38 = $2; //@line 131 "sha1.c"
    $39 = (($38) + 64|0); //@line 131 "sha1.c"
    $2 = $39; //@line 131 "sha1.c"
    $40 = $3; //@line 131 "sha1.c"
    $41 = (($40) - 64)|0; //@line 131 "sha1.c"
    $3 = $41; //@line 131 "sha1.c"
   } else {
    label = 14;
   }
  } else {
   label = 14;
  }
  if ((label|0) == 14) {
   label = 0;
   $42 = $3; //@line 131 "sha1.c"
   $43 = $1; //@line 131 "sha1.c"
   $44 = (($43) + 28|0); //@line 131 "sha1.c"
   $45 = HEAP32[$44>>2]|0; //@line 131 "sha1.c"
   $46 = (64 - ($45))|0; //@line 131 "sha1.c"
   $47 = ($42>>>0)<($46>>>0); //@line 131 "sha1.c"
   if ($47) {
    $48 = $3; //@line 131 "sha1.c"
    $53 = $48;
   } else {
    $49 = $1; //@line 131 "sha1.c"
    $50 = (($49) + 28|0); //@line 131 "sha1.c"
    $51 = HEAP32[$50>>2]|0; //@line 131 "sha1.c"
    $52 = (64 - ($51))|0; //@line 131 "sha1.c"
    $53 = $52;
   }
   $n = $53; //@line 131 "sha1.c"
   $54 = $1; //@line 131 "sha1.c"
   $55 = (($54) + 32|0); //@line 131 "sha1.c"
   $56 = $1; //@line 131 "sha1.c"
   $57 = (($56) + 28|0); //@line 131 "sha1.c"
   $58 = HEAP32[$57>>2]|0; //@line 131 "sha1.c"
   $59 = (($55) + ($58)|0); //@line 131 "sha1.c"
   $60 = $2; //@line 131 "sha1.c"
   $61 = $n; //@line 131 "sha1.c"
   _memcpy(($59|0),($60|0),($61|0))|0; //@line 131 "sha1.c"
   $62 = $n; //@line 131 "sha1.c"
   $63 = $1; //@line 131 "sha1.c"
   $64 = (($63) + 28|0); //@line 131 "sha1.c"
   $65 = HEAP32[$64>>2]|0; //@line 131 "sha1.c"
   $66 = (($65) + ($62))|0; //@line 131 "sha1.c"
   HEAP32[$64>>2] = $66; //@line 131 "sha1.c"
   $67 = $n; //@line 131 "sha1.c"
   $68 = $2; //@line 131 "sha1.c"
   $69 = (($68) + ($67)|0); //@line 131 "sha1.c"
   $2 = $69; //@line 131 "sha1.c"
   $70 = $n; //@line 131 "sha1.c"
   $71 = $3; //@line 131 "sha1.c"
   $72 = (($71) - ($70))|0; //@line 131 "sha1.c"
   $3 = $72; //@line 131 "sha1.c"
   $73 = $1; //@line 131 "sha1.c"
   $74 = (($73) + 28|0); //@line 131 "sha1.c"
   $75 = HEAP32[$74>>2]|0; //@line 131 "sha1.c"
   $76 = ($75|0)==(64); //@line 131 "sha1.c"
   if ($76) {
    $77 = $1; //@line 131 "sha1.c"
    $78 = $1; //@line 131 "sha1.c"
    $79 = (($78) + 32|0); //@line 131 "sha1.c"
    $80 = (_sha1_compress($77,$79)|0); //@line 131 "sha1.c"
    $err = $80; //@line 131 "sha1.c"
    $81 = ($80|0)!=(0); //@line 131 "sha1.c"
    if ($81) {
     label = 19;
     break;
    }
    $83 = $1; //@line 131 "sha1.c"
    $84 = $83; //@line 131 "sha1.c"
    $85 = $84; //@line 131 "sha1.c"
    $86 = HEAP32[$85>>2]|0; //@line 131 "sha1.c"
    $87 = (($84) + 4)|0; //@line 131 "sha1.c"
    $88 = $87; //@line 131 "sha1.c"
    $89 = HEAP32[$88>>2]|0; //@line 131 "sha1.c"
    $90 = (_i64Add(($86|0),($89|0),512,0)|0); //@line 131 "sha1.c"
    $91 = tempRet0; //@line 131 "sha1.c"
    $92 = $83; //@line 131 "sha1.c"
    $93 = $92; //@line 131 "sha1.c"
    HEAP32[$93>>2] = $90; //@line 131 "sha1.c"
    $94 = (($92) + 4)|0; //@line 131 "sha1.c"
    $95 = $94; //@line 131 "sha1.c"
    HEAP32[$95>>2] = $91; //@line 131 "sha1.c"
    $96 = $1; //@line 131 "sha1.c"
    $97 = (($96) + 28|0); //@line 131 "sha1.c"
    HEAP32[$97>>2] = 0; //@line 131 "sha1.c"
   }
  }
 }
 if ((label|0) == 12) {
  $24 = $err; //@line 131 "sha1.c"
  $0 = $24; //@line 131 "sha1.c"
  $98 = $0; //@line 131 "sha1.c"
  STACKTOP = sp;return ($98|0); //@line 131 "sha1.c"
 }
 else if ((label|0) == 19) {
  $82 = $err; //@line 131 "sha1.c"
  $0 = $82; //@line 131 "sha1.c"
  $98 = $0; //@line 131 "sha1.c"
  STACKTOP = sp;return ($98|0); //@line 131 "sha1.c"
 }
 else if ((label|0) == 23) {
  $0 = 0; //@line 131 "sha1.c"
  $98 = $0; //@line 131 "sha1.c"
  STACKTOP = sp;return ($98|0); //@line 131 "sha1.c"
 }
 return 0|0;
}
function _sha1_done($md,$out) {
 $md = $md|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $md;
 $2 = $out;
 $3 = $1; //@line 142 "sha1.c"
 $4 = ($3|0)!=(0|0); //@line 142 "sha1.c"
 if (!($4)) {
  ___assert_fail((1320|0),(1336|0),142,(1392|0)); //@line 142 "sha1.c"
  // unreachable; //@line 142 "sha1.c"
 }
 $5 = $2; //@line 143 "sha1.c"
 $6 = ($5|0)!=(0|0); //@line 143 "sha1.c"
 if (!($6)) {
  ___assert_fail((1408|0),(1336|0),143,(1392|0)); //@line 143 "sha1.c"
  // unreachable; //@line 143 "sha1.c"
 }
 $7 = $1; //@line 145 "sha1.c"
 $8 = (($7) + 28|0); //@line 145 "sha1.c"
 $9 = HEAP32[$8>>2]|0; //@line 145 "sha1.c"
 $10 = ($9>>>0)>=(64); //@line 145 "sha1.c"
 if ($10) {
  $0 = 1; //@line 146 "sha1.c"
  $238 = $0; //@line 181 "sha1.c"
  STACKTOP = sp;return ($238|0); //@line 181 "sha1.c"
 }
 $11 = $1; //@line 150 "sha1.c"
 $12 = (($11) + 28|0); //@line 150 "sha1.c"
 $13 = HEAP32[$12>>2]|0; //@line 150 "sha1.c"
 $14 = $13<<3; //@line 150 "sha1.c"
 $15 = $1; //@line 150 "sha1.c"
 $16 = $15; //@line 150 "sha1.c"
 $17 = $16; //@line 150 "sha1.c"
 $18 = HEAP32[$17>>2]|0; //@line 150 "sha1.c"
 $19 = (($16) + 4)|0; //@line 150 "sha1.c"
 $20 = $19; //@line 150 "sha1.c"
 $21 = HEAP32[$20>>2]|0; //@line 150 "sha1.c"
 $22 = (_i64Add(($18|0),($21|0),($14|0),0)|0); //@line 150 "sha1.c"
 $23 = tempRet0; //@line 150 "sha1.c"
 $24 = $15; //@line 150 "sha1.c"
 $25 = $24; //@line 150 "sha1.c"
 HEAP32[$25>>2] = $22; //@line 150 "sha1.c"
 $26 = (($24) + 4)|0; //@line 150 "sha1.c"
 $27 = $26; //@line 150 "sha1.c"
 HEAP32[$27>>2] = $23; //@line 150 "sha1.c"
 $28 = $1; //@line 153 "sha1.c"
 $29 = (($28) + 28|0); //@line 153 "sha1.c"
 $30 = HEAP32[$29>>2]|0; //@line 153 "sha1.c"
 $31 = (($30) + 1)|0; //@line 153 "sha1.c"
 HEAP32[$29>>2] = $31; //@line 153 "sha1.c"
 $32 = $1; //@line 153 "sha1.c"
 $33 = (($32) + 32|0); //@line 153 "sha1.c"
 $34 = (($33) + ($30)|0); //@line 153 "sha1.c"
 HEAP8[$34>>0] = -128; //@line 153 "sha1.c"
 $35 = $1; //@line 159 "sha1.c"
 $36 = (($35) + 28|0); //@line 159 "sha1.c"
 $37 = HEAP32[$36>>2]|0; //@line 159 "sha1.c"
 $38 = ($37>>>0)>(56); //@line 159 "sha1.c"
 if ($38) {
  while(1) {
   $39 = $1; //@line 160 "sha1.c"
   $40 = (($39) + 28|0); //@line 160 "sha1.c"
   $41 = HEAP32[$40>>2]|0; //@line 160 "sha1.c"
   $42 = ($41>>>0)<(64); //@line 160 "sha1.c"
   if (!($42)) {
    break;
   }
   $43 = $1; //@line 161 "sha1.c"
   $44 = (($43) + 28|0); //@line 161 "sha1.c"
   $45 = HEAP32[$44>>2]|0; //@line 161 "sha1.c"
   $46 = (($45) + 1)|0; //@line 161 "sha1.c"
   HEAP32[$44>>2] = $46; //@line 161 "sha1.c"
   $47 = $1; //@line 161 "sha1.c"
   $48 = (($47) + 32|0); //@line 161 "sha1.c"
   $49 = (($48) + ($45)|0); //@line 161 "sha1.c"
   HEAP8[$49>>0] = 0; //@line 161 "sha1.c"
  }
  $50 = $1; //@line 163 "sha1.c"
  $51 = $1; //@line 163 "sha1.c"
  $52 = (($51) + 32|0); //@line 163 "sha1.c"
  (_sha1_compress($50,$52)|0); //@line 163 "sha1.c"
  $53 = $1; //@line 164 "sha1.c"
  $54 = (($53) + 28|0); //@line 164 "sha1.c"
  HEAP32[$54>>2] = 0; //@line 164 "sha1.c"
 }
 while(1) {
  $55 = $1; //@line 168 "sha1.c"
  $56 = (($55) + 28|0); //@line 168 "sha1.c"
  $57 = HEAP32[$56>>2]|0; //@line 168 "sha1.c"
  $58 = ($57>>>0)<(56); //@line 168 "sha1.c"
  if (!($58)) {
   break;
  }
  $59 = $1; //@line 169 "sha1.c"
  $60 = (($59) + 28|0); //@line 169 "sha1.c"
  $61 = HEAP32[$60>>2]|0; //@line 169 "sha1.c"
  $62 = (($61) + 1)|0; //@line 169 "sha1.c"
  HEAP32[$60>>2] = $62; //@line 169 "sha1.c"
  $63 = $1; //@line 169 "sha1.c"
  $64 = (($63) + 32|0); //@line 169 "sha1.c"
  $65 = (($64) + ($61)|0); //@line 169 "sha1.c"
  HEAP8[$65>>0] = 0; //@line 169 "sha1.c"
 }
 $66 = $1; //@line 173 "sha1.c"
 $67 = $66; //@line 173 "sha1.c"
 $68 = $67; //@line 173 "sha1.c"
 $69 = HEAP32[$68>>2]|0; //@line 173 "sha1.c"
 $70 = (($67) + 4)|0; //@line 173 "sha1.c"
 $71 = $70; //@line 173 "sha1.c"
 $72 = HEAP32[$71>>2]|0; //@line 173 "sha1.c"
 $73 = (_bitshift64Lshr(($69|0),($72|0),56)|0); //@line 173 "sha1.c"
 $74 = tempRet0; //@line 173 "sha1.c"
 $75 = $73 & 255; //@line 173 "sha1.c"
 $76 = $75&255; //@line 173 "sha1.c"
 $77 = $1; //@line 173 "sha1.c"
 $78 = (($77) + 32|0); //@line 173 "sha1.c"
 $79 = (($78) + 56|0); //@line 173 "sha1.c"
 HEAP8[$79>>0] = $76; //@line 173 "sha1.c"
 $80 = $1; //@line 173 "sha1.c"
 $81 = $80; //@line 173 "sha1.c"
 $82 = $81; //@line 173 "sha1.c"
 $83 = HEAP32[$82>>2]|0; //@line 173 "sha1.c"
 $84 = (($81) + 4)|0; //@line 173 "sha1.c"
 $85 = $84; //@line 173 "sha1.c"
 $86 = HEAP32[$85>>2]|0; //@line 173 "sha1.c"
 $87 = (_bitshift64Lshr(($83|0),($86|0),48)|0); //@line 173 "sha1.c"
 $88 = tempRet0; //@line 173 "sha1.c"
 $89 = $87 & 255; //@line 173 "sha1.c"
 $90 = $89&255; //@line 173 "sha1.c"
 $91 = $1; //@line 173 "sha1.c"
 $92 = (($91) + 32|0); //@line 173 "sha1.c"
 $93 = (($92) + 56|0); //@line 173 "sha1.c"
 $94 = (($93) + 1|0); //@line 173 "sha1.c"
 HEAP8[$94>>0] = $90; //@line 173 "sha1.c"
 $95 = $1; //@line 173 "sha1.c"
 $96 = $95; //@line 173 "sha1.c"
 $97 = $96; //@line 173 "sha1.c"
 $98 = HEAP32[$97>>2]|0; //@line 173 "sha1.c"
 $99 = (($96) + 4)|0; //@line 173 "sha1.c"
 $100 = $99; //@line 173 "sha1.c"
 $101 = HEAP32[$100>>2]|0; //@line 173 "sha1.c"
 $102 = (_bitshift64Lshr(($98|0),($101|0),40)|0); //@line 173 "sha1.c"
 $103 = tempRet0; //@line 173 "sha1.c"
 $104 = $102 & 255; //@line 173 "sha1.c"
 $105 = $104&255; //@line 173 "sha1.c"
 $106 = $1; //@line 173 "sha1.c"
 $107 = (($106) + 32|0); //@line 173 "sha1.c"
 $108 = (($107) + 56|0); //@line 173 "sha1.c"
 $109 = (($108) + 2|0); //@line 173 "sha1.c"
 HEAP8[$109>>0] = $105; //@line 173 "sha1.c"
 $110 = $1; //@line 173 "sha1.c"
 $111 = $110; //@line 173 "sha1.c"
 $112 = $111; //@line 173 "sha1.c"
 $113 = HEAP32[$112>>2]|0; //@line 173 "sha1.c"
 $114 = (($111) + 4)|0; //@line 173 "sha1.c"
 $115 = $114; //@line 173 "sha1.c"
 $116 = HEAP32[$115>>2]|0; //@line 173 "sha1.c"
 $117 = $116 & 255; //@line 173 "sha1.c"
 $118 = $117&255; //@line 173 "sha1.c"
 $119 = $1; //@line 173 "sha1.c"
 $120 = (($119) + 32|0); //@line 173 "sha1.c"
 $121 = (($120) + 56|0); //@line 173 "sha1.c"
 $122 = (($121) + 3|0); //@line 173 "sha1.c"
 HEAP8[$122>>0] = $118; //@line 173 "sha1.c"
 $123 = $1; //@line 173 "sha1.c"
 $124 = $123; //@line 173 "sha1.c"
 $125 = $124; //@line 173 "sha1.c"
 $126 = HEAP32[$125>>2]|0; //@line 173 "sha1.c"
 $127 = (($124) + 4)|0; //@line 173 "sha1.c"
 $128 = $127; //@line 173 "sha1.c"
 $129 = HEAP32[$128>>2]|0; //@line 173 "sha1.c"
 $130 = (_bitshift64Lshr(($126|0),($129|0),24)|0); //@line 173 "sha1.c"
 $131 = tempRet0; //@line 173 "sha1.c"
 $132 = $130 & 255; //@line 173 "sha1.c"
 $133 = $132&255; //@line 173 "sha1.c"
 $134 = $1; //@line 173 "sha1.c"
 $135 = (($134) + 32|0); //@line 173 "sha1.c"
 $136 = (($135) + 56|0); //@line 173 "sha1.c"
 $137 = (($136) + 4|0); //@line 173 "sha1.c"
 HEAP8[$137>>0] = $133; //@line 173 "sha1.c"
 $138 = $1; //@line 173 "sha1.c"
 $139 = $138; //@line 173 "sha1.c"
 $140 = $139; //@line 173 "sha1.c"
 $141 = HEAP32[$140>>2]|0; //@line 173 "sha1.c"
 $142 = (($139) + 4)|0; //@line 173 "sha1.c"
 $143 = $142; //@line 173 "sha1.c"
 $144 = HEAP32[$143>>2]|0; //@line 173 "sha1.c"
 $145 = (_bitshift64Lshr(($141|0),($144|0),16)|0); //@line 173 "sha1.c"
 $146 = tempRet0; //@line 173 "sha1.c"
 $147 = $145 & 255; //@line 173 "sha1.c"
 $148 = $147&255; //@line 173 "sha1.c"
 $149 = $1; //@line 173 "sha1.c"
 $150 = (($149) + 32|0); //@line 173 "sha1.c"
 $151 = (($150) + 56|0); //@line 173 "sha1.c"
 $152 = (($151) + 5|0); //@line 173 "sha1.c"
 HEAP8[$152>>0] = $148; //@line 173 "sha1.c"
 $153 = $1; //@line 173 "sha1.c"
 $154 = $153; //@line 173 "sha1.c"
 $155 = $154; //@line 173 "sha1.c"
 $156 = HEAP32[$155>>2]|0; //@line 173 "sha1.c"
 $157 = (($154) + 4)|0; //@line 173 "sha1.c"
 $158 = $157; //@line 173 "sha1.c"
 $159 = HEAP32[$158>>2]|0; //@line 173 "sha1.c"
 $160 = (_bitshift64Lshr(($156|0),($159|0),8)|0); //@line 173 "sha1.c"
 $161 = tempRet0; //@line 173 "sha1.c"
 $162 = $160 & 255; //@line 173 "sha1.c"
 $163 = $162&255; //@line 173 "sha1.c"
 $164 = $1; //@line 173 "sha1.c"
 $165 = (($164) + 32|0); //@line 173 "sha1.c"
 $166 = (($165) + 56|0); //@line 173 "sha1.c"
 $167 = (($166) + 6|0); //@line 173 "sha1.c"
 HEAP8[$167>>0] = $163; //@line 173 "sha1.c"
 $168 = $1; //@line 173 "sha1.c"
 $169 = $168; //@line 173 "sha1.c"
 $170 = $169; //@line 173 "sha1.c"
 $171 = HEAP32[$170>>2]|0; //@line 173 "sha1.c"
 $172 = (($169) + 4)|0; //@line 173 "sha1.c"
 $173 = $172; //@line 173 "sha1.c"
 $174 = HEAP32[$173>>2]|0; //@line 173 "sha1.c"
 $175 = $171 & 255; //@line 173 "sha1.c"
 $176 = $175&255; //@line 173 "sha1.c"
 $177 = $1; //@line 173 "sha1.c"
 $178 = (($177) + 32|0); //@line 173 "sha1.c"
 $179 = (($178) + 56|0); //@line 173 "sha1.c"
 $180 = (($179) + 7|0); //@line 173 "sha1.c"
 HEAP8[$180>>0] = $176; //@line 173 "sha1.c"
 $181 = $1; //@line 174 "sha1.c"
 $182 = $1; //@line 174 "sha1.c"
 $183 = (($182) + 32|0); //@line 174 "sha1.c"
 (_sha1_compress($181,$183)|0); //@line 174 "sha1.c"
 $i = 0; //@line 177 "sha1.c"
 while(1) {
  $184 = $i; //@line 177 "sha1.c"
  $185 = ($184|0)<(5); //@line 177 "sha1.c"
  if (!($185)) {
   break;
  }
  $186 = $i; //@line 178 "sha1.c"
  $187 = $1; //@line 178 "sha1.c"
  $188 = (($187) + 8|0); //@line 178 "sha1.c"
  $189 = (($188) + ($186<<2)|0); //@line 178 "sha1.c"
  $190 = HEAP32[$189>>2]|0; //@line 178 "sha1.c"
  $191 = $190 >>> 24; //@line 178 "sha1.c"
  $192 = $191 & 255; //@line 178 "sha1.c"
  $193 = $192&255; //@line 178 "sha1.c"
  $194 = $2; //@line 178 "sha1.c"
  $195 = $i; //@line 178 "sha1.c"
  $196 = $195<<2; //@line 178 "sha1.c"
  $197 = (($194) + ($196)|0); //@line 178 "sha1.c"
  HEAP8[$197>>0] = $193; //@line 178 "sha1.c"
  $198 = $i; //@line 178 "sha1.c"
  $199 = $1; //@line 178 "sha1.c"
  $200 = (($199) + 8|0); //@line 178 "sha1.c"
  $201 = (($200) + ($198<<2)|0); //@line 178 "sha1.c"
  $202 = HEAP32[$201>>2]|0; //@line 178 "sha1.c"
  $203 = $202 >>> 16; //@line 178 "sha1.c"
  $204 = $203 & 255; //@line 178 "sha1.c"
  $205 = $204&255; //@line 178 "sha1.c"
  $206 = $2; //@line 178 "sha1.c"
  $207 = $i; //@line 178 "sha1.c"
  $208 = $207<<2; //@line 178 "sha1.c"
  $209 = (($206) + ($208)|0); //@line 178 "sha1.c"
  $210 = (($209) + 1|0); //@line 178 "sha1.c"
  HEAP8[$210>>0] = $205; //@line 178 "sha1.c"
  $211 = $i; //@line 178 "sha1.c"
  $212 = $1; //@line 178 "sha1.c"
  $213 = (($212) + 8|0); //@line 178 "sha1.c"
  $214 = (($213) + ($211<<2)|0); //@line 178 "sha1.c"
  $215 = HEAP32[$214>>2]|0; //@line 178 "sha1.c"
  $216 = $215 >>> 8; //@line 178 "sha1.c"
  $217 = $216 & 255; //@line 178 "sha1.c"
  $218 = $217&255; //@line 178 "sha1.c"
  $219 = $2; //@line 178 "sha1.c"
  $220 = $i; //@line 178 "sha1.c"
  $221 = $220<<2; //@line 178 "sha1.c"
  $222 = (($219) + ($221)|0); //@line 178 "sha1.c"
  $223 = (($222) + 2|0); //@line 178 "sha1.c"
  HEAP8[$223>>0] = $218; //@line 178 "sha1.c"
  $224 = $i; //@line 178 "sha1.c"
  $225 = $1; //@line 178 "sha1.c"
  $226 = (($225) + 8|0); //@line 178 "sha1.c"
  $227 = (($226) + ($224<<2)|0); //@line 178 "sha1.c"
  $228 = HEAP32[$227>>2]|0; //@line 178 "sha1.c"
  $229 = $228 & 255; //@line 178 "sha1.c"
  $230 = $229&255; //@line 178 "sha1.c"
  $231 = $2; //@line 178 "sha1.c"
  $232 = $i; //@line 178 "sha1.c"
  $233 = $232<<2; //@line 178 "sha1.c"
  $234 = (($231) + ($233)|0); //@line 178 "sha1.c"
  $235 = (($234) + 3|0); //@line 178 "sha1.c"
  HEAP8[$235>>0] = $230; //@line 178 "sha1.c"
  $236 = $i; //@line 177 "sha1.c"
  $237 = (($236) + 1)|0; //@line 177 "sha1.c"
  $i = $237; //@line 177 "sha1.c"
 }
 $0 = 0; //@line 181 "sha1.c"
 $238 = $0; //@line 181 "sha1.c"
 STACKTOP = sp;return ($238|0); //@line 181 "sha1.c"
}
function _sha1_compress($md,$buf) {
 $md = $md|0;
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $W = 0, $a = 0, $b = 0, $c = 0, $d = 0, $e = 0, $i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0;
 $W = sp + 24|0;
 $0 = $md;
 $1 = $buf;
 $i = 0; //@line 26 "sha1.c"
 while(1) {
  $2 = $i; //@line 26 "sha1.c"
  $3 = ($2>>>0)<(16); //@line 26 "sha1.c"
  if (!($3)) {
   break;
  }
  $4 = $1; //@line 27 "sha1.c"
  $5 = $i; //@line 27 "sha1.c"
  $6 = $5<<2; //@line 27 "sha1.c"
  $7 = (($4) + ($6)|0); //@line 27 "sha1.c"
  $8 = HEAP8[$7>>0]|0; //@line 27 "sha1.c"
  $9 = $8&255; //@line 27 "sha1.c"
  $10 = $9 & 255; //@line 27 "sha1.c"
  $11 = $10 << 24; //@line 27 "sha1.c"
  $12 = $1; //@line 27 "sha1.c"
  $13 = $i; //@line 27 "sha1.c"
  $14 = $13<<2; //@line 27 "sha1.c"
  $15 = (($12) + ($14)|0); //@line 27 "sha1.c"
  $16 = (($15) + 1|0); //@line 27 "sha1.c"
  $17 = HEAP8[$16>>0]|0; //@line 27 "sha1.c"
  $18 = $17&255; //@line 27 "sha1.c"
  $19 = $18 & 255; //@line 27 "sha1.c"
  $20 = $19 << 16; //@line 27 "sha1.c"
  $21 = $11 | $20; //@line 27 "sha1.c"
  $22 = $1; //@line 27 "sha1.c"
  $23 = $i; //@line 27 "sha1.c"
  $24 = $23<<2; //@line 27 "sha1.c"
  $25 = (($22) + ($24)|0); //@line 27 "sha1.c"
  $26 = (($25) + 2|0); //@line 27 "sha1.c"
  $27 = HEAP8[$26>>0]|0; //@line 27 "sha1.c"
  $28 = $27&255; //@line 27 "sha1.c"
  $29 = $28 & 255; //@line 27 "sha1.c"
  $30 = $29 << 8; //@line 27 "sha1.c"
  $31 = $21 | $30; //@line 27 "sha1.c"
  $32 = $1; //@line 27 "sha1.c"
  $33 = $i; //@line 27 "sha1.c"
  $34 = $33<<2; //@line 27 "sha1.c"
  $35 = (($32) + ($34)|0); //@line 27 "sha1.c"
  $36 = (($35) + 3|0); //@line 27 "sha1.c"
  $37 = HEAP8[$36>>0]|0; //@line 27 "sha1.c"
  $38 = $37&255; //@line 27 "sha1.c"
  $39 = $38 & 255; //@line 27 "sha1.c"
  $40 = $31 | $39; //@line 27 "sha1.c"
  $41 = $i; //@line 27 "sha1.c"
  $42 = (($W) + ($41<<2)|0); //@line 27 "sha1.c"
  HEAP32[$42>>2] = $40; //@line 27 "sha1.c"
  $43 = $i; //@line 26 "sha1.c"
  $44 = (($43) + 1)|0; //@line 26 "sha1.c"
  $i = $44; //@line 26 "sha1.c"
 }
 $45 = $0; //@line 31 "sha1.c"
 $46 = (($45) + 8|0); //@line 31 "sha1.c"
 $47 = HEAP32[$46>>2]|0; //@line 31 "sha1.c"
 $a = $47; //@line 31 "sha1.c"
 $48 = $0; //@line 32 "sha1.c"
 $49 = (($48) + 8|0); //@line 32 "sha1.c"
 $50 = (($49) + 4|0); //@line 32 "sha1.c"
 $51 = HEAP32[$50>>2]|0; //@line 32 "sha1.c"
 $b = $51; //@line 32 "sha1.c"
 $52 = $0; //@line 33 "sha1.c"
 $53 = (($52) + 8|0); //@line 33 "sha1.c"
 $54 = (($53) + 8|0); //@line 33 "sha1.c"
 $55 = HEAP32[$54>>2]|0; //@line 33 "sha1.c"
 $c = $55; //@line 33 "sha1.c"
 $56 = $0; //@line 34 "sha1.c"
 $57 = (($56) + 8|0); //@line 34 "sha1.c"
 $58 = (($57) + 12|0); //@line 34 "sha1.c"
 $59 = HEAP32[$58>>2]|0; //@line 34 "sha1.c"
 $d = $59; //@line 34 "sha1.c"
 $60 = $0; //@line 35 "sha1.c"
 $61 = (($60) + 8|0); //@line 35 "sha1.c"
 $62 = (($61) + 16|0); //@line 35 "sha1.c"
 $63 = HEAP32[$62>>2]|0; //@line 35 "sha1.c"
 $e = $63; //@line 35 "sha1.c"
 $i = 16; //@line 38 "sha1.c"
 while(1) {
  $64 = $i; //@line 38 "sha1.c"
  $65 = ($64>>>0)<(80); //@line 38 "sha1.c"
  if (!($65)) {
   break;
  }
  $66 = $i; //@line 39 "sha1.c"
  $67 = (($66) - 3)|0; //@line 39 "sha1.c"
  $68 = (($W) + ($67<<2)|0); //@line 39 "sha1.c"
  $69 = HEAP32[$68>>2]|0; //@line 39 "sha1.c"
  $70 = $i; //@line 39 "sha1.c"
  $71 = (($70) - 8)|0; //@line 39 "sha1.c"
  $72 = (($W) + ($71<<2)|0); //@line 39 "sha1.c"
  $73 = HEAP32[$72>>2]|0; //@line 39 "sha1.c"
  $74 = $69 ^ $73; //@line 39 "sha1.c"
  $75 = $i; //@line 39 "sha1.c"
  $76 = (($75) - 14)|0; //@line 39 "sha1.c"
  $77 = (($W) + ($76<<2)|0); //@line 39 "sha1.c"
  $78 = HEAP32[$77>>2]|0; //@line 39 "sha1.c"
  $79 = $74 ^ $78; //@line 39 "sha1.c"
  $80 = $i; //@line 39 "sha1.c"
  $81 = (($80) - 16)|0; //@line 39 "sha1.c"
  $82 = (($W) + ($81<<2)|0); //@line 39 "sha1.c"
  $83 = HEAP32[$82>>2]|0; //@line 39 "sha1.c"
  $84 = $79 ^ $83; //@line 39 "sha1.c"
  $85 = $84 << 1; //@line 39 "sha1.c"
  $86 = $i; //@line 39 "sha1.c"
  $87 = (($86) - 3)|0; //@line 39 "sha1.c"
  $88 = (($W) + ($87<<2)|0); //@line 39 "sha1.c"
  $89 = HEAP32[$88>>2]|0; //@line 39 "sha1.c"
  $90 = $i; //@line 39 "sha1.c"
  $91 = (($90) - 8)|0; //@line 39 "sha1.c"
  $92 = (($W) + ($91<<2)|0); //@line 39 "sha1.c"
  $93 = HEAP32[$92>>2]|0; //@line 39 "sha1.c"
  $94 = $89 ^ $93; //@line 39 "sha1.c"
  $95 = $i; //@line 39 "sha1.c"
  $96 = (($95) - 14)|0; //@line 39 "sha1.c"
  $97 = (($W) + ($96<<2)|0); //@line 39 "sha1.c"
  $98 = HEAP32[$97>>2]|0; //@line 39 "sha1.c"
  $99 = $94 ^ $98; //@line 39 "sha1.c"
  $100 = $i; //@line 39 "sha1.c"
  $101 = (($100) - 16)|0; //@line 39 "sha1.c"
  $102 = (($W) + ($101<<2)|0); //@line 39 "sha1.c"
  $103 = HEAP32[$102>>2]|0; //@line 39 "sha1.c"
  $104 = $99 ^ $103; //@line 39 "sha1.c"
  $105 = $104 >>> 31; //@line 39 "sha1.c"
  $106 = $85 | $105; //@line 39 "sha1.c"
  $107 = $i; //@line 39 "sha1.c"
  $108 = (($W) + ($107<<2)|0); //@line 39 "sha1.c"
  HEAP32[$108>>2] = $106; //@line 39 "sha1.c"
  $109 = $i; //@line 38 "sha1.c"
  $110 = (($109) + 1)|0; //@line 38 "sha1.c"
  $i = $110; //@line 38 "sha1.c"
 }
 $i = 0; //@line 57 "sha1.c"
 while(1) {
  $111 = $i; //@line 57 "sha1.c"
  $112 = ($111>>>0)<(20); //@line 57 "sha1.c"
  if (!($112)) {
   break;
  }
  $113 = $a; //@line 58 "sha1.c"
  $114 = $113 << 5; //@line 58 "sha1.c"
  $115 = $a; //@line 58 "sha1.c"
  $116 = $115 >>> 27; //@line 58 "sha1.c"
  $117 = $114 | $116; //@line 58 "sha1.c"
  $118 = $d; //@line 58 "sha1.c"
  $119 = $b; //@line 58 "sha1.c"
  $120 = $c; //@line 58 "sha1.c"
  $121 = $d; //@line 58 "sha1.c"
  $122 = $120 ^ $121; //@line 58 "sha1.c"
  $123 = $119 & $122; //@line 58 "sha1.c"
  $124 = $118 ^ $123; //@line 58 "sha1.c"
  $125 = (($117) + ($124))|0; //@line 58 "sha1.c"
  $126 = $e; //@line 58 "sha1.c"
  $127 = (($125) + ($126))|0; //@line 58 "sha1.c"
  $128 = $i; //@line 58 "sha1.c"
  $129 = (($128) + 1)|0; //@line 58 "sha1.c"
  $i = $129; //@line 58 "sha1.c"
  $130 = (($W) + ($128<<2)|0); //@line 58 "sha1.c"
  $131 = HEAP32[$130>>2]|0; //@line 58 "sha1.c"
  $132 = (($127) + ($131))|0; //@line 58 "sha1.c"
  $133 = (($132) + 1518500249)|0; //@line 58 "sha1.c"
  $e = $133; //@line 58 "sha1.c"
  $134 = $b; //@line 58 "sha1.c"
  $135 = $134 << 30; //@line 58 "sha1.c"
  $136 = $b; //@line 58 "sha1.c"
  $137 = $136 >>> 2; //@line 58 "sha1.c"
  $138 = $135 | $137; //@line 58 "sha1.c"
  $b = $138; //@line 58 "sha1.c"
  $139 = $e; //@line 59 "sha1.c"
  $140 = $139 << 5; //@line 59 "sha1.c"
  $141 = $e; //@line 59 "sha1.c"
  $142 = $141 >>> 27; //@line 59 "sha1.c"
  $143 = $140 | $142; //@line 59 "sha1.c"
  $144 = $c; //@line 59 "sha1.c"
  $145 = $a; //@line 59 "sha1.c"
  $146 = $b; //@line 59 "sha1.c"
  $147 = $c; //@line 59 "sha1.c"
  $148 = $146 ^ $147; //@line 59 "sha1.c"
  $149 = $145 & $148; //@line 59 "sha1.c"
  $150 = $144 ^ $149; //@line 59 "sha1.c"
  $151 = (($143) + ($150))|0; //@line 59 "sha1.c"
  $152 = $d; //@line 59 "sha1.c"
  $153 = (($151) + ($152))|0; //@line 59 "sha1.c"
  $154 = $i; //@line 59 "sha1.c"
  $155 = (($154) + 1)|0; //@line 59 "sha1.c"
  $i = $155; //@line 59 "sha1.c"
  $156 = (($W) + ($154<<2)|0); //@line 59 "sha1.c"
  $157 = HEAP32[$156>>2]|0; //@line 59 "sha1.c"
  $158 = (($153) + ($157))|0; //@line 59 "sha1.c"
  $159 = (($158) + 1518500249)|0; //@line 59 "sha1.c"
  $d = $159; //@line 59 "sha1.c"
  $160 = $a; //@line 59 "sha1.c"
  $161 = $160 << 30; //@line 59 "sha1.c"
  $162 = $a; //@line 59 "sha1.c"
  $163 = $162 >>> 2; //@line 59 "sha1.c"
  $164 = $161 | $163; //@line 59 "sha1.c"
  $a = $164; //@line 59 "sha1.c"
  $165 = $d; //@line 60 "sha1.c"
  $166 = $165 << 5; //@line 60 "sha1.c"
  $167 = $d; //@line 60 "sha1.c"
  $168 = $167 >>> 27; //@line 60 "sha1.c"
  $169 = $166 | $168; //@line 60 "sha1.c"
  $170 = $b; //@line 60 "sha1.c"
  $171 = $e; //@line 60 "sha1.c"
  $172 = $a; //@line 60 "sha1.c"
  $173 = $b; //@line 60 "sha1.c"
  $174 = $172 ^ $173; //@line 60 "sha1.c"
  $175 = $171 & $174; //@line 60 "sha1.c"
  $176 = $170 ^ $175; //@line 60 "sha1.c"
  $177 = (($169) + ($176))|0; //@line 60 "sha1.c"
  $178 = $c; //@line 60 "sha1.c"
  $179 = (($177) + ($178))|0; //@line 60 "sha1.c"
  $180 = $i; //@line 60 "sha1.c"
  $181 = (($180) + 1)|0; //@line 60 "sha1.c"
  $i = $181; //@line 60 "sha1.c"
  $182 = (($W) + ($180<<2)|0); //@line 60 "sha1.c"
  $183 = HEAP32[$182>>2]|0; //@line 60 "sha1.c"
  $184 = (($179) + ($183))|0; //@line 60 "sha1.c"
  $185 = (($184) + 1518500249)|0; //@line 60 "sha1.c"
  $c = $185; //@line 60 "sha1.c"
  $186 = $e; //@line 60 "sha1.c"
  $187 = $186 << 30; //@line 60 "sha1.c"
  $188 = $e; //@line 60 "sha1.c"
  $189 = $188 >>> 2; //@line 60 "sha1.c"
  $190 = $187 | $189; //@line 60 "sha1.c"
  $e = $190; //@line 60 "sha1.c"
  $191 = $c; //@line 61 "sha1.c"
  $192 = $191 << 5; //@line 61 "sha1.c"
  $193 = $c; //@line 61 "sha1.c"
  $194 = $193 >>> 27; //@line 61 "sha1.c"
  $195 = $192 | $194; //@line 61 "sha1.c"
  $196 = $a; //@line 61 "sha1.c"
  $197 = $d; //@line 61 "sha1.c"
  $198 = $e; //@line 61 "sha1.c"
  $199 = $a; //@line 61 "sha1.c"
  $200 = $198 ^ $199; //@line 61 "sha1.c"
  $201 = $197 & $200; //@line 61 "sha1.c"
  $202 = $196 ^ $201; //@line 61 "sha1.c"
  $203 = (($195) + ($202))|0; //@line 61 "sha1.c"
  $204 = $b; //@line 61 "sha1.c"
  $205 = (($203) + ($204))|0; //@line 61 "sha1.c"
  $206 = $i; //@line 61 "sha1.c"
  $207 = (($206) + 1)|0; //@line 61 "sha1.c"
  $i = $207; //@line 61 "sha1.c"
  $208 = (($W) + ($206<<2)|0); //@line 61 "sha1.c"
  $209 = HEAP32[$208>>2]|0; //@line 61 "sha1.c"
  $210 = (($205) + ($209))|0; //@line 61 "sha1.c"
  $211 = (($210) + 1518500249)|0; //@line 61 "sha1.c"
  $b = $211; //@line 61 "sha1.c"
  $212 = $d; //@line 61 "sha1.c"
  $213 = $212 << 30; //@line 61 "sha1.c"
  $214 = $d; //@line 61 "sha1.c"
  $215 = $214 >>> 2; //@line 61 "sha1.c"
  $216 = $213 | $215; //@line 61 "sha1.c"
  $d = $216; //@line 61 "sha1.c"
  $217 = $b; //@line 62 "sha1.c"
  $218 = $217 << 5; //@line 62 "sha1.c"
  $219 = $b; //@line 62 "sha1.c"
  $220 = $219 >>> 27; //@line 62 "sha1.c"
  $221 = $218 | $220; //@line 62 "sha1.c"
  $222 = $e; //@line 62 "sha1.c"
  $223 = $c; //@line 62 "sha1.c"
  $224 = $d; //@line 62 "sha1.c"
  $225 = $e; //@line 62 "sha1.c"
  $226 = $224 ^ $225; //@line 62 "sha1.c"
  $227 = $223 & $226; //@line 62 "sha1.c"
  $228 = $222 ^ $227; //@line 62 "sha1.c"
  $229 = (($221) + ($228))|0; //@line 62 "sha1.c"
  $230 = $a; //@line 62 "sha1.c"
  $231 = (($229) + ($230))|0; //@line 62 "sha1.c"
  $232 = $i; //@line 62 "sha1.c"
  $233 = (($232) + 1)|0; //@line 62 "sha1.c"
  $i = $233; //@line 62 "sha1.c"
  $234 = (($W) + ($232<<2)|0); //@line 62 "sha1.c"
  $235 = HEAP32[$234>>2]|0; //@line 62 "sha1.c"
  $236 = (($231) + ($235))|0; //@line 62 "sha1.c"
  $237 = (($236) + 1518500249)|0; //@line 62 "sha1.c"
  $a = $237; //@line 62 "sha1.c"
  $238 = $c; //@line 62 "sha1.c"
  $239 = $238 << 30; //@line 62 "sha1.c"
  $240 = $c; //@line 62 "sha1.c"
  $241 = $240 >>> 2; //@line 62 "sha1.c"
  $242 = $239 | $241; //@line 62 "sha1.c"
  $c = $242; //@line 62 "sha1.c"
 }
 while(1) {
  $243 = $i; //@line 66 "sha1.c"
  $244 = ($243>>>0)<(40); //@line 66 "sha1.c"
  if (!($244)) {
   break;
  }
  $245 = $a; //@line 67 "sha1.c"
  $246 = $245 << 5; //@line 67 "sha1.c"
  $247 = $a; //@line 67 "sha1.c"
  $248 = $247 >>> 27; //@line 67 "sha1.c"
  $249 = $246 | $248; //@line 67 "sha1.c"
  $250 = $b; //@line 67 "sha1.c"
  $251 = $c; //@line 67 "sha1.c"
  $252 = $250 ^ $251; //@line 67 "sha1.c"
  $253 = $d; //@line 67 "sha1.c"
  $254 = $252 ^ $253; //@line 67 "sha1.c"
  $255 = (($249) + ($254))|0; //@line 67 "sha1.c"
  $256 = $e; //@line 67 "sha1.c"
  $257 = (($255) + ($256))|0; //@line 67 "sha1.c"
  $258 = $i; //@line 67 "sha1.c"
  $259 = (($258) + 1)|0; //@line 67 "sha1.c"
  $i = $259; //@line 67 "sha1.c"
  $260 = (($W) + ($258<<2)|0); //@line 67 "sha1.c"
  $261 = HEAP32[$260>>2]|0; //@line 67 "sha1.c"
  $262 = (($257) + ($261))|0; //@line 67 "sha1.c"
  $263 = (($262) + 1859775393)|0; //@line 67 "sha1.c"
  $e = $263; //@line 67 "sha1.c"
  $264 = $b; //@line 67 "sha1.c"
  $265 = $264 << 30; //@line 67 "sha1.c"
  $266 = $b; //@line 67 "sha1.c"
  $267 = $266 >>> 2; //@line 67 "sha1.c"
  $268 = $265 | $267; //@line 67 "sha1.c"
  $b = $268; //@line 67 "sha1.c"
  $269 = $e; //@line 68 "sha1.c"
  $270 = $269 << 5; //@line 68 "sha1.c"
  $271 = $e; //@line 68 "sha1.c"
  $272 = $271 >>> 27; //@line 68 "sha1.c"
  $273 = $270 | $272; //@line 68 "sha1.c"
  $274 = $a; //@line 68 "sha1.c"
  $275 = $b; //@line 68 "sha1.c"
  $276 = $274 ^ $275; //@line 68 "sha1.c"
  $277 = $c; //@line 68 "sha1.c"
  $278 = $276 ^ $277; //@line 68 "sha1.c"
  $279 = (($273) + ($278))|0; //@line 68 "sha1.c"
  $280 = $d; //@line 68 "sha1.c"
  $281 = (($279) + ($280))|0; //@line 68 "sha1.c"
  $282 = $i; //@line 68 "sha1.c"
  $283 = (($282) + 1)|0; //@line 68 "sha1.c"
  $i = $283; //@line 68 "sha1.c"
  $284 = (($W) + ($282<<2)|0); //@line 68 "sha1.c"
  $285 = HEAP32[$284>>2]|0; //@line 68 "sha1.c"
  $286 = (($281) + ($285))|0; //@line 68 "sha1.c"
  $287 = (($286) + 1859775393)|0; //@line 68 "sha1.c"
  $d = $287; //@line 68 "sha1.c"
  $288 = $a; //@line 68 "sha1.c"
  $289 = $288 << 30; //@line 68 "sha1.c"
  $290 = $a; //@line 68 "sha1.c"
  $291 = $290 >>> 2; //@line 68 "sha1.c"
  $292 = $289 | $291; //@line 68 "sha1.c"
  $a = $292; //@line 68 "sha1.c"
  $293 = $d; //@line 69 "sha1.c"
  $294 = $293 << 5; //@line 69 "sha1.c"
  $295 = $d; //@line 69 "sha1.c"
  $296 = $295 >>> 27; //@line 69 "sha1.c"
  $297 = $294 | $296; //@line 69 "sha1.c"
  $298 = $e; //@line 69 "sha1.c"
  $299 = $a; //@line 69 "sha1.c"
  $300 = $298 ^ $299; //@line 69 "sha1.c"
  $301 = $b; //@line 69 "sha1.c"
  $302 = $300 ^ $301; //@line 69 "sha1.c"
  $303 = (($297) + ($302))|0; //@line 69 "sha1.c"
  $304 = $c; //@line 69 "sha1.c"
  $305 = (($303) + ($304))|0; //@line 69 "sha1.c"
  $306 = $i; //@line 69 "sha1.c"
  $307 = (($306) + 1)|0; //@line 69 "sha1.c"
  $i = $307; //@line 69 "sha1.c"
  $308 = (($W) + ($306<<2)|0); //@line 69 "sha1.c"
  $309 = HEAP32[$308>>2]|0; //@line 69 "sha1.c"
  $310 = (($305) + ($309))|0; //@line 69 "sha1.c"
  $311 = (($310) + 1859775393)|0; //@line 69 "sha1.c"
  $c = $311; //@line 69 "sha1.c"
  $312 = $e; //@line 69 "sha1.c"
  $313 = $312 << 30; //@line 69 "sha1.c"
  $314 = $e; //@line 69 "sha1.c"
  $315 = $314 >>> 2; //@line 69 "sha1.c"
  $316 = $313 | $315; //@line 69 "sha1.c"
  $e = $316; //@line 69 "sha1.c"
  $317 = $c; //@line 70 "sha1.c"
  $318 = $317 << 5; //@line 70 "sha1.c"
  $319 = $c; //@line 70 "sha1.c"
  $320 = $319 >>> 27; //@line 70 "sha1.c"
  $321 = $318 | $320; //@line 70 "sha1.c"
  $322 = $d; //@line 70 "sha1.c"
  $323 = $e; //@line 70 "sha1.c"
  $324 = $322 ^ $323; //@line 70 "sha1.c"
  $325 = $a; //@line 70 "sha1.c"
  $326 = $324 ^ $325; //@line 70 "sha1.c"
  $327 = (($321) + ($326))|0; //@line 70 "sha1.c"
  $328 = $b; //@line 70 "sha1.c"
  $329 = (($327) + ($328))|0; //@line 70 "sha1.c"
  $330 = $i; //@line 70 "sha1.c"
  $331 = (($330) + 1)|0; //@line 70 "sha1.c"
  $i = $331; //@line 70 "sha1.c"
  $332 = (($W) + ($330<<2)|0); //@line 70 "sha1.c"
  $333 = HEAP32[$332>>2]|0; //@line 70 "sha1.c"
  $334 = (($329) + ($333))|0; //@line 70 "sha1.c"
  $335 = (($334) + 1859775393)|0; //@line 70 "sha1.c"
  $b = $335; //@line 70 "sha1.c"
  $336 = $d; //@line 70 "sha1.c"
  $337 = $336 << 30; //@line 70 "sha1.c"
  $338 = $d; //@line 70 "sha1.c"
  $339 = $338 >>> 2; //@line 70 "sha1.c"
  $340 = $337 | $339; //@line 70 "sha1.c"
  $d = $340; //@line 70 "sha1.c"
  $341 = $b; //@line 71 "sha1.c"
  $342 = $341 << 5; //@line 71 "sha1.c"
  $343 = $b; //@line 71 "sha1.c"
  $344 = $343 >>> 27; //@line 71 "sha1.c"
  $345 = $342 | $344; //@line 71 "sha1.c"
  $346 = $c; //@line 71 "sha1.c"
  $347 = $d; //@line 71 "sha1.c"
  $348 = $346 ^ $347; //@line 71 "sha1.c"
  $349 = $e; //@line 71 "sha1.c"
  $350 = $348 ^ $349; //@line 71 "sha1.c"
  $351 = (($345) + ($350))|0; //@line 71 "sha1.c"
  $352 = $a; //@line 71 "sha1.c"
  $353 = (($351) + ($352))|0; //@line 71 "sha1.c"
  $354 = $i; //@line 71 "sha1.c"
  $355 = (($354) + 1)|0; //@line 71 "sha1.c"
  $i = $355; //@line 71 "sha1.c"
  $356 = (($W) + ($354<<2)|0); //@line 71 "sha1.c"
  $357 = HEAP32[$356>>2]|0; //@line 71 "sha1.c"
  $358 = (($353) + ($357))|0; //@line 71 "sha1.c"
  $359 = (($358) + 1859775393)|0; //@line 71 "sha1.c"
  $a = $359; //@line 71 "sha1.c"
  $360 = $c; //@line 71 "sha1.c"
  $361 = $360 << 30; //@line 71 "sha1.c"
  $362 = $c; //@line 71 "sha1.c"
  $363 = $362 >>> 2; //@line 71 "sha1.c"
  $364 = $361 | $363; //@line 71 "sha1.c"
  $c = $364; //@line 71 "sha1.c"
 }
 while(1) {
  $365 = $i; //@line 75 "sha1.c"
  $366 = ($365>>>0)<(60); //@line 75 "sha1.c"
  if (!($366)) {
   break;
  }
  $367 = $a; //@line 76 "sha1.c"
  $368 = $367 << 5; //@line 76 "sha1.c"
  $369 = $a; //@line 76 "sha1.c"
  $370 = $369 >>> 27; //@line 76 "sha1.c"
  $371 = $368 | $370; //@line 76 "sha1.c"
  $372 = $b; //@line 76 "sha1.c"
  $373 = $c; //@line 76 "sha1.c"
  $374 = $372 & $373; //@line 76 "sha1.c"
  $375 = $d; //@line 76 "sha1.c"
  $376 = $b; //@line 76 "sha1.c"
  $377 = $c; //@line 76 "sha1.c"
  $378 = $376 | $377; //@line 76 "sha1.c"
  $379 = $375 & $378; //@line 76 "sha1.c"
  $380 = $374 | $379; //@line 76 "sha1.c"
  $381 = (($371) + ($380))|0; //@line 76 "sha1.c"
  $382 = $e; //@line 76 "sha1.c"
  $383 = (($381) + ($382))|0; //@line 76 "sha1.c"
  $384 = $i; //@line 76 "sha1.c"
  $385 = (($384) + 1)|0; //@line 76 "sha1.c"
  $i = $385; //@line 76 "sha1.c"
  $386 = (($W) + ($384<<2)|0); //@line 76 "sha1.c"
  $387 = HEAP32[$386>>2]|0; //@line 76 "sha1.c"
  $388 = (($383) + ($387))|0; //@line 76 "sha1.c"
  $389 = (($388) + -1894007588)|0; //@line 76 "sha1.c"
  $e = $389; //@line 76 "sha1.c"
  $390 = $b; //@line 76 "sha1.c"
  $391 = $390 << 30; //@line 76 "sha1.c"
  $392 = $b; //@line 76 "sha1.c"
  $393 = $392 >>> 2; //@line 76 "sha1.c"
  $394 = $391 | $393; //@line 76 "sha1.c"
  $b = $394; //@line 76 "sha1.c"
  $395 = $e; //@line 77 "sha1.c"
  $396 = $395 << 5; //@line 77 "sha1.c"
  $397 = $e; //@line 77 "sha1.c"
  $398 = $397 >>> 27; //@line 77 "sha1.c"
  $399 = $396 | $398; //@line 77 "sha1.c"
  $400 = $a; //@line 77 "sha1.c"
  $401 = $b; //@line 77 "sha1.c"
  $402 = $400 & $401; //@line 77 "sha1.c"
  $403 = $c; //@line 77 "sha1.c"
  $404 = $a; //@line 77 "sha1.c"
  $405 = $b; //@line 77 "sha1.c"
  $406 = $404 | $405; //@line 77 "sha1.c"
  $407 = $403 & $406; //@line 77 "sha1.c"
  $408 = $402 | $407; //@line 77 "sha1.c"
  $409 = (($399) + ($408))|0; //@line 77 "sha1.c"
  $410 = $d; //@line 77 "sha1.c"
  $411 = (($409) + ($410))|0; //@line 77 "sha1.c"
  $412 = $i; //@line 77 "sha1.c"
  $413 = (($412) + 1)|0; //@line 77 "sha1.c"
  $i = $413; //@line 77 "sha1.c"
  $414 = (($W) + ($412<<2)|0); //@line 77 "sha1.c"
  $415 = HEAP32[$414>>2]|0; //@line 77 "sha1.c"
  $416 = (($411) + ($415))|0; //@line 77 "sha1.c"
  $417 = (($416) + -1894007588)|0; //@line 77 "sha1.c"
  $d = $417; //@line 77 "sha1.c"
  $418 = $a; //@line 77 "sha1.c"
  $419 = $418 << 30; //@line 77 "sha1.c"
  $420 = $a; //@line 77 "sha1.c"
  $421 = $420 >>> 2; //@line 77 "sha1.c"
  $422 = $419 | $421; //@line 77 "sha1.c"
  $a = $422; //@line 77 "sha1.c"
  $423 = $d; //@line 78 "sha1.c"
  $424 = $423 << 5; //@line 78 "sha1.c"
  $425 = $d; //@line 78 "sha1.c"
  $426 = $425 >>> 27; //@line 78 "sha1.c"
  $427 = $424 | $426; //@line 78 "sha1.c"
  $428 = $e; //@line 78 "sha1.c"
  $429 = $a; //@line 78 "sha1.c"
  $430 = $428 & $429; //@line 78 "sha1.c"
  $431 = $b; //@line 78 "sha1.c"
  $432 = $e; //@line 78 "sha1.c"
  $433 = $a; //@line 78 "sha1.c"
  $434 = $432 | $433; //@line 78 "sha1.c"
  $435 = $431 & $434; //@line 78 "sha1.c"
  $436 = $430 | $435; //@line 78 "sha1.c"
  $437 = (($427) + ($436))|0; //@line 78 "sha1.c"
  $438 = $c; //@line 78 "sha1.c"
  $439 = (($437) + ($438))|0; //@line 78 "sha1.c"
  $440 = $i; //@line 78 "sha1.c"
  $441 = (($440) + 1)|0; //@line 78 "sha1.c"
  $i = $441; //@line 78 "sha1.c"
  $442 = (($W) + ($440<<2)|0); //@line 78 "sha1.c"
  $443 = HEAP32[$442>>2]|0; //@line 78 "sha1.c"
  $444 = (($439) + ($443))|0; //@line 78 "sha1.c"
  $445 = (($444) + -1894007588)|0; //@line 78 "sha1.c"
  $c = $445; //@line 78 "sha1.c"
  $446 = $e; //@line 78 "sha1.c"
  $447 = $446 << 30; //@line 78 "sha1.c"
  $448 = $e; //@line 78 "sha1.c"
  $449 = $448 >>> 2; //@line 78 "sha1.c"
  $450 = $447 | $449; //@line 78 "sha1.c"
  $e = $450; //@line 78 "sha1.c"
  $451 = $c; //@line 79 "sha1.c"
  $452 = $451 << 5; //@line 79 "sha1.c"
  $453 = $c; //@line 79 "sha1.c"
  $454 = $453 >>> 27; //@line 79 "sha1.c"
  $455 = $452 | $454; //@line 79 "sha1.c"
  $456 = $d; //@line 79 "sha1.c"
  $457 = $e; //@line 79 "sha1.c"
  $458 = $456 & $457; //@line 79 "sha1.c"
  $459 = $a; //@line 79 "sha1.c"
  $460 = $d; //@line 79 "sha1.c"
  $461 = $e; //@line 79 "sha1.c"
  $462 = $460 | $461; //@line 79 "sha1.c"
  $463 = $459 & $462; //@line 79 "sha1.c"
  $464 = $458 | $463; //@line 79 "sha1.c"
  $465 = (($455) + ($464))|0; //@line 79 "sha1.c"
  $466 = $b; //@line 79 "sha1.c"
  $467 = (($465) + ($466))|0; //@line 79 "sha1.c"
  $468 = $i; //@line 79 "sha1.c"
  $469 = (($468) + 1)|0; //@line 79 "sha1.c"
  $i = $469; //@line 79 "sha1.c"
  $470 = (($W) + ($468<<2)|0); //@line 79 "sha1.c"
  $471 = HEAP32[$470>>2]|0; //@line 79 "sha1.c"
  $472 = (($467) + ($471))|0; //@line 79 "sha1.c"
  $473 = (($472) + -1894007588)|0; //@line 79 "sha1.c"
  $b = $473; //@line 79 "sha1.c"
  $474 = $d; //@line 79 "sha1.c"
  $475 = $474 << 30; //@line 79 "sha1.c"
  $476 = $d; //@line 79 "sha1.c"
  $477 = $476 >>> 2; //@line 79 "sha1.c"
  $478 = $475 | $477; //@line 79 "sha1.c"
  $d = $478; //@line 79 "sha1.c"
  $479 = $b; //@line 80 "sha1.c"
  $480 = $479 << 5; //@line 80 "sha1.c"
  $481 = $b; //@line 80 "sha1.c"
  $482 = $481 >>> 27; //@line 80 "sha1.c"
  $483 = $480 | $482; //@line 80 "sha1.c"
  $484 = $c; //@line 80 "sha1.c"
  $485 = $d; //@line 80 "sha1.c"
  $486 = $484 & $485; //@line 80 "sha1.c"
  $487 = $e; //@line 80 "sha1.c"
  $488 = $c; //@line 80 "sha1.c"
  $489 = $d; //@line 80 "sha1.c"
  $490 = $488 | $489; //@line 80 "sha1.c"
  $491 = $487 & $490; //@line 80 "sha1.c"
  $492 = $486 | $491; //@line 80 "sha1.c"
  $493 = (($483) + ($492))|0; //@line 80 "sha1.c"
  $494 = $a; //@line 80 "sha1.c"
  $495 = (($493) + ($494))|0; //@line 80 "sha1.c"
  $496 = $i; //@line 80 "sha1.c"
  $497 = (($496) + 1)|0; //@line 80 "sha1.c"
  $i = $497; //@line 80 "sha1.c"
  $498 = (($W) + ($496<<2)|0); //@line 80 "sha1.c"
  $499 = HEAP32[$498>>2]|0; //@line 80 "sha1.c"
  $500 = (($495) + ($499))|0; //@line 80 "sha1.c"
  $501 = (($500) + -1894007588)|0; //@line 80 "sha1.c"
  $a = $501; //@line 80 "sha1.c"
  $502 = $c; //@line 80 "sha1.c"
  $503 = $502 << 30; //@line 80 "sha1.c"
  $504 = $c; //@line 80 "sha1.c"
  $505 = $504 >>> 2; //@line 80 "sha1.c"
  $506 = $503 | $505; //@line 80 "sha1.c"
  $c = $506; //@line 80 "sha1.c"
 }
 while(1) {
  $507 = $i; //@line 84 "sha1.c"
  $508 = ($507>>>0)<(80); //@line 84 "sha1.c"
  if (!($508)) {
   break;
  }
  $509 = $a; //@line 85 "sha1.c"
  $510 = $509 << 5; //@line 85 "sha1.c"
  $511 = $a; //@line 85 "sha1.c"
  $512 = $511 >>> 27; //@line 85 "sha1.c"
  $513 = $510 | $512; //@line 85 "sha1.c"
  $514 = $b; //@line 85 "sha1.c"
  $515 = $c; //@line 85 "sha1.c"
  $516 = $514 ^ $515; //@line 85 "sha1.c"
  $517 = $d; //@line 85 "sha1.c"
  $518 = $516 ^ $517; //@line 85 "sha1.c"
  $519 = (($513) + ($518))|0; //@line 85 "sha1.c"
  $520 = $e; //@line 85 "sha1.c"
  $521 = (($519) + ($520))|0; //@line 85 "sha1.c"
  $522 = $i; //@line 85 "sha1.c"
  $523 = (($522) + 1)|0; //@line 85 "sha1.c"
  $i = $523; //@line 85 "sha1.c"
  $524 = (($W) + ($522<<2)|0); //@line 85 "sha1.c"
  $525 = HEAP32[$524>>2]|0; //@line 85 "sha1.c"
  $526 = (($521) + ($525))|0; //@line 85 "sha1.c"
  $527 = (($526) + -899497514)|0; //@line 85 "sha1.c"
  $e = $527; //@line 85 "sha1.c"
  $528 = $b; //@line 85 "sha1.c"
  $529 = $528 << 30; //@line 85 "sha1.c"
  $530 = $b; //@line 85 "sha1.c"
  $531 = $530 >>> 2; //@line 85 "sha1.c"
  $532 = $529 | $531; //@line 85 "sha1.c"
  $b = $532; //@line 85 "sha1.c"
  $533 = $e; //@line 86 "sha1.c"
  $534 = $533 << 5; //@line 86 "sha1.c"
  $535 = $e; //@line 86 "sha1.c"
  $536 = $535 >>> 27; //@line 86 "sha1.c"
  $537 = $534 | $536; //@line 86 "sha1.c"
  $538 = $a; //@line 86 "sha1.c"
  $539 = $b; //@line 86 "sha1.c"
  $540 = $538 ^ $539; //@line 86 "sha1.c"
  $541 = $c; //@line 86 "sha1.c"
  $542 = $540 ^ $541; //@line 86 "sha1.c"
  $543 = (($537) + ($542))|0; //@line 86 "sha1.c"
  $544 = $d; //@line 86 "sha1.c"
  $545 = (($543) + ($544))|0; //@line 86 "sha1.c"
  $546 = $i; //@line 86 "sha1.c"
  $547 = (($546) + 1)|0; //@line 86 "sha1.c"
  $i = $547; //@line 86 "sha1.c"
  $548 = (($W) + ($546<<2)|0); //@line 86 "sha1.c"
  $549 = HEAP32[$548>>2]|0; //@line 86 "sha1.c"
  $550 = (($545) + ($549))|0; //@line 86 "sha1.c"
  $551 = (($550) + -899497514)|0; //@line 86 "sha1.c"
  $d = $551; //@line 86 "sha1.c"
  $552 = $a; //@line 86 "sha1.c"
  $553 = $552 << 30; //@line 86 "sha1.c"
  $554 = $a; //@line 86 "sha1.c"
  $555 = $554 >>> 2; //@line 86 "sha1.c"
  $556 = $553 | $555; //@line 86 "sha1.c"
  $a = $556; //@line 86 "sha1.c"
  $557 = $d; //@line 87 "sha1.c"
  $558 = $557 << 5; //@line 87 "sha1.c"
  $559 = $d; //@line 87 "sha1.c"
  $560 = $559 >>> 27; //@line 87 "sha1.c"
  $561 = $558 | $560; //@line 87 "sha1.c"
  $562 = $e; //@line 87 "sha1.c"
  $563 = $a; //@line 87 "sha1.c"
  $564 = $562 ^ $563; //@line 87 "sha1.c"
  $565 = $b; //@line 87 "sha1.c"
  $566 = $564 ^ $565; //@line 87 "sha1.c"
  $567 = (($561) + ($566))|0; //@line 87 "sha1.c"
  $568 = $c; //@line 87 "sha1.c"
  $569 = (($567) + ($568))|0; //@line 87 "sha1.c"
  $570 = $i; //@line 87 "sha1.c"
  $571 = (($570) + 1)|0; //@line 87 "sha1.c"
  $i = $571; //@line 87 "sha1.c"
  $572 = (($W) + ($570<<2)|0); //@line 87 "sha1.c"
  $573 = HEAP32[$572>>2]|0; //@line 87 "sha1.c"
  $574 = (($569) + ($573))|0; //@line 87 "sha1.c"
  $575 = (($574) + -899497514)|0; //@line 87 "sha1.c"
  $c = $575; //@line 87 "sha1.c"
  $576 = $e; //@line 87 "sha1.c"
  $577 = $576 << 30; //@line 87 "sha1.c"
  $578 = $e; //@line 87 "sha1.c"
  $579 = $578 >>> 2; //@line 87 "sha1.c"
  $580 = $577 | $579; //@line 87 "sha1.c"
  $e = $580; //@line 87 "sha1.c"
  $581 = $c; //@line 88 "sha1.c"
  $582 = $581 << 5; //@line 88 "sha1.c"
  $583 = $c; //@line 88 "sha1.c"
  $584 = $583 >>> 27; //@line 88 "sha1.c"
  $585 = $582 | $584; //@line 88 "sha1.c"
  $586 = $d; //@line 88 "sha1.c"
  $587 = $e; //@line 88 "sha1.c"
  $588 = $586 ^ $587; //@line 88 "sha1.c"
  $589 = $a; //@line 88 "sha1.c"
  $590 = $588 ^ $589; //@line 88 "sha1.c"
  $591 = (($585) + ($590))|0; //@line 88 "sha1.c"
  $592 = $b; //@line 88 "sha1.c"
  $593 = (($591) + ($592))|0; //@line 88 "sha1.c"
  $594 = $i; //@line 88 "sha1.c"
  $595 = (($594) + 1)|0; //@line 88 "sha1.c"
  $i = $595; //@line 88 "sha1.c"
  $596 = (($W) + ($594<<2)|0); //@line 88 "sha1.c"
  $597 = HEAP32[$596>>2]|0; //@line 88 "sha1.c"
  $598 = (($593) + ($597))|0; //@line 88 "sha1.c"
  $599 = (($598) + -899497514)|0; //@line 88 "sha1.c"
  $b = $599; //@line 88 "sha1.c"
  $600 = $d; //@line 88 "sha1.c"
  $601 = $600 << 30; //@line 88 "sha1.c"
  $602 = $d; //@line 88 "sha1.c"
  $603 = $602 >>> 2; //@line 88 "sha1.c"
  $604 = $601 | $603; //@line 88 "sha1.c"
  $d = $604; //@line 88 "sha1.c"
  $605 = $b; //@line 89 "sha1.c"
  $606 = $605 << 5; //@line 89 "sha1.c"
  $607 = $b; //@line 89 "sha1.c"
  $608 = $607 >>> 27; //@line 89 "sha1.c"
  $609 = $606 | $608; //@line 89 "sha1.c"
  $610 = $c; //@line 89 "sha1.c"
  $611 = $d; //@line 89 "sha1.c"
  $612 = $610 ^ $611; //@line 89 "sha1.c"
  $613 = $e; //@line 89 "sha1.c"
  $614 = $612 ^ $613; //@line 89 "sha1.c"
  $615 = (($609) + ($614))|0; //@line 89 "sha1.c"
  $616 = $a; //@line 89 "sha1.c"
  $617 = (($615) + ($616))|0; //@line 89 "sha1.c"
  $618 = $i; //@line 89 "sha1.c"
  $619 = (($618) + 1)|0; //@line 89 "sha1.c"
  $i = $619; //@line 89 "sha1.c"
  $620 = (($W) + ($618<<2)|0); //@line 89 "sha1.c"
  $621 = HEAP32[$620>>2]|0; //@line 89 "sha1.c"
  $622 = (($617) + ($621))|0; //@line 89 "sha1.c"
  $623 = (($622) + -899497514)|0; //@line 89 "sha1.c"
  $a = $623; //@line 89 "sha1.c"
  $624 = $c; //@line 89 "sha1.c"
  $625 = $624 << 30; //@line 89 "sha1.c"
  $626 = $c; //@line 89 "sha1.c"
  $627 = $626 >>> 2; //@line 89 "sha1.c"
  $628 = $625 | $627; //@line 89 "sha1.c"
  $c = $628; //@line 89 "sha1.c"
 }
 $629 = $0; //@line 98 "sha1.c"
 $630 = (($629) + 8|0); //@line 98 "sha1.c"
 $631 = HEAP32[$630>>2]|0; //@line 98 "sha1.c"
 $632 = $a; //@line 98 "sha1.c"
 $633 = (($631) + ($632))|0; //@line 98 "sha1.c"
 $634 = $0; //@line 98 "sha1.c"
 $635 = (($634) + 8|0); //@line 98 "sha1.c"
 HEAP32[$635>>2] = $633; //@line 98 "sha1.c"
 $636 = $0; //@line 99 "sha1.c"
 $637 = (($636) + 8|0); //@line 99 "sha1.c"
 $638 = (($637) + 4|0); //@line 99 "sha1.c"
 $639 = HEAP32[$638>>2]|0; //@line 99 "sha1.c"
 $640 = $b; //@line 99 "sha1.c"
 $641 = (($639) + ($640))|0; //@line 99 "sha1.c"
 $642 = $0; //@line 99 "sha1.c"
 $643 = (($642) + 8|0); //@line 99 "sha1.c"
 $644 = (($643) + 4|0); //@line 99 "sha1.c"
 HEAP32[$644>>2] = $641; //@line 99 "sha1.c"
 $645 = $0; //@line 100 "sha1.c"
 $646 = (($645) + 8|0); //@line 100 "sha1.c"
 $647 = (($646) + 8|0); //@line 100 "sha1.c"
 $648 = HEAP32[$647>>2]|0; //@line 100 "sha1.c"
 $649 = $c; //@line 100 "sha1.c"
 $650 = (($648) + ($649))|0; //@line 100 "sha1.c"
 $651 = $0; //@line 100 "sha1.c"
 $652 = (($651) + 8|0); //@line 100 "sha1.c"
 $653 = (($652) + 8|0); //@line 100 "sha1.c"
 HEAP32[$653>>2] = $650; //@line 100 "sha1.c"
 $654 = $0; //@line 101 "sha1.c"
 $655 = (($654) + 8|0); //@line 101 "sha1.c"
 $656 = (($655) + 12|0); //@line 101 "sha1.c"
 $657 = HEAP32[$656>>2]|0; //@line 101 "sha1.c"
 $658 = $d; //@line 101 "sha1.c"
 $659 = (($657) + ($658))|0; //@line 101 "sha1.c"
 $660 = $0; //@line 101 "sha1.c"
 $661 = (($660) + 8|0); //@line 101 "sha1.c"
 $662 = (($661) + 12|0); //@line 101 "sha1.c"
 HEAP32[$662>>2] = $659; //@line 101 "sha1.c"
 $663 = $0; //@line 102 "sha1.c"
 $664 = (($663) + 8|0); //@line 102 "sha1.c"
 $665 = (($664) + 16|0); //@line 102 "sha1.c"
 $666 = HEAP32[$665>>2]|0; //@line 102 "sha1.c"
 $667 = $e; //@line 102 "sha1.c"
 $668 = (($666) + ($667))|0; //@line 102 "sha1.c"
 $669 = $0; //@line 102 "sha1.c"
 $670 = (($669) + 8|0); //@line 102 "sha1.c"
 $671 = (($670) + 16|0); //@line 102 "sha1.c"
 HEAP32[$671>>2] = $668; //@line 102 "sha1.c"
 STACKTOP = sp;return 0; //@line 104 "sha1.c"
}
function _hash_op($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $free_snapshot = 0, $md = 0, $snapshot = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $md = sp;
 $0 = $op;
 $free_snapshot = 1; //@line 185 "sha1.c"
 $1 = $0; //@line 186 "sha1.c"
 $2 = (_ot_snapshot($1)|0); //@line 186 "sha1.c"
 $snapshot = $2; //@line 186 "sha1.c"
 $3 = $snapshot; //@line 187 "sha1.c"
 $4 = ($3|0)==(0|0); //@line 187 "sha1.c"
 if ($4) {
  $free_snapshot = 0; //@line 188 "sha1.c"
  $snapshot = 1424; //@line 189 "sha1.c"
 }
 (_sha1_init($md)|0); //@line 193 "sha1.c"
 $5 = $snapshot; //@line 194 "sha1.c"
 $6 = $snapshot; //@line 194 "sha1.c"
 $7 = (_strlen(($6|0))|0); //@line 194 "sha1.c"
 (_sha1_process($md,$5,$7)|0); //@line 194 "sha1.c"
 $8 = $0; //@line 195 "sha1.c"
 $9 = (($8) + 24|0); //@line 195 "sha1.c"
 (_sha1_done($md,$9)|0); //@line 195 "sha1.c"
 $10 = $free_snapshot; //@line 197 "sha1.c"
 $11 = $10&1; //@line 197 "sha1.c"
 if (!($11)) {
  STACKTOP = sp;return; //@line 200 "sha1.c"
 }
 $12 = $snapshot; //@line 198 "sha1.c"
 _free($12); //@line 198 "sha1.c"
 STACKTOP = sp;return; //@line 200 "sha1.c"
}
function _ot_xform($agg$result,$op1,$op2) {
 $agg$result = $agg$result|0;
 $op1 = $op1|0;
 $op2 = $op2|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $op1_comp = 0, $op1_comps = 0, $op1_delete = 0, $op1_delete$byval_copy = 0, $op1_delete$byval_copy13 = 0, $op1_insert = 0, $op1_insert$byval_copy = 0, $op1_insert6 = 0, $op1_insert6$byval_copy = 0, $op1_insert6$byval_copy7 = 0, $op1_insert6$byval_copy9 = 0, $op1_iter = 0, $op1_next = 0, $op1_prime = 0, $op1_skip = 0, $op1_skip$byval_copy = 0;
 var $op1_skip$byval_copy4 = 0, $op2_comp = 0, $op2_comps = 0, $op2_delete = 0, $op2_delete$byval_copy = 0, $op2_delete14 = 0, $op2_delete14$byval_copy = 0, $op2_insert = 0, $op2_insert$byval_copy = 0, $op2_insert12 = 0, $op2_insert12$byval_copy = 0, $op2_insert3 = 0, $op2_insert3$byval_copy = 0, $op2_iter = 0, $op2_next = 0, $op2_prime = 0, $op2_skip = 0, $op2_skip$byval_copy = 0, $op2_skip10 = 0, $op2_skip10$byval_copy = 0;
 var $p = 0, $p1 = 0, $p11 = 0, $p13 = 0, $p15 = 0, $p2 = 0, $p4 = 0, $p5 = 0, $p7 = 0, $p8 = 0, $p9 = 0, $xform = 0, $xform$byval_copy = 0, $xform$byval_copy1 = 0, $xform$byval_copy10 = 0, $xform$byval_copy11 = 0, $xform$byval_copy12 = 0, $xform$byval_copy2 = 0, $xform$byval_copy3 = 0, $xform$byval_copy5 = 0;
 var $xform$byval_copy6 = 0, $xform$byval_copy8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0;
 $op2_delete14$byval_copy = sp + 184|0;
 $op1_delete$byval_copy13 = sp + 144|0;
 $xform$byval_copy12 = sp + 328|0;
 $op2_insert12$byval_copy = sp;
 $xform$byval_copy11 = sp + 152|0;
 $op2_skip10$byval_copy = sp + 168|0;
 $op1_delete$byval_copy = sp + 380|0;
 $xform$byval_copy10 = sp + 320|0;
 $op1_insert6$byval_copy9 = sp + 32|0;
 $xform$byval_copy8 = sp + 40|0;
 $op1_insert6$byval_copy7 = sp + 48|0;
 $xform$byval_copy6 = sp + 56|0;
 $op1_insert6$byval_copy = sp + 64|0;
 $xform$byval_copy5 = sp + 72|0;
 $op2_delete$byval_copy = sp + 80|0;
 $op1_skip$byval_copy4 = sp + 312|0;
 $xform$byval_copy3 = sp + 88|0;
 $op2_insert3$byval_copy = sp + 96|0;
 $xform$byval_copy2 = sp + 104|0;
 $op2_skip$byval_copy = sp + 112|0;
 $op1_skip$byval_copy = sp + 116|0;
 $xform$byval_copy1 = sp + 120|0;
 $op1_insert$byval_copy = sp + 128|0;
 $xform$byval_copy = sp + 136|0;
 $op2_insert$byval_copy = sp + 352|0;
 $xform = sp + 176|0;
 $op1_iter = sp + 192|0;
 $op2_iter = sp + 208|0;
 $op2_insert = sp + 244|0;
 $p = sp + 248|0;
 $op1_insert = sp + 256|0;
 $p1 = sp + 264|0;
 $op1_skip = sp + 272|0;
 $op2_skip = sp + 276|0;
 $p2 = sp + 280|0;
 $op2_insert3 = sp + 288|0;
 $p4 = sp + 296|0;
 $op2_delete = sp + 304|0;
 $p5 = sp + 16|0;
 $op1_insert6 = sp + 336|0;
 $p7 = sp + 8|0;
 $p8 = sp + 344|0;
 $p9 = sp + 360|0;
 $op1_delete = sp + 160|0;
 $op2_skip10 = sp + 372|0;
 $p11 = sp + 24|0;
 $op2_insert12 = sp + 164|0;
 $p13 = sp + 392|0;
 $op2_delete14 = sp + 232|0;
 $p15 = sp + 224|0;
 $0 = $op1;
 $1 = $op2;
 $2 = $0; //@line 130 "xform.c"
 $3 = HEAP32[$2>>2]|0; //@line 130 "xform.c"
 $4 = $1; //@line 130 "xform.c"
 $5 = (($4) + 4|0); //@line 130 "xform.c"
 $6 = (_ot_new_op($3,$5)|0); //@line 130 "xform.c"
 $op1_prime = $6; //@line 130 "xform.c"
 $7 = $1; //@line 131 "xform.c"
 $8 = HEAP32[$7>>2]|0; //@line 131 "xform.c"
 $9 = $0; //@line 131 "xform.c"
 $10 = (($9) + 4|0); //@line 131 "xform.c"
 $11 = (_ot_new_op($8,$10)|0); //@line 131 "xform.c"
 $op2_prime = $11; //@line 131 "xform.c"
 $12 = $op1_prime; //@line 132 "xform.c"
 HEAP32[$xform>>2] = $12; //@line 132 "xform.c"
 $13 = (($xform) + 4|0); //@line 132 "xform.c"
 $14 = $op2_prime; //@line 132 "xform.c"
 HEAP32[$13>>2] = $14; //@line 132 "xform.c"
 $15 = $0; //@line 134 "xform.c"
 $16 = (($15) + 44|0); //@line 134 "xform.c"
 $17 = (($16) + 12|0); //@line 134 "xform.c"
 $18 = HEAP32[$17>>2]|0; //@line 134 "xform.c"
 $op1_comps = $18; //@line 134 "xform.c"
 $19 = $1; //@line 135 "xform.c"
 $20 = (($19) + 44|0); //@line 135 "xform.c"
 $21 = (($20) + 12|0); //@line 135 "xform.c"
 $22 = HEAP32[$21>>2]|0; //@line 135 "xform.c"
 $op2_comps = $22; //@line 135 "xform.c"
 $23 = $0; //@line 138 "xform.c"
 _ot_iter_init($op1_iter,$23); //@line 138 "xform.c"
 $24 = $1; //@line 141 "xform.c"
 _ot_iter_init($op2_iter,$24); //@line 141 "xform.c"
 $25 = (_ot_iter_next($op1_iter)|0); //@line 143 "xform.c"
 $26 = $25&1; //@line 143 "xform.c"
 $op1_next = $26; //@line 143 "xform.c"
 $27 = (_ot_iter_next($op2_iter)|0); //@line 144 "xform.c"
 $28 = $27&1; //@line 144 "xform.c"
 $op2_next = $28; //@line 144 "xform.c"
 while(1) {
  $29 = $op1_next; //@line 145 "xform.c"
  $30 = $29&1; //@line 145 "xform.c"
  if ($30) {
   $223 = 1;
  } else {
   $31 = $op2_next; //@line 145 "xform.c"
   $32 = $31&1; //@line 145 "xform.c"
   $223 = $32;
  }
  if (!($223)) {
   label = 62;
   break;
  }
  $33 = $op1_next; //@line 147 "xform.c"
  $34 = $33&1; //@line 147 "xform.c"
  if ($34) {
   $35 = $op1_comps; //@line 148 "xform.c"
   $36 = (($op1_iter) + 4|0); //@line 148 "xform.c"
   $37 = HEAP32[$36>>2]|0; //@line 148 "xform.c"
   $38 = (($35) + (($37*36)|0)|0); //@line 148 "xform.c"
   $op1_comp = $38; //@line 148 "xform.c"
  } else {
   $op1_comp = 0; //@line 150 "xform.c"
  }
  $39 = $op2_next; //@line 154 "xform.c"
  $40 = $39&1; //@line 154 "xform.c"
  if ($40) {
   $41 = $op2_comps; //@line 155 "xform.c"
   $42 = (($op2_iter) + 4|0); //@line 155 "xform.c"
   $43 = HEAP32[$42>>2]|0; //@line 155 "xform.c"
   $44 = (($41) + (($43*36)|0)|0); //@line 155 "xform.c"
   $op2_comp = $44; //@line 155 "xform.c"
  } else {
   $op2_comp = 0; //@line 157 "xform.c"
  }
  $45 = $op1_comp; //@line 160 "xform.c"
  $46 = ($45|0)==(0|0); //@line 160 "xform.c"
  if ($46) {
   $47 = $op2_comp; //@line 164 "xform.c"
   $48 = ($47|0)==(0|0); //@line 164 "xform.c"
   if ($48) {
    label = 13;
    break;
   }
   $49 = $op2_comp; //@line 166 "xform.c"
   $50 = HEAP32[$49>>2]|0; //@line 166 "xform.c"
   $51 = ($50|0)==(1); //@line 166 "xform.c"
   if (!($51)) {
    label = 16;
    break;
   }
   $52 = $op2_comp; //@line 167 "xform.c"
   $53 = (($52) + 4|0); //@line 167 "xform.c"
   ;HEAP32[$op2_insert+0>>2]=HEAP32[$53+0>>2]|0; //@line 167 "xform.c"
   $54 = (($op2_iter) + 8|0); //@line 169 "xform.c"
   $55 = HEAP32[$54>>2]|0; //@line 169 "xform.c"
   ;HEAP32[$op2_insert$byval_copy+0>>2]=HEAP32[$op2_insert+0>>2]|0; //@line 169 "xform.c"
   ;HEAP32[$xform$byval_copy+0>>2]=HEAP32[$xform+0>>2]|0;HEAP32[$xform$byval_copy+4>>2]=HEAP32[$xform+4>>2]|0; //@line 169 "xform.c"
   _ot_xform_skip_insert($p,$op2_insert$byval_copy,$55,$xform$byval_copy); //@line 169 "xform.c"
   $56 = (($p) + 4|0); //@line 171 "xform.c"
   $57 = HEAP32[$56>>2]|0; //@line 171 "xform.c"
   $58 = (_ot_iter_skip($op2_iter,$57)|0); //@line 171 "xform.c"
   $59 = $58&1; //@line 171 "xform.c"
   $op2_next = $59; //@line 171 "xform.c"
  } else {
   $63 = $op2_comp; //@line 177 "xform.c"
   $64 = ($63|0)==(0|0); //@line 177 "xform.c"
   if ($64) {
    $65 = $op1_comp; //@line 178 "xform.c"
    $66 = ($65|0)==(0|0); //@line 178 "xform.c"
    if ($66) {
     label = 21;
     break;
    }
    $67 = $op1_comp; //@line 180 "xform.c"
    $68 = HEAP32[$67>>2]|0; //@line 180 "xform.c"
    $69 = ($68|0)==(1); //@line 180 "xform.c"
    if (!($69)) {
     label = 24;
     break;
    }
    $70 = $op1_comp; //@line 184 "xform.c"
    $71 = (($70) + 4|0); //@line 184 "xform.c"
    ;HEAP32[$op1_insert+0>>2]=HEAP32[$71+0>>2]|0; //@line 184 "xform.c"
    $72 = (($op1_iter) + 8|0); //@line 186 "xform.c"
    $73 = HEAP32[$72>>2]|0; //@line 186 "xform.c"
    ;HEAP32[$op1_insert$byval_copy+0>>2]=HEAP32[$op1_insert+0>>2]|0; //@line 186 "xform.c"
    ;HEAP32[$xform$byval_copy1+0>>2]=HEAP32[$xform+0>>2]|0;HEAP32[$xform$byval_copy1+4>>2]=HEAP32[$xform+4>>2]|0; //@line 186 "xform.c"
    _ot_xform_insert_skip($p1,$op1_insert$byval_copy,$73,$xform$byval_copy1); //@line 186 "xform.c"
    $74 = HEAP32[$p1>>2]|0; //@line 188 "xform.c"
    $75 = (_ot_iter_skip($op1_iter,$74)|0); //@line 188 "xform.c"
    $76 = $75&1; //@line 188 "xform.c"
    $op1_next = $76; //@line 188 "xform.c"
   } else {
    $80 = $op1_comp; //@line 194 "xform.c"
    $81 = HEAP32[$80>>2]|0; //@line 194 "xform.c"
    $82 = ($81|0)==(0); //@line 194 "xform.c"
    if ($82) {
     $83 = $op1_comp; //@line 195 "xform.c"
     $84 = (($83) + 4|0); //@line 195 "xform.c"
     ;HEAP32[$op1_skip+0>>2]=HEAP32[$84+0>>2]|0; //@line 195 "xform.c"
     $85 = $op2_comp; //@line 197 "xform.c"
     $86 = HEAP32[$85>>2]|0; //@line 197 "xform.c"
     $87 = ($86|0)==(0); //@line 197 "xform.c"
     if ($87) {
      $88 = $op2_comp; //@line 198 "xform.c"
      $89 = (($88) + 4|0); //@line 198 "xform.c"
      ;HEAP32[$op2_skip+0>>2]=HEAP32[$89+0>>2]|0; //@line 198 "xform.c"
      $90 = (($op1_iter) + 8|0); //@line 201 "xform.c"
      $91 = HEAP32[$90>>2]|0; //@line 201 "xform.c"
      $92 = (($op2_iter) + 8|0); //@line 201 "xform.c"
      $93 = HEAP32[$92>>2]|0; //@line 201 "xform.c"
      ;HEAP32[$op1_skip$byval_copy+0>>2]=HEAP32[$op1_skip+0>>2]|0; //@line 201 "xform.c"
      ;HEAP32[$op2_skip$byval_copy+0>>2]=HEAP32[$op2_skip+0>>2]|0; //@line 201 "xform.c"
      ;HEAP32[$xform$byval_copy2+0>>2]=HEAP32[$xform+0>>2]|0;HEAP32[$xform$byval_copy2+4>>2]=HEAP32[$xform+4>>2]|0; //@line 201 "xform.c"
      _ot_xform_skip_skip($p2,$op1_skip$byval_copy,$91,$op2_skip$byval_copy,$93,$xform$byval_copy2); //@line 201 "xform.c"
      $94 = HEAP32[$p2>>2]|0; //@line 204 "xform.c"
      $95 = (_ot_iter_skip($op1_iter,$94)|0); //@line 204 "xform.c"
      $96 = $95&1; //@line 204 "xform.c"
      $op1_next = $96; //@line 204 "xform.c"
      $97 = (($p2) + 4|0); //@line 205 "xform.c"
      $98 = HEAP32[$97>>2]|0; //@line 205 "xform.c"
      $99 = (_ot_iter_skip($op2_iter,$98)|0); //@line 205 "xform.c"
      $100 = $99&1; //@line 205 "xform.c"
      $op2_next = $100; //@line 205 "xform.c"
     } else {
      $101 = $op2_comp; //@line 206 "xform.c"
      $102 = HEAP32[$101>>2]|0; //@line 206 "xform.c"
      $103 = ($102|0)==(1); //@line 206 "xform.c"
      if ($103) {
       $104 = $op2_comp; //@line 207 "xform.c"
       $105 = (($104) + 4|0); //@line 207 "xform.c"
       ;HEAP32[$op2_insert3+0>>2]=HEAP32[$105+0>>2]|0; //@line 207 "xform.c"
       $106 = (($op2_iter) + 8|0); //@line 210 "xform.c"
       $107 = HEAP32[$106>>2]|0; //@line 210 "xform.c"
       ;HEAP32[$op2_insert3$byval_copy+0>>2]=HEAP32[$op2_insert3+0>>2]|0; //@line 210 "xform.c"
       ;HEAP32[$xform$byval_copy3+0>>2]=HEAP32[$xform+0>>2]|0;HEAP32[$xform$byval_copy3+4>>2]=HEAP32[$xform+4>>2]|0; //@line 210 "xform.c"
       _ot_xform_skip_insert($p4,$op2_insert3$byval_copy,$107,$xform$byval_copy3); //@line 210 "xform.c"
       $108 = HEAP32[$p4>>2]|0; //@line 212 "xform.c"
       $109 = (_ot_iter_skip($op1_iter,$108)|0); //@line 212 "xform.c"
       $110 = $109&1; //@line 212 "xform.c"
       $op1_next = $110; //@line 212 "xform.c"
       $111 = (($p4) + 4|0); //@line 213 "xform.c"
       $112 = HEAP32[$111>>2]|0; //@line 213 "xform.c"
       $113 = (_ot_iter_skip($op2_iter,$112)|0); //@line 213 "xform.c"
       $114 = $113&1; //@line 213 "xform.c"
       $op2_next = $114; //@line 213 "xform.c"
      } else {
       $115 = $op2_comp; //@line 214 "xform.c"
       $116 = HEAP32[$115>>2]|0; //@line 214 "xform.c"
       $117 = ($116|0)==(2); //@line 214 "xform.c"
       if ($117) {
        $118 = $op2_comp; //@line 215 "xform.c"
        $119 = (($118) + 4|0); //@line 215 "xform.c"
        ;HEAP32[$op2_delete+0>>2]=HEAP32[$119+0>>2]|0; //@line 215 "xform.c"
        $120 = (($op1_iter) + 8|0); //@line 218 "xform.c"
        $121 = HEAP32[$120>>2]|0; //@line 218 "xform.c"
        $122 = (($op2_iter) + 8|0); //@line 218 "xform.c"
        $123 = HEAP32[$122>>2]|0; //@line 218 "xform.c"
        ;HEAP32[$op1_skip$byval_copy4+0>>2]=HEAP32[$op1_skip+0>>2]|0; //@line 218 "xform.c"
        ;HEAP32[$op2_delete$byval_copy+0>>2]=HEAP32[$op2_delete+0>>2]|0; //@line 218 "xform.c"
        ;HEAP32[$xform$byval_copy5+0>>2]=HEAP32[$xform+0>>2]|0;HEAP32[$xform$byval_copy5+4>>2]=HEAP32[$xform+4>>2]|0; //@line 218 "xform.c"
        _ot_xform_skip_delete($p5,$op1_skip$byval_copy4,$121,$op2_delete$byval_copy,$123,$xform$byval_copy5); //@line 218 "xform.c"
        $124 = HEAP32[$p5>>2]|0; //@line 221 "xform.c"
        $125 = (_ot_iter_skip($op1_iter,$124)|0); //@line 221 "xform.c"
        $126 = $125&1; //@line 221 "xform.c"
        $op1_next = $126; //@line 221 "xform.c"
        $127 = (($p5) + 4|0); //@line 222 "xform.c"
        $128 = HEAP32[$127>>2]|0; //@line 222 "xform.c"
        $129 = (_ot_iter_skip($op2_iter,$128)|0); //@line 222 "xform.c"
        $130 = $129&1; //@line 222 "xform.c"
        $op2_next = $130; //@line 222 "xform.c"
       }
      }
     }
    } else {
     $131 = $op1_comp; //@line 224 "xform.c"
     $132 = HEAP32[$131>>2]|0; //@line 224 "xform.c"
     $133 = ($132|0)==(1); //@line 224 "xform.c"
     if ($133) {
      $134 = $op1_comp; //@line 225 "xform.c"
      $135 = (($134) + 4|0); //@line 225 "xform.c"
      ;HEAP32[$op1_insert6+0>>2]=HEAP32[$135+0>>2]|0; //@line 225 "xform.c"
      $136 = $op2_comp; //@line 227 "xform.c"
      $137 = HEAP32[$136>>2]|0; //@line 227 "xform.c"
      $138 = ($137|0)==(0); //@line 227 "xform.c"
      if ($138) {
       $139 = (($op1_iter) + 8|0); //@line 229 "xform.c"
       $140 = HEAP32[$139>>2]|0; //@line 229 "xform.c"
       ;HEAP32[$op1_insert6$byval_copy+0>>2]=HEAP32[$op1_insert6+0>>2]|0; //@line 229 "xform.c"
       ;HEAP32[$xform$byval_copy6+0>>2]=HEAP32[$xform+0>>2]|0;HEAP32[$xform$byval_copy6+4>>2]=HEAP32[$xform+4>>2]|0; //@line 229 "xform.c"
       _ot_xform_insert_skip($p7,$op1_insert6$byval_copy,$140,$xform$byval_copy6); //@line 229 "xform.c"
       $141 = HEAP32[$p7>>2]|0; //@line 231 "xform.c"
       $142 = (_ot_iter_skip($op1_iter,$141)|0); //@line 231 "xform.c"
       $143 = $142&1; //@line 231 "xform.c"
       $op1_next = $143; //@line 231 "xform.c"
       $144 = (($p7) + 4|0); //@line 232 "xform.c"
       $145 = HEAP32[$144>>2]|0; //@line 232 "xform.c"
       $146 = (_ot_iter_skip($op2_iter,$145)|0); //@line 232 "xform.c"
       $147 = $146&1; //@line 232 "xform.c"
       $op2_next = $147; //@line 232 "xform.c"
      } else {
       $148 = $op2_comp; //@line 233 "xform.c"
       $149 = HEAP32[$148>>2]|0; //@line 233 "xform.c"
       $150 = ($149|0)==(1); //@line 233 "xform.c"
       if ($150) {
        $151 = (($op1_iter) + 8|0); //@line 235 "xform.c"
        $152 = HEAP32[$151>>2]|0; //@line 235 "xform.c"
        ;HEAP32[$op1_insert6$byval_copy7+0>>2]=HEAP32[$op1_insert6+0>>2]|0; //@line 235 "xform.c"
        ;HEAP32[$xform$byval_copy8+0>>2]=HEAP32[$xform+0>>2]|0;HEAP32[$xform$byval_copy8+4>>2]=HEAP32[$xform+4>>2]|0; //@line 235 "xform.c"
        _ot_xform_insert_insert($p8,$op1_insert6$byval_copy7,$152,$xform$byval_copy8); //@line 235 "xform.c"
        $153 = HEAP32[$p8>>2]|0; //@line 237 "xform.c"
        $154 = (_ot_iter_skip($op1_iter,$153)|0); //@line 237 "xform.c"
        $155 = $154&1; //@line 237 "xform.c"
        $op1_next = $155; //@line 237 "xform.c"
        $156 = (($p8) + 4|0); //@line 238 "xform.c"
        $157 = HEAP32[$156>>2]|0; //@line 238 "xform.c"
        $158 = (_ot_iter_skip($op2_iter,$157)|0); //@line 238 "xform.c"
        $159 = $158&1; //@line 238 "xform.c"
        $op2_next = $159; //@line 238 "xform.c"
       } else {
        $160 = $op2_comp; //@line 239 "xform.c"
        $161 = HEAP32[$160>>2]|0; //@line 239 "xform.c"
        $162 = ($161|0)==(2); //@line 239 "xform.c"
        if ($162) {
         $163 = (($op1_iter) + 8|0); //@line 241 "xform.c"
         $164 = HEAP32[$163>>2]|0; //@line 241 "xform.c"
         ;HEAP32[$op1_insert6$byval_copy9+0>>2]=HEAP32[$op1_insert6+0>>2]|0; //@line 241 "xform.c"
         ;HEAP32[$xform$byval_copy10+0>>2]=HEAP32[$xform+0>>2]|0;HEAP32[$xform$byval_copy10+4>>2]=HEAP32[$xform+4>>2]|0; //@line 241 "xform.c"
         _ot_xform_insert_delete($p9,$op1_insert6$byval_copy9,$164,$xform$byval_copy10); //@line 241 "xform.c"
         $165 = HEAP32[$p9>>2]|0; //@line 243 "xform.c"
         $166 = (_ot_iter_skip($op1_iter,$165)|0); //@line 243 "xform.c"
         $167 = $166&1; //@line 243 "xform.c"
         $op1_next = $167; //@line 243 "xform.c"
         $168 = (($p9) + 4|0); //@line 244 "xform.c"
         $169 = HEAP32[$168>>2]|0; //@line 244 "xform.c"
         $170 = (_ot_iter_skip($op2_iter,$169)|0); //@line 244 "xform.c"
         $171 = $170&1; //@line 244 "xform.c"
         $op2_next = $171; //@line 244 "xform.c"
        }
       }
      }
     } else {
      $172 = $op1_comp; //@line 246 "xform.c"
      $173 = HEAP32[$172>>2]|0; //@line 246 "xform.c"
      $174 = ($173|0)==(2); //@line 246 "xform.c"
      if ($174) {
       $175 = $op1_comp; //@line 247 "xform.c"
       $176 = (($175) + 4|0); //@line 247 "xform.c"
       ;HEAP32[$op1_delete+0>>2]=HEAP32[$176+0>>2]|0; //@line 247 "xform.c"
       $177 = $op2_comp; //@line 249 "xform.c"
       $178 = HEAP32[$177>>2]|0; //@line 249 "xform.c"
       $179 = ($178|0)==(0); //@line 249 "xform.c"
       if ($179) {
        $180 = $op2_comp; //@line 250 "xform.c"
        $181 = (($180) + 4|0); //@line 250 "xform.c"
        ;HEAP32[$op2_skip10+0>>2]=HEAP32[$181+0>>2]|0; //@line 250 "xform.c"
        $182 = (($op1_iter) + 8|0); //@line 253 "xform.c"
        $183 = HEAP32[$182>>2]|0; //@line 253 "xform.c"
        $184 = (($op2_iter) + 8|0); //@line 253 "xform.c"
        $185 = HEAP32[$184>>2]|0; //@line 253 "xform.c"
        ;HEAP32[$op1_delete$byval_copy+0>>2]=HEAP32[$op1_delete+0>>2]|0; //@line 253 "xform.c"
        ;HEAP32[$op2_skip10$byval_copy+0>>2]=HEAP32[$op2_skip10+0>>2]|0; //@line 253 "xform.c"
        ;HEAP32[$xform$byval_copy11+0>>2]=HEAP32[$xform+0>>2]|0;HEAP32[$xform$byval_copy11+4>>2]=HEAP32[$xform+4>>2]|0; //@line 253 "xform.c"
        _ot_xform_delete_skip($p11,$op1_delete$byval_copy,$183,$op2_skip10$byval_copy,$185,$xform$byval_copy11); //@line 253 "xform.c"
        $186 = HEAP32[$p11>>2]|0; //@line 256 "xform.c"
        $187 = (_ot_iter_skip($op1_iter,$186)|0); //@line 256 "xform.c"
        $188 = $187&1; //@line 256 "xform.c"
        $op1_next = $188; //@line 256 "xform.c"
        $189 = (($p11) + 4|0); //@line 257 "xform.c"
        $190 = HEAP32[$189>>2]|0; //@line 257 "xform.c"
        $191 = (_ot_iter_skip($op2_iter,$190)|0); //@line 257 "xform.c"
        $192 = $191&1; //@line 257 "xform.c"
        $op2_next = $192; //@line 257 "xform.c"
       } else {
        $193 = $op2_comp; //@line 258 "xform.c"
        $194 = HEAP32[$193>>2]|0; //@line 258 "xform.c"
        $195 = ($194|0)==(1); //@line 258 "xform.c"
        if ($195) {
         $196 = $op2_comp; //@line 259 "xform.c"
         $197 = (($196) + 4|0); //@line 259 "xform.c"
         ;HEAP32[$op2_insert12+0>>2]=HEAP32[$197+0>>2]|0; //@line 259 "xform.c"
         $198 = (($op2_iter) + 8|0); //@line 262 "xform.c"
         $199 = HEAP32[$198>>2]|0; //@line 262 "xform.c"
         ;HEAP32[$op2_insert12$byval_copy+0>>2]=HEAP32[$op2_insert12+0>>2]|0; //@line 262 "xform.c"
         ;HEAP32[$xform$byval_copy12+0>>2]=HEAP32[$xform+0>>2]|0;HEAP32[$xform$byval_copy12+4>>2]=HEAP32[$xform+4>>2]|0; //@line 262 "xform.c"
         _ot_xform_delete_insert($p13,$op2_insert12$byval_copy,$199,$xform$byval_copy12); //@line 262 "xform.c"
         $200 = HEAP32[$p13>>2]|0; //@line 264 "xform.c"
         $201 = (_ot_iter_skip($op1_iter,$200)|0); //@line 264 "xform.c"
         $202 = $201&1; //@line 264 "xform.c"
         $op1_next = $202; //@line 264 "xform.c"
         $203 = (($p13) + 4|0); //@line 265 "xform.c"
         $204 = HEAP32[$203>>2]|0; //@line 265 "xform.c"
         $205 = (_ot_iter_skip($op2_iter,$204)|0); //@line 265 "xform.c"
         $206 = $205&1; //@line 265 "xform.c"
         $op2_next = $206; //@line 265 "xform.c"
        } else {
         $207 = $op2_comp; //@line 266 "xform.c"
         $208 = HEAP32[$207>>2]|0; //@line 266 "xform.c"
         $209 = ($208|0)==(2); //@line 266 "xform.c"
         if ($209) {
          $210 = $op2_comp; //@line 267 "xform.c"
          $211 = (($210) + 4|0); //@line 267 "xform.c"
          ;HEAP32[$op2_delete14+0>>2]=HEAP32[$211+0>>2]|0; //@line 267 "xform.c"
          $212 = (($op1_iter) + 8|0); //@line 269 "xform.c"
          $213 = HEAP32[$212>>2]|0; //@line 269 "xform.c"
          $214 = (($op2_iter) + 8|0); //@line 269 "xform.c"
          $215 = HEAP32[$214>>2]|0; //@line 269 "xform.c"
          ;HEAP32[$op1_delete$byval_copy13+0>>2]=HEAP32[$op1_delete+0>>2]|0; //@line 269 "xform.c"
          ;HEAP32[$op2_delete14$byval_copy+0>>2]=HEAP32[$op2_delete14+0>>2]|0; //@line 269 "xform.c"
          _ot_xform_delete_delete($p15,$op1_delete$byval_copy13,$213,$op2_delete14$byval_copy,$215); //@line 269 "xform.c"
          $216 = HEAP32[$p15>>2]|0; //@line 272 "xform.c"
          $217 = (_ot_iter_skip($op1_iter,$216)|0); //@line 272 "xform.c"
          $218 = $217&1; //@line 272 "xform.c"
          $op1_next = $218; //@line 272 "xform.c"
          $219 = (($p15) + 4|0); //@line 273 "xform.c"
          $220 = HEAP32[$219>>2]|0; //@line 273 "xform.c"
          $221 = (_ot_iter_skip($op2_iter,$220)|0); //@line 273 "xform.c"
          $222 = $221&1; //@line 273 "xform.c"
          $op2_next = $222; //@line 273 "xform.c"
         }
        }
       }
      }
     }
    }
   }
  }
 }
 if ((label|0) == 13) {
  ___assert_fail((1432|0),(1480|0),165,(1488|0)); //@line 165 "xform.c"
  // unreachable; //@line 165 "xform.c"
 }
 else if ((label|0) == 16) {
  $60 = $op1_prime; //@line 173 "xform.c"
  _ot_free_op($60); //@line 173 "xform.c"
  $61 = $op2_prime; //@line 174 "xform.c"
  _ot_free_op($61); //@line 174 "xform.c"
  HEAP32[$agg$result>>2] = 0; //@line 175 "xform.c"
  $62 = (($agg$result) + 4|0); //@line 175 "xform.c"
  HEAP32[$62>>2] = 0; //@line 175 "xform.c"
  STACKTOP = sp;return; //@line 279 "xform.c"
 }
 else if ((label|0) == 21) {
  ___assert_fail((1432|0),(1480|0),179,(1488|0)); //@line 179 "xform.c"
  // unreachable; //@line 179 "xform.c"
 }
 else if ((label|0) == 24) {
  $77 = $op1_prime; //@line 190 "xform.c"
  _ot_free_op($77); //@line 190 "xform.c"
  $78 = $op2_prime; //@line 191 "xform.c"
  _ot_free_op($78); //@line 191 "xform.c"
  HEAP32[$agg$result>>2] = 0; //@line 192 "xform.c"
  $79 = (($agg$result) + 4|0); //@line 192 "xform.c"
  HEAP32[$79>>2] = 0; //@line 192 "xform.c"
  STACKTOP = sp;return; //@line 279 "xform.c"
 }
 else if ((label|0) == 62) {
  ;HEAP32[$agg$result+0>>2]=HEAP32[$xform+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$xform+4>>2]|0; //@line 278 "xform.c"
  STACKTOP = sp;return; //@line 279 "xform.c"
 }
}
function _ot_xform_skip_insert($agg$result,$ins,$ins_offset,$xform) {
 $agg$result = $agg$result|0;
 $ins = $ins|0;
 $ins_offset = $ins_offset|0;
 $xform = $xform|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ins_len = 0, $substr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $ins_offset;
 $1 = HEAP32[$ins>>2]|0; //@line 34 "xform.c"
 $2 = (_strlen(($1|0))|0); //@line 34 "xform.c"
 $3 = $0; //@line 34 "xform.c"
 $4 = (($2) - ($3))|0; //@line 34 "xform.c"
 $ins_len = $4; //@line 34 "xform.c"
 $5 = HEAP32[$xform>>2]|0; //@line 36 "xform.c"
 $6 = $ins_len; //@line 36 "xform.c"
 _ot_skip($5,$6); //@line 36 "xform.c"
 $7 = $ins_len; //@line 38 "xform.c"
 $8 = $7; //@line 38 "xform.c"
 $9 = (($8) + 1)|0; //@line 38 "xform.c"
 $10 = (_malloc($9)|0); //@line 38 "xform.c"
 $substr = $10; //@line 38 "xform.c"
 $11 = $substr; //@line 39 "xform.c"
 $12 = HEAP32[$ins>>2]|0; //@line 39 "xform.c"
 $13 = $0; //@line 39 "xform.c"
 $14 = (($12) + ($13)|0); //@line 39 "xform.c"
 $15 = $ins_len; //@line 39 "xform.c"
 _memcpy(($11|0),($14|0),($15|0))|0; //@line 39 "xform.c"
 $16 = $ins_len; //@line 40 "xform.c"
 $17 = $substr; //@line 40 "xform.c"
 $18 = (($17) + ($16)|0); //@line 40 "xform.c"
 HEAP8[$18>>0] = 0; //@line 40 "xform.c"
 $19 = (($xform) + 4|0); //@line 41 "xform.c"
 $20 = HEAP32[$19>>2]|0; //@line 41 "xform.c"
 $21 = $substr; //@line 41 "xform.c"
 _ot_insert($20,$21); //@line 41 "xform.c"
 $22 = $substr; //@line 42 "xform.c"
 _free($22); //@line 42 "xform.c"
 HEAP32[$agg$result>>2] = 0; //@line 44 "xform.c"
 $23 = (($agg$result) + 4|0); //@line 44 "xform.c"
 $24 = $ins_len; //@line 44 "xform.c"
 HEAP32[$23>>2] = $24; //@line 44 "xform.c"
 STACKTOP = sp;return; //@line 44 "xform.c"
}
function _ot_xform_insert_skip($agg$result,$ins,$ins_offset,$xform) {
 $agg$result = $agg$result|0;
 $ins = $ins|0;
 $ins_offset = $ins_offset|0;
 $xform = $xform|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flip = 0, $flip$byval_copy = 0, $ins$byval_copy = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $flip$byval_copy = sp + 24|0;
 $ins$byval_copy = sp + 20|0;
 $flip = sp + 8|0;
 $p = sp;
 $0 = $ins_offset;
 $1 = (($xform) + 4|0); //@line 50 "xform.c"
 $2 = HEAP32[$1>>2]|0; //@line 50 "xform.c"
 HEAP32[$flip>>2] = $2; //@line 50 "xform.c"
 $3 = (($flip) + 4|0); //@line 50 "xform.c"
 $4 = HEAP32[$xform>>2]|0; //@line 50 "xform.c"
 HEAP32[$3>>2] = $4; //@line 50 "xform.c"
 $5 = $0; //@line 51 "xform.c"
 ;HEAP32[$ins$byval_copy+0>>2]=HEAP32[$ins+0>>2]|0; //@line 51 "xform.c"
 ;HEAP32[$flip$byval_copy+0>>2]=HEAP32[$flip+0>>2]|0;HEAP32[$flip$byval_copy+4>>2]=HEAP32[$flip+4>>2]|0; //@line 51 "xform.c"
 _ot_xform_skip_insert($p,$ins$byval_copy,$5,$flip$byval_copy); //@line 51 "xform.c"
 $6 = (($p) + 4|0); //@line 52 "xform.c"
 $7 = HEAP32[$6>>2]|0; //@line 52 "xform.c"
 HEAP32[$agg$result>>2] = $7; //@line 52 "xform.c"
 $8 = (($agg$result) + 4|0); //@line 52 "xform.c"
 $9 = HEAP32[$p>>2]|0; //@line 52 "xform.c"
 HEAP32[$8>>2] = $9; //@line 52 "xform.c"
 STACKTOP = sp;return; //@line 52 "xform.c"
}
function _ot_xform_skip_skip($agg$result,$skip1,$offset1,$skip2,$offset2,$xform) {
 $agg$result = $agg$result|0;
 $skip1 = $skip1|0;
 $offset1 = $offset1|0;
 $skip2 = $skip2|0;
 $offset2 = $offset2|0;
 $xform = $xform|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $min_len = 0;
 var $skip1_count = 0, $skip2_count = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $offset1;
 $1 = $offset2;
 $2 = HEAP32[$skip1>>2]|0; //@line 21 "xform.c"
 $3 = $0; //@line 21 "xform.c"
 $4 = (($2) - ($3))|0; //@line 21 "xform.c"
 $skip1_count = $4; //@line 21 "xform.c"
 $5 = HEAP32[$skip2>>2]|0; //@line 22 "xform.c"
 $6 = $1; //@line 22 "xform.c"
 $7 = (($5) - ($6))|0; //@line 22 "xform.c"
 $skip2_count = $7; //@line 22 "xform.c"
 $8 = $skip1_count; //@line 23 "xform.c"
 $9 = $skip2_count; //@line 23 "xform.c"
 $10 = (_min108($8,$9)|0); //@line 23 "xform.c"
 $min_len = $10; //@line 23 "xform.c"
 $11 = HEAP32[$xform>>2]|0; //@line 25 "xform.c"
 $12 = $min_len; //@line 25 "xform.c"
 _ot_skip($11,$12); //@line 25 "xform.c"
 $13 = (($xform) + 4|0); //@line 26 "xform.c"
 $14 = HEAP32[$13>>2]|0; //@line 26 "xform.c"
 $15 = $min_len; //@line 26 "xform.c"
 _ot_skip($14,$15); //@line 26 "xform.c"
 $16 = $min_len; //@line 28 "xform.c"
 HEAP32[$agg$result>>2] = $16; //@line 28 "xform.c"
 $17 = (($agg$result) + 4|0); //@line 28 "xform.c"
 $18 = $min_len; //@line 28 "xform.c"
 HEAP32[$17>>2] = $18; //@line 28 "xform.c"
 STACKTOP = sp;return; //@line 28 "xform.c"
}
function _ot_xform_skip_delete($agg$result,$skip,$skip_offset,$del,$del_offset,$xform) {
 $agg$result = $agg$result|0;
 $skip = $skip|0;
 $skip_offset = $skip_offset|0;
 $del = $del|0;
 $del_offset = $del_offset|0;
 $xform = $xform|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $del_len = 0, $min_len = 0, $skip_len = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $skip_offset;
 $1 = $del_offset;
 $2 = HEAP32[$skip>>2]|0; //@line 59 "xform.c"
 $3 = $0; //@line 59 "xform.c"
 $4 = (($2) - ($3))|0; //@line 59 "xform.c"
 $skip_len = $4; //@line 59 "xform.c"
 $5 = HEAP32[$del>>2]|0; //@line 60 "xform.c"
 $6 = $1; //@line 60 "xform.c"
 $7 = (($5) - ($6))|0; //@line 60 "xform.c"
 $del_len = $7; //@line 60 "xform.c"
 $8 = $skip_len; //@line 61 "xform.c"
 $9 = $del_len; //@line 61 "xform.c"
 $10 = (_min108($8,$9)|0); //@line 61 "xform.c"
 $min_len = $10; //@line 61 "xform.c"
 $11 = (($xform) + 4|0); //@line 63 "xform.c"
 $12 = HEAP32[$11>>2]|0; //@line 63 "xform.c"
 $13 = $min_len; //@line 63 "xform.c"
 _ot_delete($12,$13); //@line 63 "xform.c"
 $14 = $min_len; //@line 65 "xform.c"
 HEAP32[$agg$result>>2] = $14; //@line 65 "xform.c"
 $15 = (($agg$result) + 4|0); //@line 65 "xform.c"
 $16 = $min_len; //@line 65 "xform.c"
 HEAP32[$15>>2] = $16; //@line 65 "xform.c"
 STACKTOP = sp;return; //@line 65 "xform.c"
}
function _ot_xform_insert_insert($agg$result,$op1_insert,$op1_offset,$xform) {
 $agg$result = $agg$result|0;
 $op1_insert = $op1_insert|0;
 $op1_offset = $op1_offset|0;
 $xform = $xform|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0, $substr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $op1_offset;
 $1 = HEAP32[$op1_insert>>2]|0; //@line 82 "xform.c"
 $2 = (_strlen(($1|0))|0); //@line 82 "xform.c"
 $3 = $0; //@line 82 "xform.c"
 $4 = (($2) - ($3))|0; //@line 82 "xform.c"
 $len = $4; //@line 82 "xform.c"
 $5 = (($xform) + 4|0); //@line 84 "xform.c"
 $6 = HEAP32[$5>>2]|0; //@line 84 "xform.c"
 $7 = $len; //@line 84 "xform.c"
 _ot_skip($6,$7); //@line 84 "xform.c"
 $8 = $len; //@line 86 "xform.c"
 $9 = $8; //@line 86 "xform.c"
 $10 = (($9) + 1)|0; //@line 86 "xform.c"
 $11 = (_malloc($10)|0); //@line 86 "xform.c"
 $substr = $11; //@line 86 "xform.c"
 $12 = $substr; //@line 87 "xform.c"
 $13 = HEAP32[$op1_insert>>2]|0; //@line 87 "xform.c"
 $14 = $0; //@line 87 "xform.c"
 $15 = (($13) + ($14)|0); //@line 87 "xform.c"
 $16 = $len; //@line 87 "xform.c"
 _memcpy(($12|0),($15|0),($16|0))|0; //@line 87 "xform.c"
 $17 = $len; //@line 88 "xform.c"
 $18 = $substr; //@line 88 "xform.c"
 $19 = (($18) + ($17)|0); //@line 88 "xform.c"
 HEAP8[$19>>0] = 0; //@line 88 "xform.c"
 $20 = HEAP32[$xform>>2]|0; //@line 89 "xform.c"
 $21 = $substr; //@line 89 "xform.c"
 _ot_insert($20,$21); //@line 89 "xform.c"
 $22 = $substr; //@line 90 "xform.c"
 _free($22); //@line 90 "xform.c"
 $23 = $len; //@line 92 "xform.c"
 HEAP32[$agg$result>>2] = $23; //@line 92 "xform.c"
 $24 = (($agg$result) + 4|0); //@line 92 "xform.c"
 HEAP32[$24>>2] = 0; //@line 92 "xform.c"
 STACKTOP = sp;return; //@line 92 "xform.c"
}
function _ot_xform_insert_delete($agg$result,$ins,$ins_offset,$xform) {
 $agg$result = $agg$result|0;
 $ins = $ins|0;
 $ins_offset = $ins_offset|0;
 $xform = $xform|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ins_len = 0, $substr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $ins_offset;
 $1 = HEAP32[$ins>>2]|0; //@line 98 "xform.c"
 $2 = (_strlen(($1|0))|0); //@line 98 "xform.c"
 $3 = $0; //@line 98 "xform.c"
 $4 = (($2) - ($3))|0; //@line 98 "xform.c"
 $ins_len = $4; //@line 98 "xform.c"
 $5 = (($xform) + 4|0); //@line 100 "xform.c"
 $6 = HEAP32[$5>>2]|0; //@line 100 "xform.c"
 $7 = $ins_len; //@line 100 "xform.c"
 _ot_skip($6,$7); //@line 100 "xform.c"
 $8 = $ins_len; //@line 102 "xform.c"
 $9 = $8; //@line 102 "xform.c"
 $10 = (($9) + 1)|0; //@line 102 "xform.c"
 $11 = (_malloc($10)|0); //@line 102 "xform.c"
 $substr = $11; //@line 102 "xform.c"
 $12 = $substr; //@line 103 "xform.c"
 $13 = HEAP32[$ins>>2]|0; //@line 103 "xform.c"
 $14 = $0; //@line 103 "xform.c"
 $15 = (($13) + ($14)|0); //@line 103 "xform.c"
 $16 = $ins_len; //@line 103 "xform.c"
 _memcpy(($12|0),($15|0),($16|0))|0; //@line 103 "xform.c"
 $17 = $ins_len; //@line 104 "xform.c"
 $18 = $substr; //@line 104 "xform.c"
 $19 = (($18) + ($17)|0); //@line 104 "xform.c"
 HEAP8[$19>>0] = 0; //@line 104 "xform.c"
 $20 = HEAP32[$xform>>2]|0; //@line 105 "xform.c"
 $21 = $substr; //@line 105 "xform.c"
 _ot_insert($20,$21); //@line 105 "xform.c"
 $22 = $substr; //@line 106 "xform.c"
 _free($22); //@line 106 "xform.c"
 $23 = $ins_len; //@line 108 "xform.c"
 HEAP32[$agg$result>>2] = $23; //@line 108 "xform.c"
 $24 = (($agg$result) + 4|0); //@line 108 "xform.c"
 HEAP32[$24>>2] = 0; //@line 108 "xform.c"
 STACKTOP = sp;return; //@line 108 "xform.c"
}
function _ot_xform_delete_skip($agg$result,$del,$del_offset,$skip,$skip_offset,$xform) {
 $agg$result = $agg$result|0;
 $del = $del|0;
 $del_offset = $del_offset|0;
 $skip = $skip|0;
 $skip_offset = $skip_offset|0;
 $xform = $xform|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $del$byval_copy = 0, $flip = 0, $flip$byval_copy = 0, $p = 0, $skip$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $flip$byval_copy = sp + 16|0;
 $del$byval_copy = sp + 32|0;
 $skip$byval_copy = sp + 36|0;
 $flip = sp;
 $p = sp + 24|0;
 $0 = $del_offset;
 $1 = $skip_offset;
 $2 = (($xform) + 4|0); //@line 72 "xform.c"
 $3 = HEAP32[$2>>2]|0; //@line 72 "xform.c"
 HEAP32[$flip>>2] = $3; //@line 72 "xform.c"
 $4 = (($flip) + 4|0); //@line 72 "xform.c"
 $5 = HEAP32[$xform>>2]|0; //@line 72 "xform.c"
 HEAP32[$4>>2] = $5; //@line 72 "xform.c"
 $6 = $1; //@line 74 "xform.c"
 $7 = $0; //@line 74 "xform.c"
 ;HEAP32[$skip$byval_copy+0>>2]=HEAP32[$skip+0>>2]|0; //@line 74 "xform.c"
 ;HEAP32[$del$byval_copy+0>>2]=HEAP32[$del+0>>2]|0; //@line 74 "xform.c"
 ;HEAP32[$flip$byval_copy+0>>2]=HEAP32[$flip+0>>2]|0;HEAP32[$flip$byval_copy+4>>2]=HEAP32[$flip+4>>2]|0; //@line 74 "xform.c"
 _ot_xform_skip_delete($p,$skip$byval_copy,$6,$del$byval_copy,$7,$flip$byval_copy); //@line 74 "xform.c"
 $8 = (($p) + 4|0); //@line 75 "xform.c"
 $9 = HEAP32[$8>>2]|0; //@line 75 "xform.c"
 HEAP32[$agg$result>>2] = $9; //@line 75 "xform.c"
 $10 = (($agg$result) + 4|0); //@line 75 "xform.c"
 $11 = HEAP32[$p>>2]|0; //@line 75 "xform.c"
 HEAP32[$10>>2] = $11; //@line 75 "xform.c"
 STACKTOP = sp;return; //@line 75 "xform.c"
}
function _ot_xform_delete_insert($agg$result,$ins,$ins_offset,$xform) {
 $agg$result = $agg$result|0;
 $ins = $ins|0;
 $ins_offset = $ins_offset|0;
 $xform = $xform|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flip = 0, $flip$byval_copy = 0, $ins$byval_copy = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $flip$byval_copy = sp + 24|0;
 $ins$byval_copy = sp + 20|0;
 $flip = sp + 8|0;
 $p = sp;
 $0 = $ins_offset;
 $1 = (($xform) + 4|0); //@line 114 "xform.c"
 $2 = HEAP32[$1>>2]|0; //@line 114 "xform.c"
 HEAP32[$flip>>2] = $2; //@line 114 "xform.c"
 $3 = (($flip) + 4|0); //@line 114 "xform.c"
 $4 = HEAP32[$xform>>2]|0; //@line 114 "xform.c"
 HEAP32[$3>>2] = $4; //@line 114 "xform.c"
 $5 = $0; //@line 115 "xform.c"
 ;HEAP32[$ins$byval_copy+0>>2]=HEAP32[$ins+0>>2]|0; //@line 115 "xform.c"
 ;HEAP32[$flip$byval_copy+0>>2]=HEAP32[$flip+0>>2]|0;HEAP32[$flip$byval_copy+4>>2]=HEAP32[$flip+4>>2]|0; //@line 115 "xform.c"
 _ot_xform_insert_delete($p,$ins$byval_copy,$5,$flip$byval_copy); //@line 115 "xform.c"
 $6 = (($p) + 4|0); //@line 116 "xform.c"
 $7 = HEAP32[$6>>2]|0; //@line 116 "xform.c"
 HEAP32[$agg$result>>2] = $7; //@line 116 "xform.c"
 $8 = (($agg$result) + 4|0); //@line 116 "xform.c"
 $9 = HEAP32[$p>>2]|0; //@line 116 "xform.c"
 HEAP32[$8>>2] = $9; //@line 116 "xform.c"
 STACKTOP = sp;return; //@line 116 "xform.c"
}
function _ot_xform_delete_delete($agg$result,$del1,$offset1,$del2,$offset2) {
 $agg$result = $agg$result|0;
 $del1 = $del1|0;
 $offset1 = $offset1|0;
 $del2 = $del2|0;
 $offset2 = $offset2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len1 = 0, $len2 = 0, $min_len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $offset1;
 $1 = $offset2;
 $2 = HEAP32[$del1>>2]|0; //@line 122 "xform.c"
 $3 = $0; //@line 122 "xform.c"
 $4 = (($2) - ($3))|0; //@line 122 "xform.c"
 $len1 = $4; //@line 122 "xform.c"
 $5 = HEAP32[$del2>>2]|0; //@line 123 "xform.c"
 $6 = $1; //@line 123 "xform.c"
 $7 = (($5) - ($6))|0; //@line 123 "xform.c"
 $len2 = $7; //@line 123 "xform.c"
 $8 = $len1; //@line 124 "xform.c"
 $9 = $len2; //@line 124 "xform.c"
 $10 = (_min108($8,$9)|0); //@line 124 "xform.c"
 $min_len = $10; //@line 124 "xform.c"
 $11 = $min_len; //@line 126 "xform.c"
 HEAP32[$agg$result>>2] = $11; //@line 126 "xform.c"
 $12 = (($agg$result) + 4|0); //@line 126 "xform.c"
 $13 = $min_len; //@line 126 "xform.c"
 HEAP32[$12>>2] = $13; //@line 126 "xform.c"
 STACKTOP = sp;return; //@line 126 "xform.c"
}
function _min108($s1,$s2) {
 $s1 = $s1|0;
 $s2 = $s2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $s1;
 $2 = $s2;
 $3 = $1; //@line 10 "xform.c"
 $4 = $2; //@line 10 "xform.c"
 $5 = ($3>>>0)<($4>>>0); //@line 10 "xform.c"
 if ($5) {
  $6 = $1; //@line 11 "xform.c"
  $0 = $6; //@line 11 "xform.c"
 } else {
  $7 = $2; //@line 13 "xform.c"
  $0 = $7; //@line 13 "xform.c"
 }
 $8 = $0; //@line 15 "xform.c"
 STACKTOP = sp;return ($8|0); //@line 15 "xform.c"
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___strchrnul($s,$c)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $c&255;
 $3 = ($1<<24>>24)==($2<<24>>24);
 $4 = $3 ? $0 : 0;
 STACKTOP = sp;return ($4|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$02$lcssa = 0, $$026 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $w$0$lcssa = 0, $w$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 if ($1) {
  $6 = (_strlen(($s|0))|0);
  $7 = (($s) + ($6)|0);
  $$0 = $7;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = $s;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 L5: do {
  if ($4) {
   $$02$lcssa = $s;
  } else {
   $5 = $c&255;
   $$026 = $s;
   while(1) {
    $12 = HEAP8[$$026>>0]|0;
    $13 = ($12<<24>>24)==(0);
    if ($13) {
     $$0 = $$026;
     label = 13;
     break;
    }
    $14 = ($12<<24>>24)==($5<<24>>24);
    $9 = (($$026) + 1|0);
    if ($14) {
     $$0 = $$026;
     label = 13;
     break;
    }
    $8 = $9;
    $10 = $8 & 3;
    $11 = ($10|0)==(0);
    if ($11) {
     $$02$lcssa = $9;
     break L5;
    } else {
     $$026 = $9;
    }
   }
   if ((label|0) == 13) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $15 = Math_imul($0, 16843009)|0;
 $16 = HEAP32[$$02$lcssa>>2]|0;
 $17 = (($16) + -16843009)|0;
 $18 = $16 & -2139062144;
 $19 = $18 ^ -2139062144;
 $20 = $19 & $17;
 $21 = ($20|0)==(0);
 L15: do {
  if ($21) {
   $30 = $16;$w$03 = $$02$lcssa;
   while(1) {
    $29 = $30 ^ $15;
    $31 = (($29) + -16843009)|0;
    $32 = $29 & -2139062144;
    $33 = $32 ^ -2139062144;
    $34 = $33 & $31;
    $35 = ($34|0)==(0);
    $23 = (($w$03) + 4|0);
    if (!($35)) {
     $w$0$lcssa = $w$03;
     break L15;
    }
    $22 = HEAP32[$23>>2]|0;
    $24 = (($22) + -16843009)|0;
    $25 = $22 & -2139062144;
    $26 = $25 ^ -2139062144;
    $27 = $26 & $24;
    $28 = ($27|0)==(0);
    if ($28) {
     $30 = $22;$w$03 = $23;
    } else {
     $w$0$lcssa = $23;
     break;
    }
   }
  } else {
   $w$0$lcssa = $$02$lcssa;
  }
 } while(0);
 $36 = $c&255;
 $$1 = $w$0$lcssa;
 while(1) {
  $37 = HEAP8[$$1>>0]|0;
  $38 = ($37<<24>>24)==(0);
  $39 = ($37<<24>>24)==($36<<24>>24);
  $or$cond = $38 | $39;
  $40 = (($$1) + 1|0);
  if ($or$cond) {
   $$0 = $$1;
   break;
  } else {
   $$1 = $40;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$$i = 0, $$3$i = 0, $$4$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i25 = 0, $$pre$i25$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i26$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre57$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0;
 var $$sum$i14$i = 0, $$sum$i15$i = 0, $$sum$i18$i = 0, $$sum$i21$i = 0, $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i16$i = 0, $$sum1$i22$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum10$pre$i$i = 0, $$sum107$i = 0, $$sum108$i = 0, $$sum109$i = 0;
 var $$sum11$i = 0, $$sum11$i$i = 0, $$sum11$i24$i = 0, $$sum110$i = 0, $$sum111$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0, $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0;
 var $$sum14$pre$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i17$i = 0, $$sum2$i19$i = 0, $$sum2$i23$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0;
 var $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i$i = 0, $$sum3$i27 = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0;
 var $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0, $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0;
 var $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0;
 var $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0;
 var $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0;
 var $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0;
 var $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0;
 var $I1$0$c$i$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$025$i = 0, $K2$014$i$i = 0, $K8$052$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i18 = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i17 = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i28$i = 0, $T$013$i$i = 0;
 var $T$024$i = 0, $T$051$i$i = 0, $br$0$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $notlhs$i = 0, $notrhs$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i29 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond19$i = 0, $or$cond2$i = 0;
 var $or$cond49$i = 0, $or$cond5$i = 0, $or$cond6$i = 0, $or$cond8$not$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$329$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$075$i = 0, $sp$168$i = 0, $ssize$0$$i = 0;
 var $ssize$0$i = 0, $ssize$1$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$228$i = 0, $tbase$0$i = 0, $tbase$247$i = 0, $tsize$0$i = 0, $tsize$0323841$i = 0, $tsize$1$i = 0, $tsize$246$i = 0, $v$0$i = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0;
 var $v$330$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   if ($1) {
    $5 = 16;
   } else {
    $2 = (($bytes) + 11)|0;
    $3 = $2 & -8;
    $5 = $3;
   }
   $4 = $5 >>> 3;
   $6 = HEAP32[1504>>2]|0;
   $7 = $6 >>> $4;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($4))|0;
    $13 = $12 << 1;
    $14 = ((1504 + ($13<<2)|0) + 40|0);
    $$sum10 = (($13) + 2)|0;
    $15 = ((1504 + ($$sum10<<2)|0) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[1504>>2] = $22;
     } else {
      $23 = HEAP32[((1504 + 16|0))>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = (($18) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = (($16) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    STACKTOP = sp;return ($mem$0|0);
   }
   $34 = HEAP32[((1504 + 8|0))>>2]|0;
   $35 = ($5>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $4;
     $38 = 2 << $4;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = ((1504 + ($65<<2)|0) + 40|0);
     $$sum4 = (($65) + 2)|0;
     $67 = ((1504 + ($$sum4<<2)|0) + 40|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[1504>>2] = $74;
      } else {
       $75 = HEAP32[((1504 + 16|0))>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = (($70) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($5))|0;
     $82 = $5 | 3;
     $83 = (($68) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($5)|0);
     $85 = $81 | 1;
     $$sum56 = $5 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $88 = HEAP32[((1504 + 8|0))>>2]|0;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[((1504 + 20|0))>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = ((1504 + ($92<<2)|0) + 40|0);
      $94 = HEAP32[1504>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[1504>>2] = $98;
       $$sum8$pre = (($92) + 2)|0;
       $$pre = ((1504 + ($$sum8$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = ((1504 + ($$sum9<<2)|0) + 40|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[((1504 + 16|0))>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = (($F4$0) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = (($90) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = (($90) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[((1504 + 8|0))>>2] = $81;
     HEAP32[((1504 + 20|0))>>2] = $84;
     $mem$0 = $69;
     STACKTOP = sp;return ($mem$0|0);
    }
    $106 = HEAP32[((1504 + 4|0))>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $5;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = ((1504 + ($130<<2)|0) + 304|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($5))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = (($t$0$i) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = (($t$0$i) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = (($144) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($5))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[((1504 + 16|0))>>2]|0;
     $150 = ($v$0$i>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i) + ($5)|0);
     $152 = ($v$0$i>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = (($v$0$i) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($v$0$i) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i|0);
     do {
      if ($157) {
       $167 = (($v$0$i) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = (($v$0$i) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = (($R$0$i) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = (($R$0$i) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i>>2] = 0;
        $R$1$i = $R$0$i;
        break;
       }
      } else {
       $158 = (($v$0$i) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = (($159) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = (($156) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = (($v$0$i) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ((1504 + ($182<<2)|0) + 304|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[((1504 + 4|0))>>2]|0;
         $189 = $188 & $187;
         HEAP32[((1504 + 4|0))>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[((1504 + 16|0))>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = (($154) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = (($154) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[((1504 + 16|0))>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = (($R$1$i) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = (($v$0$i) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = HEAP32[((1504 + 16|0))>>2]|0;
         $204 = ($201>>>0)<($203>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = (($R$1$i) + 16|0);
          HEAP32[$205>>2] = $201;
          $206 = (($201) + 24|0);
          HEAP32[$206>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $207 = (($v$0$i) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[((1504 + 16|0))>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = (($R$1$i) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = (($208) + 24|0);
         HEAP32[$213>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($rsize$0$i>>>0)<(16);
     if ($214) {
      $215 = (($rsize$0$i) + ($5))|0;
      $216 = $215 | 3;
      $217 = (($v$0$i) + 4|0);
      HEAP32[$217>>2] = $216;
      $$sum4$i = (($215) + 4)|0;
      $218 = (($v$0$i) + ($$sum4$i)|0);
      $219 = HEAP32[$218>>2]|0;
      $220 = $219 | 1;
      HEAP32[$218>>2] = $220;
     } else {
      $221 = $5 | 3;
      $222 = (($v$0$i) + 4|0);
      HEAP32[$222>>2] = $221;
      $223 = $rsize$0$i | 1;
      $$sum$i35 = $5 | 4;
      $224 = (($v$0$i) + ($$sum$i35)|0);
      HEAP32[$224>>2] = $223;
      $$sum1$i = (($rsize$0$i) + ($5))|0;
      $225 = (($v$0$i) + ($$sum1$i)|0);
      HEAP32[$225>>2] = $rsize$0$i;
      $226 = HEAP32[((1504 + 8|0))>>2]|0;
      $227 = ($226|0)==(0);
      if (!($227)) {
       $228 = HEAP32[((1504 + 20|0))>>2]|0;
       $229 = $226 >>> 3;
       $230 = $229 << 1;
       $231 = ((1504 + ($230<<2)|0) + 40|0);
       $232 = HEAP32[1504>>2]|0;
       $233 = 1 << $229;
       $234 = $232 & $233;
       $235 = ($234|0)==(0);
       if ($235) {
        $236 = $232 | $233;
        HEAP32[1504>>2] = $236;
        $$sum2$pre$i = (($230) + 2)|0;
        $$pre$i = ((1504 + ($$sum2$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $231;
       } else {
        $$sum3$i = (($230) + 2)|0;
        $237 = ((1504 + ($$sum3$i<<2)|0) + 40|0);
        $238 = HEAP32[$237>>2]|0;
        $239 = HEAP32[((1504 + 16|0))>>2]|0;
        $240 = ($238>>>0)<($239>>>0);
        if ($240) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $237;$F1$0$i = $238;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $228;
       $241 = (($F1$0$i) + 12|0);
       HEAP32[$241>>2] = $228;
       $242 = (($228) + 8|0);
       HEAP32[$242>>2] = $F1$0$i;
       $243 = (($228) + 12|0);
       HEAP32[$243>>2] = $231;
      }
      HEAP32[((1504 + 8|0))>>2] = $rsize$0$i;
      HEAP32[((1504 + 20|0))>>2] = $151;
     }
     $244 = (($v$0$i) + 8|0);
     $mem$0 = $244;
     STACKTOP = sp;return ($mem$0|0);
    }
   } else {
    $nb$0 = $5;
   }
  } else {
   $245 = ($bytes>>>0)>(4294967231);
   if ($245) {
    $nb$0 = -1;
   } else {
    $246 = (($bytes) + 11)|0;
    $247 = $246 & -8;
    $248 = HEAP32[((1504 + 4|0))>>2]|0;
    $249 = ($248|0)==(0);
    if ($249) {
     $nb$0 = $247;
    } else {
     $250 = (0 - ($247))|0;
     $251 = $246 >>> 8;
     $252 = ($251|0)==(0);
     if ($252) {
      $idx$0$i = 0;
     } else {
      $253 = ($247>>>0)>(16777215);
      if ($253) {
       $idx$0$i = 31;
      } else {
       $254 = (($251) + 1048320)|0;
       $255 = $254 >>> 16;
       $256 = $255 & 8;
       $257 = $251 << $256;
       $258 = (($257) + 520192)|0;
       $259 = $258 >>> 16;
       $260 = $259 & 4;
       $261 = $260 | $256;
       $262 = $257 << $260;
       $263 = (($262) + 245760)|0;
       $264 = $263 >>> 16;
       $265 = $264 & 2;
       $266 = $261 | $265;
       $267 = (14 - ($266))|0;
       $268 = $262 << $265;
       $269 = $268 >>> 15;
       $270 = (($267) + ($269))|0;
       $271 = $270 << 1;
       $272 = (($270) + 7)|0;
       $273 = $247 >>> $272;
       $274 = $273 & 1;
       $275 = $274 | $271;
       $idx$0$i = $275;
      }
     }
     $276 = ((1504 + ($idx$0$i<<2)|0) + 304|0);
     $277 = HEAP32[$276>>2]|0;
     $278 = ($277|0)==(0|0);
     L126: do {
      if ($278) {
       $rsize$2$i = $250;$t$1$i = 0;$v$2$i = 0;
      } else {
       $279 = ($idx$0$i|0)==(31);
       if ($279) {
        $283 = 0;
       } else {
        $280 = $idx$0$i >>> 1;
        $281 = (25 - ($280))|0;
        $283 = $281;
       }
       $282 = $247 << $283;
       $rsize$0$i15 = $250;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $277;$v$0$i16 = 0;
       while(1) {
        $284 = (($t$0$i14) + 4|0);
        $285 = HEAP32[$284>>2]|0;
        $286 = $285 & -8;
        $287 = (($286) - ($247))|0;
        $288 = ($287>>>0)<($rsize$0$i15>>>0);
        if ($288) {
         $289 = ($286|0)==($247|0);
         if ($289) {
          $rsize$2$i = $287;$t$1$i = $t$0$i14;$v$2$i = $t$0$i14;
          break L126;
         } else {
          $rsize$1$i = $287;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $290 = (($t$0$i14) + 20|0);
        $291 = HEAP32[$290>>2]|0;
        $292 = $sizebits$0$i >>> 31;
        $293 = ((($t$0$i14) + ($292<<2)|0) + 16|0);
        $294 = HEAP32[$293>>2]|0;
        $295 = ($291|0)==(0|0);
        $296 = ($291|0)==($294|0);
        $or$cond$i = $295 | $296;
        $rst$1$i = $or$cond$i ? $rst$0$i : $291;
        $297 = ($294|0)==(0|0);
        $298 = $sizebits$0$i << 1;
        if ($297) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $298;$t$0$i14 = $294;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     $299 = ($t$1$i|0)==(0|0);
     $300 = ($v$2$i|0)==(0|0);
     $or$cond19$i = $299 & $300;
     if ($or$cond19$i) {
      $301 = 2 << $idx$0$i;
      $302 = (0 - ($301))|0;
      $303 = $301 | $302;
      $304 = $248 & $303;
      $305 = ($304|0)==(0);
      if ($305) {
       $nb$0 = $247;
       break;
      }
      $306 = (0 - ($304))|0;
      $307 = $304 & $306;
      $308 = (($307) + -1)|0;
      $309 = $308 >>> 12;
      $310 = $309 & 16;
      $311 = $308 >>> $310;
      $312 = $311 >>> 5;
      $313 = $312 & 8;
      $314 = $313 | $310;
      $315 = $311 >>> $313;
      $316 = $315 >>> 2;
      $317 = $316 & 4;
      $318 = $314 | $317;
      $319 = $315 >>> $317;
      $320 = $319 >>> 1;
      $321 = $320 & 2;
      $322 = $318 | $321;
      $323 = $319 >>> $321;
      $324 = $323 >>> 1;
      $325 = $324 & 1;
      $326 = $322 | $325;
      $327 = $323 >>> $325;
      $328 = (($326) + ($327))|0;
      $329 = ((1504 + ($328<<2)|0) + 304|0);
      $330 = HEAP32[$329>>2]|0;
      $t$2$ph$i = $330;
     } else {
      $t$2$ph$i = $t$1$i;
     }
     $331 = ($t$2$ph$i|0)==(0|0);
     if ($331) {
      $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
     } else {
      $rsize$329$i = $rsize$2$i;$t$228$i = $t$2$ph$i;$v$330$i = $v$2$i;
      while(1) {
       $332 = (($t$228$i) + 4|0);
       $333 = HEAP32[$332>>2]|0;
       $334 = $333 & -8;
       $335 = (($334) - ($247))|0;
       $336 = ($335>>>0)<($rsize$329$i>>>0);
       $$rsize$3$i = $336 ? $335 : $rsize$329$i;
       $t$2$v$3$i = $336 ? $t$228$i : $v$330$i;
       $337 = (($t$228$i) + 16|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = ($338|0)==(0|0);
       if (!($339)) {
        $rsize$329$i = $$rsize$3$i;$t$228$i = $338;$v$330$i = $t$2$v$3$i;
        continue;
       }
       $340 = (($t$228$i) + 20|0);
       $341 = HEAP32[$340>>2]|0;
       $342 = ($341|0)==(0|0);
       if ($342) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$329$i = $$rsize$3$i;$t$228$i = $341;$v$330$i = $t$2$v$3$i;
       }
      }
     }
     $343 = ($v$3$lcssa$i|0)==(0|0);
     if ($343) {
      $nb$0 = $247;
     } else {
      $344 = HEAP32[((1504 + 8|0))>>2]|0;
      $345 = (($344) - ($247))|0;
      $346 = ($rsize$3$lcssa$i>>>0)<($345>>>0);
      if ($346) {
       $347 = HEAP32[((1504 + 16|0))>>2]|0;
       $348 = ($v$3$lcssa$i>>>0)<($347>>>0);
       if ($348) {
        _abort();
        // unreachable;
       }
       $349 = (($v$3$lcssa$i) + ($247)|0);
       $350 = ($v$3$lcssa$i>>>0)<($349>>>0);
       if (!($350)) {
        _abort();
        // unreachable;
       }
       $351 = (($v$3$lcssa$i) + 24|0);
       $352 = HEAP32[$351>>2]|0;
       $353 = (($v$3$lcssa$i) + 12|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ($354|0)==($v$3$lcssa$i|0);
       do {
        if ($355) {
         $365 = (($v$3$lcssa$i) + 20|0);
         $366 = HEAP32[$365>>2]|0;
         $367 = ($366|0)==(0|0);
         if ($367) {
          $368 = (($v$3$lcssa$i) + 16|0);
          $369 = HEAP32[$368>>2]|0;
          $370 = ($369|0)==(0|0);
          if ($370) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $369;$RP$0$i17 = $368;
          }
         } else {
          $R$0$i18 = $366;$RP$0$i17 = $365;
         }
         while(1) {
          $371 = (($R$0$i18) + 20|0);
          $372 = HEAP32[$371>>2]|0;
          $373 = ($372|0)==(0|0);
          if (!($373)) {
           $R$0$i18 = $372;$RP$0$i17 = $371;
           continue;
          }
          $374 = (($R$0$i18) + 16|0);
          $375 = HEAP32[$374>>2]|0;
          $376 = ($375|0)==(0|0);
          if ($376) {
           break;
          } else {
           $R$0$i18 = $375;$RP$0$i17 = $374;
          }
         }
         $377 = ($RP$0$i17>>>0)<($347>>>0);
         if ($377) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17>>2] = 0;
          $R$1$i20 = $R$0$i18;
          break;
         }
        } else {
         $356 = (($v$3$lcssa$i) + 8|0);
         $357 = HEAP32[$356>>2]|0;
         $358 = ($357>>>0)<($347>>>0);
         if ($358) {
          _abort();
          // unreachable;
         }
         $359 = (($357) + 12|0);
         $360 = HEAP32[$359>>2]|0;
         $361 = ($360|0)==($v$3$lcssa$i|0);
         if (!($361)) {
          _abort();
          // unreachable;
         }
         $362 = (($354) + 8|0);
         $363 = HEAP32[$362>>2]|0;
         $364 = ($363|0)==($v$3$lcssa$i|0);
         if ($364) {
          HEAP32[$359>>2] = $354;
          HEAP32[$362>>2] = $357;
          $R$1$i20 = $354;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $378 = ($352|0)==(0|0);
       do {
        if (!($378)) {
         $379 = (($v$3$lcssa$i) + 28|0);
         $380 = HEAP32[$379>>2]|0;
         $381 = ((1504 + ($380<<2)|0) + 304|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = ($v$3$lcssa$i|0)==($382|0);
         if ($383) {
          HEAP32[$381>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $384 = 1 << $380;
           $385 = $384 ^ -1;
           $386 = HEAP32[((1504 + 4|0))>>2]|0;
           $387 = $386 & $385;
           HEAP32[((1504 + 4|0))>>2] = $387;
           break;
          }
         } else {
          $388 = HEAP32[((1504 + 16|0))>>2]|0;
          $389 = ($352>>>0)<($388>>>0);
          if ($389) {
           _abort();
           // unreachable;
          }
          $390 = (($352) + 16|0);
          $391 = HEAP32[$390>>2]|0;
          $392 = ($391|0)==($v$3$lcssa$i|0);
          if ($392) {
           HEAP32[$390>>2] = $R$1$i20;
          } else {
           $393 = (($352) + 20|0);
           HEAP32[$393>>2] = $R$1$i20;
          }
          $394 = ($R$1$i20|0)==(0|0);
          if ($394) {
           break;
          }
         }
         $395 = HEAP32[((1504 + 16|0))>>2]|0;
         $396 = ($R$1$i20>>>0)<($395>>>0);
         if ($396) {
          _abort();
          // unreachable;
         }
         $397 = (($R$1$i20) + 24|0);
         HEAP32[$397>>2] = $352;
         $398 = (($v$3$lcssa$i) + 16|0);
         $399 = HEAP32[$398>>2]|0;
         $400 = ($399|0)==(0|0);
         do {
          if (!($400)) {
           $401 = HEAP32[((1504 + 16|0))>>2]|0;
           $402 = ($399>>>0)<($401>>>0);
           if ($402) {
            _abort();
            // unreachable;
           } else {
            $403 = (($R$1$i20) + 16|0);
            HEAP32[$403>>2] = $399;
            $404 = (($399) + 24|0);
            HEAP32[$404>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $405 = (($v$3$lcssa$i) + 20|0);
         $406 = HEAP32[$405>>2]|0;
         $407 = ($406|0)==(0|0);
         if (!($407)) {
          $408 = HEAP32[((1504 + 16|0))>>2]|0;
          $409 = ($406>>>0)<($408>>>0);
          if ($409) {
           _abort();
           // unreachable;
          } else {
           $410 = (($R$1$i20) + 20|0);
           HEAP32[$410>>2] = $406;
           $411 = (($406) + 24|0);
           HEAP32[$411>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $412 = ($rsize$3$lcssa$i>>>0)<(16);
       L204: do {
        if ($412) {
         $413 = (($rsize$3$lcssa$i) + ($247))|0;
         $414 = $413 | 3;
         $415 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$415>>2] = $414;
         $$sum18$i = (($413) + 4)|0;
         $416 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $417 = HEAP32[$416>>2]|0;
         $418 = $417 | 1;
         HEAP32[$416>>2] = $418;
        } else {
         $419 = $247 | 3;
         $420 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$420>>2] = $419;
         $421 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $247 | 4;
         $422 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$422>>2] = $421;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($247))|0;
         $423 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$423>>2] = $rsize$3$lcssa$i;
         $424 = $rsize$3$lcssa$i >>> 3;
         $425 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($425) {
          $426 = $424 << 1;
          $427 = ((1504 + ($426<<2)|0) + 40|0);
          $428 = HEAP32[1504>>2]|0;
          $429 = 1 << $424;
          $430 = $428 & $429;
          $431 = ($430|0)==(0);
          if ($431) {
           $432 = $428 | $429;
           HEAP32[1504>>2] = $432;
           $$sum14$pre$i = (($426) + 2)|0;
           $$pre$i25 = ((1504 + ($$sum14$pre$i<<2)|0) + 40|0);
           $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $427;
          } else {
           $$sum17$i = (($426) + 2)|0;
           $433 = ((1504 + ($$sum17$i<<2)|0) + 40|0);
           $434 = HEAP32[$433>>2]|0;
           $435 = HEAP32[((1504 + 16|0))>>2]|0;
           $436 = ($434>>>0)<($435>>>0);
           if ($436) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i26Z2D = $433;$F5$0$i = $434;
           }
          }
          HEAP32[$$pre$phi$i26Z2D>>2] = $349;
          $437 = (($F5$0$i) + 12|0);
          HEAP32[$437>>2] = $349;
          $$sum15$i = (($247) + 8)|0;
          $438 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$438>>2] = $F5$0$i;
          $$sum16$i = (($247) + 12)|0;
          $439 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$439>>2] = $427;
          break;
         }
         $440 = $rsize$3$lcssa$i >>> 8;
         $441 = ($440|0)==(0);
         if ($441) {
          $I7$0$i = 0;
         } else {
          $442 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($442) {
           $I7$0$i = 31;
          } else {
           $443 = (($440) + 1048320)|0;
           $444 = $443 >>> 16;
           $445 = $444 & 8;
           $446 = $440 << $445;
           $447 = (($446) + 520192)|0;
           $448 = $447 >>> 16;
           $449 = $448 & 4;
           $450 = $449 | $445;
           $451 = $446 << $449;
           $452 = (($451) + 245760)|0;
           $453 = $452 >>> 16;
           $454 = $453 & 2;
           $455 = $450 | $454;
           $456 = (14 - ($455))|0;
           $457 = $451 << $454;
           $458 = $457 >>> 15;
           $459 = (($456) + ($458))|0;
           $460 = $459 << 1;
           $461 = (($459) + 7)|0;
           $462 = $rsize$3$lcssa$i >>> $461;
           $463 = $462 & 1;
           $464 = $463 | $460;
           $I7$0$i = $464;
          }
         }
         $465 = ((1504 + ($I7$0$i<<2)|0) + 304|0);
         $$sum2$i = (($247) + 28)|0;
         $466 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$466>>2] = $I7$0$i;
         $$sum3$i27 = (($247) + 16)|0;
         $467 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($247) + 20)|0;
         $468 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$468>>2] = 0;
         HEAP32[$467>>2] = 0;
         $469 = HEAP32[((1504 + 4|0))>>2]|0;
         $470 = 1 << $I7$0$i;
         $471 = $469 & $470;
         $472 = ($471|0)==(0);
         if ($472) {
          $473 = $469 | $470;
          HEAP32[((1504 + 4|0))>>2] = $473;
          HEAP32[$465>>2] = $349;
          $$sum5$i = (($247) + 24)|0;
          $474 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$474>>2] = $465;
          $$sum6$i = (($247) + 12)|0;
          $475 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$475>>2] = $349;
          $$sum7$i = (($247) + 8)|0;
          $476 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$476>>2] = $349;
          break;
         }
         $477 = HEAP32[$465>>2]|0;
         $478 = ($I7$0$i|0)==(31);
         if ($478) {
          $486 = 0;
         } else {
          $479 = $I7$0$i >>> 1;
          $480 = (25 - ($479))|0;
          $486 = $480;
         }
         $481 = (($477) + 4|0);
         $482 = HEAP32[$481>>2]|0;
         $483 = $482 & -8;
         $484 = ($483|0)==($rsize$3$lcssa$i|0);
         L225: do {
          if ($484) {
           $T$0$lcssa$i = $477;
          } else {
           $485 = $rsize$3$lcssa$i << $486;
           $K12$025$i = $485;$T$024$i = $477;
           while(1) {
            $493 = $K12$025$i >>> 31;
            $494 = ((($T$024$i) + ($493<<2)|0) + 16|0);
            $489 = HEAP32[$494>>2]|0;
            $495 = ($489|0)==(0|0);
            if ($495) {
             break;
            }
            $487 = $K12$025$i << 1;
            $488 = (($489) + 4|0);
            $490 = HEAP32[$488>>2]|0;
            $491 = $490 & -8;
            $492 = ($491|0)==($rsize$3$lcssa$i|0);
            if ($492) {
             $T$0$lcssa$i = $489;
             break L225;
            } else {
             $K12$025$i = $487;$T$024$i = $489;
            }
           }
           $496 = HEAP32[((1504 + 16|0))>>2]|0;
           $497 = ($494>>>0)<($496>>>0);
           if ($497) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$494>>2] = $349;
            $$sum11$i = (($247) + 24)|0;
            $498 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$498>>2] = $T$024$i;
            $$sum12$i = (($247) + 12)|0;
            $499 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$499>>2] = $349;
            $$sum13$i = (($247) + 8)|0;
            $500 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$500>>2] = $349;
            break L204;
           }
          }
         } while(0);
         $501 = (($T$0$lcssa$i) + 8|0);
         $502 = HEAP32[$501>>2]|0;
         $503 = HEAP32[((1504 + 16|0))>>2]|0;
         $504 = ($T$0$lcssa$i>>>0)<($503>>>0);
         if ($504) {
          _abort();
          // unreachable;
         }
         $505 = ($502>>>0)<($503>>>0);
         if ($505) {
          _abort();
          // unreachable;
         } else {
          $506 = (($502) + 12|0);
          HEAP32[$506>>2] = $349;
          HEAP32[$501>>2] = $349;
          $$sum8$i = (($247) + 8)|0;
          $507 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$507>>2] = $502;
          $$sum9$i = (($247) + 12)|0;
          $508 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$508>>2] = $T$0$lcssa$i;
          $$sum10$i = (($247) + 24)|0;
          $509 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$509>>2] = 0;
          break;
         }
        }
       } while(0);
       $510 = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $510;
       STACKTOP = sp;return ($mem$0|0);
      } else {
       $nb$0 = $247;
      }
     }
    }
   }
  }
 } while(0);
 $511 = HEAP32[((1504 + 8|0))>>2]|0;
 $512 = ($nb$0>>>0)>($511>>>0);
 if (!($512)) {
  $513 = (($511) - ($nb$0))|0;
  $514 = HEAP32[((1504 + 20|0))>>2]|0;
  $515 = ($513>>>0)>(15);
  if ($515) {
   $516 = (($514) + ($nb$0)|0);
   HEAP32[((1504 + 20|0))>>2] = $516;
   HEAP32[((1504 + 8|0))>>2] = $513;
   $517 = $513 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $518 = (($514) + ($$sum2)|0);
   HEAP32[$518>>2] = $517;
   $519 = (($514) + ($511)|0);
   HEAP32[$519>>2] = $513;
   $520 = $nb$0 | 3;
   $521 = (($514) + 4|0);
   HEAP32[$521>>2] = $520;
  } else {
   HEAP32[((1504 + 8|0))>>2] = 0;
   HEAP32[((1504 + 20|0))>>2] = 0;
   $522 = $511 | 3;
   $523 = (($514) + 4|0);
   HEAP32[$523>>2] = $522;
   $$sum1 = (($511) + 4)|0;
   $524 = (($514) + ($$sum1)|0);
   $525 = HEAP32[$524>>2]|0;
   $526 = $525 | 1;
   HEAP32[$524>>2] = $526;
  }
  $527 = (($514) + 8|0);
  $mem$0 = $527;
  STACKTOP = sp;return ($mem$0|0);
 }
 $528 = HEAP32[((1504 + 12|0))>>2]|0;
 $529 = ($nb$0>>>0)<($528>>>0);
 if ($529) {
  $530 = (($528) - ($nb$0))|0;
  HEAP32[((1504 + 12|0))>>2] = $530;
  $531 = HEAP32[((1504 + 24|0))>>2]|0;
  $532 = (($531) + ($nb$0)|0);
  HEAP32[((1504 + 24|0))>>2] = $532;
  $533 = $530 | 1;
  $$sum = (($nb$0) + 4)|0;
  $534 = (($531) + ($$sum)|0);
  HEAP32[$534>>2] = $533;
  $535 = $nb$0 | 3;
  $536 = (($531) + 4|0);
  HEAP32[$536>>2] = $535;
  $537 = (($531) + 8|0);
  $mem$0 = $537;
  STACKTOP = sp;return ($mem$0|0);
 }
 $538 = HEAP32[1976>>2]|0;
 $539 = ($538|0)==(0);
 do {
  if ($539) {
   $540 = (_sysconf(30)|0);
   $541 = (($540) + -1)|0;
   $542 = $541 & $540;
   $543 = ($542|0)==(0);
   if ($543) {
    HEAP32[((1976 + 8|0))>>2] = $540;
    HEAP32[((1976 + 4|0))>>2] = $540;
    HEAP32[((1976 + 12|0))>>2] = -1;
    HEAP32[((1976 + 16|0))>>2] = -1;
    HEAP32[((1976 + 20|0))>>2] = 0;
    HEAP32[((1504 + 444|0))>>2] = 0;
    $544 = (_time((0|0))|0);
    $545 = $544 & -16;
    $546 = $545 ^ 1431655768;
    HEAP32[1976>>2] = $546;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $547 = (($nb$0) + 48)|0;
 $548 = HEAP32[((1976 + 8|0))>>2]|0;
 $549 = (($nb$0) + 47)|0;
 $550 = (($548) + ($549))|0;
 $551 = (0 - ($548))|0;
 $552 = $550 & $551;
 $553 = ($552>>>0)>($nb$0>>>0);
 if (!($553)) {
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $554 = HEAP32[((1504 + 440|0))>>2]|0;
 $555 = ($554|0)==(0);
 if (!($555)) {
  $556 = HEAP32[((1504 + 432|0))>>2]|0;
  $557 = (($556) + ($552))|0;
  $558 = ($557>>>0)<=($556>>>0);
  $559 = ($557>>>0)>($554>>>0);
  $or$cond1$i = $558 | $559;
  if ($or$cond1$i) {
   $mem$0 = 0;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $560 = HEAP32[((1504 + 444|0))>>2]|0;
 $561 = $560 & 4;
 $562 = ($561|0)==(0);
 L269: do {
  if ($562) {
   $563 = HEAP32[((1504 + 24|0))>>2]|0;
   $564 = ($563|0)==(0|0);
   L271: do {
    if ($564) {
     label = 182;
    } else {
     $sp$0$i$i = ((1504 + 448|0));
     while(1) {
      $565 = HEAP32[$sp$0$i$i>>2]|0;
      $566 = ($565>>>0)>($563>>>0);
      if (!($566)) {
       $567 = (($sp$0$i$i) + 4|0);
       $568 = HEAP32[$567>>2]|0;
       $569 = (($565) + ($568)|0);
       $570 = ($569>>>0)>($563>>>0);
       if ($570) {
        break;
       }
      }
      $571 = (($sp$0$i$i) + 8|0);
      $572 = HEAP32[$571>>2]|0;
      $573 = ($572|0)==(0|0);
      if ($573) {
       label = 182;
       break L271;
      } else {
       $sp$0$i$i = $572;
      }
     }
     $574 = ($sp$0$i$i|0)==(0|0);
     if ($574) {
      label = 182;
     } else {
      $597 = HEAP32[((1504 + 12|0))>>2]|0;
      $598 = (($550) - ($597))|0;
      $599 = $598 & $551;
      $600 = ($599>>>0)<(2147483647);
      if ($600) {
       $601 = (_sbrk(($599|0))|0);
       $602 = HEAP32[$sp$0$i$i>>2]|0;
       $603 = HEAP32[$567>>2]|0;
       $604 = (($602) + ($603)|0);
       $605 = ($601|0)==($604|0);
       $$3$i = $605 ? $599 : 0;
       $$4$i = $605 ? $601 : (-1);
       $br$0$i = $601;$ssize$1$i = $599;$tbase$0$i = $$4$i;$tsize$0$i = $$3$i;
       label = 191;
      } else {
       $tsize$0323841$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 182) {
     $575 = (_sbrk(0)|0);
     $576 = ($575|0)==((-1)|0);
     if ($576) {
      $tsize$0323841$i = 0;
     } else {
      $577 = $575;
      $578 = HEAP32[((1976 + 4|0))>>2]|0;
      $579 = (($578) + -1)|0;
      $580 = $579 & $577;
      $581 = ($580|0)==(0);
      if ($581) {
       $ssize$0$i = $552;
      } else {
       $582 = (($579) + ($577))|0;
       $583 = (0 - ($578))|0;
       $584 = $582 & $583;
       $585 = (($552) - ($577))|0;
       $586 = (($585) + ($584))|0;
       $ssize$0$i = $586;
      }
      $587 = HEAP32[((1504 + 432|0))>>2]|0;
      $588 = (($587) + ($ssize$0$i))|0;
      $589 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $590 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i29 = $589 & $590;
      if ($or$cond$i29) {
       $591 = HEAP32[((1504 + 440|0))>>2]|0;
       $592 = ($591|0)==(0);
       if (!($592)) {
        $593 = ($588>>>0)<=($587>>>0);
        $594 = ($588>>>0)>($591>>>0);
        $or$cond2$i = $593 | $594;
        if ($or$cond2$i) {
         $tsize$0323841$i = 0;
         break;
        }
       }
       $595 = (_sbrk(($ssize$0$i|0))|0);
       $596 = ($595|0)==($575|0);
       $ssize$0$$i = $596 ? $ssize$0$i : 0;
       $$$i = $596 ? $575 : (-1);
       $br$0$i = $595;$ssize$1$i = $ssize$0$i;$tbase$0$i = $$$i;$tsize$0$i = $ssize$0$$i;
       label = 191;
      } else {
       $tsize$0323841$i = 0;
      }
     }
    }
   } while(0);
   L291: do {
    if ((label|0) == 191) {
     $606 = (0 - ($ssize$1$i))|0;
     $607 = ($tbase$0$i|0)==((-1)|0);
     if (!($607)) {
      $tbase$247$i = $tbase$0$i;$tsize$246$i = $tsize$0$i;
      label = 202;
      break L269;
     }
     $608 = ($br$0$i|0)!=((-1)|0);
     $609 = ($ssize$1$i>>>0)<(2147483647);
     $or$cond5$i = $608 & $609;
     $610 = ($ssize$1$i>>>0)<($547>>>0);
     $or$cond6$i = $or$cond5$i & $610;
     do {
      if ($or$cond6$i) {
       $611 = HEAP32[((1976 + 8|0))>>2]|0;
       $612 = (($549) - ($ssize$1$i))|0;
       $613 = (($612) + ($611))|0;
       $614 = (0 - ($611))|0;
       $615 = $613 & $614;
       $616 = ($615>>>0)<(2147483647);
       if ($616) {
        $617 = (_sbrk(($615|0))|0);
        $618 = ($617|0)==((-1)|0);
        if ($618) {
         (_sbrk(($606|0))|0);
         $tsize$0323841$i = $tsize$0$i;
         break L291;
        } else {
         $619 = (($615) + ($ssize$1$i))|0;
         $ssize$2$i = $619;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$i;
       }
      } else {
       $ssize$2$i = $ssize$1$i;
      }
     } while(0);
     $620 = ($br$0$i|0)==((-1)|0);
     if ($620) {
      $tsize$0323841$i = $tsize$0$i;
     } else {
      $tbase$247$i = $br$0$i;$tsize$246$i = $ssize$2$i;
      label = 202;
      break L269;
     }
    }
   } while(0);
   $621 = HEAP32[((1504 + 444|0))>>2]|0;
   $622 = $621 | 4;
   HEAP32[((1504 + 444|0))>>2] = $622;
   $tsize$1$i = $tsize$0323841$i;
   label = 199;
  } else {
   $tsize$1$i = 0;
   label = 199;
  }
 } while(0);
 if ((label|0) == 199) {
  $623 = ($552>>>0)<(2147483647);
  if ($623) {
   $624 = (_sbrk(($552|0))|0);
   $625 = (_sbrk(0)|0);
   $notlhs$i = ($624|0)!=((-1)|0);
   $notrhs$i = ($625|0)!=((-1)|0);
   $or$cond8$not$i = $notrhs$i & $notlhs$i;
   $626 = ($624>>>0)<($625>>>0);
   $or$cond9$i = $or$cond8$not$i & $626;
   if ($or$cond9$i) {
    $627 = $625;
    $628 = $624;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $631 = ($629>>>0)>($630>>>0);
    $$tsize$1$i = $631 ? $629 : $tsize$1$i;
    if ($631) {
     $tbase$247$i = $624;$tsize$246$i = $$tsize$1$i;
     label = 202;
    }
   }
  }
 }
 if ((label|0) == 202) {
  $632 = HEAP32[((1504 + 432|0))>>2]|0;
  $633 = (($632) + ($tsize$246$i))|0;
  HEAP32[((1504 + 432|0))>>2] = $633;
  $634 = HEAP32[((1504 + 436|0))>>2]|0;
  $635 = ($633>>>0)>($634>>>0);
  if ($635) {
   HEAP32[((1504 + 436|0))>>2] = $633;
  }
  $636 = HEAP32[((1504 + 24|0))>>2]|0;
  $637 = ($636|0)==(0|0);
  L311: do {
   if ($637) {
    $638 = HEAP32[((1504 + 16|0))>>2]|0;
    $639 = ($638|0)==(0|0);
    $640 = ($tbase$247$i>>>0)<($638>>>0);
    $or$cond10$i = $639 | $640;
    if ($or$cond10$i) {
     HEAP32[((1504 + 16|0))>>2] = $tbase$247$i;
    }
    HEAP32[((1504 + 448|0))>>2] = $tbase$247$i;
    HEAP32[((1504 + 452|0))>>2] = $tsize$246$i;
    HEAP32[((1504 + 460|0))>>2] = 0;
    $641 = HEAP32[1976>>2]|0;
    HEAP32[((1504 + 36|0))>>2] = $641;
    HEAP32[((1504 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $642 = $i$02$i$i << 1;
     $643 = ((1504 + ($642<<2)|0) + 40|0);
     $$sum$i$i = (($642) + 3)|0;
     $644 = ((1504 + ($$sum$i$i<<2)|0) + 40|0);
     HEAP32[$644>>2] = $643;
     $$sum1$i$i = (($642) + 2)|0;
     $645 = ((1504 + ($$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$645>>2] = $643;
     $646 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($646|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $646;
     }
    }
    $647 = (($tsize$246$i) + -40)|0;
    $648 = (($tbase$247$i) + 8|0);
    $649 = $648;
    $650 = $649 & 7;
    $651 = ($650|0)==(0);
    if ($651) {
     $655 = 0;
    } else {
     $652 = (0 - ($649))|0;
     $653 = $652 & 7;
     $655 = $653;
    }
    $654 = (($tbase$247$i) + ($655)|0);
    $656 = (($647) - ($655))|0;
    HEAP32[((1504 + 24|0))>>2] = $654;
    HEAP32[((1504 + 12|0))>>2] = $656;
    $657 = $656 | 1;
    $$sum$i14$i = (($655) + 4)|0;
    $658 = (($tbase$247$i) + ($$sum$i14$i)|0);
    HEAP32[$658>>2] = $657;
    $$sum2$i$i = (($tsize$246$i) + -36)|0;
    $659 = (($tbase$247$i) + ($$sum2$i$i)|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[((1976 + 16|0))>>2]|0;
    HEAP32[((1504 + 28|0))>>2] = $660;
   } else {
    $sp$075$i = ((1504 + 448|0));
    while(1) {
     $661 = HEAP32[$sp$075$i>>2]|0;
     $662 = (($sp$075$i) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$247$i|0)==($664|0);
     if ($665) {
      label = 214;
      break;
     }
     $666 = (($sp$075$i) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$075$i = $667;
     }
    }
    if ((label|0) == 214) {
     $669 = (($sp$075$i) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($636>>>0)>=($661>>>0);
      $674 = ($636>>>0)<($tbase$247$i>>>0);
      $or$cond49$i = $673 & $674;
      if ($or$cond49$i) {
       $675 = (($663) + ($tsize$246$i))|0;
       HEAP32[$662>>2] = $675;
       $676 = HEAP32[((1504 + 12|0))>>2]|0;
       $677 = (($676) + ($tsize$246$i))|0;
       $678 = (($636) + 8|0);
       $679 = $678;
       $680 = $679 & 7;
       $681 = ($680|0)==(0);
       if ($681) {
        $685 = 0;
       } else {
        $682 = (0 - ($679))|0;
        $683 = $682 & 7;
        $685 = $683;
       }
       $684 = (($636) + ($685)|0);
       $686 = (($677) - ($685))|0;
       HEAP32[((1504 + 24|0))>>2] = $684;
       HEAP32[((1504 + 12|0))>>2] = $686;
       $687 = $686 | 1;
       $$sum$i18$i = (($685) + 4)|0;
       $688 = (($636) + ($$sum$i18$i)|0);
       HEAP32[$688>>2] = $687;
       $$sum2$i19$i = (($677) + 4)|0;
       $689 = (($636) + ($$sum2$i19$i)|0);
       HEAP32[$689>>2] = 40;
       $690 = HEAP32[((1976 + 16|0))>>2]|0;
       HEAP32[((1504 + 28|0))>>2] = $690;
       break;
      }
     }
    }
    $691 = HEAP32[((1504 + 16|0))>>2]|0;
    $692 = ($tbase$247$i>>>0)<($691>>>0);
    if ($692) {
     HEAP32[((1504 + 16|0))>>2] = $tbase$247$i;
    }
    $693 = (($tbase$247$i) + ($tsize$246$i)|0);
    $sp$168$i = ((1504 + 448|0));
    while(1) {
     $694 = HEAP32[$sp$168$i>>2]|0;
     $695 = ($694|0)==($693|0);
     if ($695) {
      label = 224;
      break;
     }
     $696 = (($sp$168$i) + 8|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = ($697|0)==(0|0);
     if ($698) {
      break;
     } else {
      $sp$168$i = $697;
     }
    }
    if ((label|0) == 224) {
     $699 = (($sp$168$i) + 12|0);
     $700 = HEAP32[$699>>2]|0;
     $701 = $700 & 8;
     $702 = ($701|0)==(0);
     if ($702) {
      HEAP32[$sp$168$i>>2] = $tbase$247$i;
      $703 = (($sp$168$i) + 4|0);
      $704 = HEAP32[$703>>2]|0;
      $705 = (($704) + ($tsize$246$i))|0;
      HEAP32[$703>>2] = $705;
      $706 = (($tbase$247$i) + 8|0);
      $707 = $706;
      $708 = $707 & 7;
      $709 = ($708|0)==(0);
      if ($709) {
       $713 = 0;
      } else {
       $710 = (0 - ($707))|0;
       $711 = $710 & 7;
       $713 = $711;
      }
      $712 = (($tbase$247$i) + ($713)|0);
      $$sum107$i = (($tsize$246$i) + 8)|0;
      $714 = (($tbase$247$i) + ($$sum107$i)|0);
      $715 = $714;
      $716 = $715 & 7;
      $717 = ($716|0)==(0);
      if ($717) {
       $720 = 0;
      } else {
       $718 = (0 - ($715))|0;
       $719 = $718 & 7;
       $720 = $719;
      }
      $$sum108$i = (($720) + ($tsize$246$i))|0;
      $721 = (($tbase$247$i) + ($$sum108$i)|0);
      $722 = $721;
      $723 = $712;
      $724 = (($722) - ($723))|0;
      $$sum$i21$i = (($713) + ($nb$0))|0;
      $725 = (($tbase$247$i) + ($$sum$i21$i)|0);
      $726 = (($724) - ($nb$0))|0;
      $727 = $nb$0 | 3;
      $$sum1$i22$i = (($713) + 4)|0;
      $728 = (($tbase$247$i) + ($$sum1$i22$i)|0);
      HEAP32[$728>>2] = $727;
      $729 = HEAP32[((1504 + 24|0))>>2]|0;
      $730 = ($721|0)==($729|0);
      L348: do {
       if ($730) {
        $731 = HEAP32[((1504 + 12|0))>>2]|0;
        $732 = (($731) + ($726))|0;
        HEAP32[((1504 + 12|0))>>2] = $732;
        HEAP32[((1504 + 24|0))>>2] = $725;
        $733 = $732 | 1;
        $$sum42$i$i = (($$sum$i21$i) + 4)|0;
        $734 = (($tbase$247$i) + ($$sum42$i$i)|0);
        HEAP32[$734>>2] = $733;
       } else {
        $735 = HEAP32[((1504 + 20|0))>>2]|0;
        $736 = ($721|0)==($735|0);
        if ($736) {
         $737 = HEAP32[((1504 + 8|0))>>2]|0;
         $738 = (($737) + ($726))|0;
         HEAP32[((1504 + 8|0))>>2] = $738;
         HEAP32[((1504 + 20|0))>>2] = $725;
         $739 = $738 | 1;
         $$sum40$i$i = (($$sum$i21$i) + 4)|0;
         $740 = (($tbase$247$i) + ($$sum40$i$i)|0);
         HEAP32[$740>>2] = $739;
         $$sum41$i$i = (($738) + ($$sum$i21$i))|0;
         $741 = (($tbase$247$i) + ($$sum41$i$i)|0);
         HEAP32[$741>>2] = $738;
         break;
        }
        $$sum2$i23$i = (($tsize$246$i) + 4)|0;
        $$sum109$i = (($$sum2$i23$i) + ($720))|0;
        $742 = (($tbase$247$i) + ($$sum109$i)|0);
        $743 = HEAP32[$742>>2]|0;
        $744 = $743 & 3;
        $745 = ($744|0)==(1);
        if ($745) {
         $746 = $743 & -8;
         $747 = $743 >>> 3;
         $748 = ($743>>>0)<(256);
         do {
          if ($748) {
           $$sum3738$i$i = $720 | 8;
           $$sum119$i = (($$sum3738$i$i) + ($tsize$246$i))|0;
           $749 = (($tbase$247$i) + ($$sum119$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $$sum39$i$i = (($tsize$246$i) + 12)|0;
           $$sum120$i = (($$sum39$i$i) + ($720))|0;
           $751 = (($tbase$247$i) + ($$sum120$i)|0);
           $752 = HEAP32[$751>>2]|0;
           $753 = $747 << 1;
           $754 = ((1504 + ($753<<2)|0) + 40|0);
           $755 = ($750|0)==($754|0);
           if (!($755)) {
            $756 = HEAP32[((1504 + 16|0))>>2]|0;
            $757 = ($750>>>0)<($756>>>0);
            if ($757) {
             _abort();
             // unreachable;
            }
            $758 = (($750) + 12|0);
            $759 = HEAP32[$758>>2]|0;
            $760 = ($759|0)==($721|0);
            if (!($760)) {
             _abort();
             // unreachable;
            }
           }
           $761 = ($752|0)==($750|0);
           if ($761) {
            $762 = 1 << $747;
            $763 = $762 ^ -1;
            $764 = HEAP32[1504>>2]|0;
            $765 = $764 & $763;
            HEAP32[1504>>2] = $765;
            break;
           }
           $766 = ($752|0)==($754|0);
           if ($766) {
            $$pre57$i$i = (($752) + 8|0);
            $$pre$phi58$i$iZ2D = $$pre57$i$i;
           } else {
            $767 = HEAP32[((1504 + 16|0))>>2]|0;
            $768 = ($752>>>0)<($767>>>0);
            if ($768) {
             _abort();
             // unreachable;
            }
            $769 = (($752) + 8|0);
            $770 = HEAP32[$769>>2]|0;
            $771 = ($770|0)==($721|0);
            if ($771) {
             $$pre$phi58$i$iZ2D = $769;
            } else {
             _abort();
             // unreachable;
            }
           }
           $772 = (($750) + 12|0);
           HEAP32[$772>>2] = $752;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $750;
          } else {
           $$sum34$i$i = $720 | 24;
           $$sum110$i = (($$sum34$i$i) + ($tsize$246$i))|0;
           $773 = (($tbase$247$i) + ($$sum110$i)|0);
           $774 = HEAP32[$773>>2]|0;
           $$sum5$i$i = (($tsize$246$i) + 12)|0;
           $$sum111$i = (($$sum5$i$i) + ($720))|0;
           $775 = (($tbase$247$i) + ($$sum111$i)|0);
           $776 = HEAP32[$775>>2]|0;
           $777 = ($776|0)==($721|0);
           do {
            if ($777) {
             $$sum67$i$i = $720 | 16;
             $$sum117$i = (($$sum2$i23$i) + ($$sum67$i$i))|0;
             $788 = (($tbase$247$i) + ($$sum117$i)|0);
             $789 = HEAP32[$788>>2]|0;
             $790 = ($789|0)==(0|0);
             if ($790) {
              $$sum118$i = (($$sum67$i$i) + ($tsize$246$i))|0;
              $791 = (($tbase$247$i) + ($$sum118$i)|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = ($792|0)==(0|0);
              if ($793) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $792;$RP$0$i$i = $791;
              }
             } else {
              $R$0$i$i = $789;$RP$0$i$i = $788;
             }
             while(1) {
              $794 = (($R$0$i$i) + 20|0);
              $795 = HEAP32[$794>>2]|0;
              $796 = ($795|0)==(0|0);
              if (!($796)) {
               $R$0$i$i = $795;$RP$0$i$i = $794;
               continue;
              }
              $797 = (($R$0$i$i) + 16|0);
              $798 = HEAP32[$797>>2]|0;
              $799 = ($798|0)==(0|0);
              if ($799) {
               break;
              } else {
               $R$0$i$i = $798;$RP$0$i$i = $797;
              }
             }
             $800 = HEAP32[((1504 + 16|0))>>2]|0;
             $801 = ($RP$0$i$i>>>0)<($800>>>0);
             if ($801) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i>>2] = 0;
              $R$1$i$i = $R$0$i$i;
              break;
             }
            } else {
             $$sum3536$i$i = $720 | 8;
             $$sum112$i = (($$sum3536$i$i) + ($tsize$246$i))|0;
             $778 = (($tbase$247$i) + ($$sum112$i)|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = HEAP32[((1504 + 16|0))>>2]|0;
             $781 = ($779>>>0)<($780>>>0);
             if ($781) {
              _abort();
              // unreachable;
             }
             $782 = (($779) + 12|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==($721|0);
             if (!($784)) {
              _abort();
              // unreachable;
             }
             $785 = (($776) + 8|0);
             $786 = HEAP32[$785>>2]|0;
             $787 = ($786|0)==($721|0);
             if ($787) {
              HEAP32[$782>>2] = $776;
              HEAP32[$785>>2] = $779;
              $R$1$i$i = $776;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $802 = ($774|0)==(0|0);
           if (!($802)) {
            $$sum30$i$i = (($tsize$246$i) + 28)|0;
            $$sum113$i = (($$sum30$i$i) + ($720))|0;
            $803 = (($tbase$247$i) + ($$sum113$i)|0);
            $804 = HEAP32[$803>>2]|0;
            $805 = ((1504 + ($804<<2)|0) + 304|0);
            $806 = HEAP32[$805>>2]|0;
            $807 = ($721|0)==($806|0);
            if ($807) {
             HEAP32[$805>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if ($cond$i$i) {
              $808 = 1 << $804;
              $809 = $808 ^ -1;
              $810 = HEAP32[((1504 + 4|0))>>2]|0;
              $811 = $810 & $809;
              HEAP32[((1504 + 4|0))>>2] = $811;
              break;
             }
            } else {
             $812 = HEAP32[((1504 + 16|0))>>2]|0;
             $813 = ($774>>>0)<($812>>>0);
             if ($813) {
              _abort();
              // unreachable;
             }
             $814 = (($774) + 16|0);
             $815 = HEAP32[$814>>2]|0;
             $816 = ($815|0)==($721|0);
             if ($816) {
              HEAP32[$814>>2] = $R$1$i$i;
             } else {
              $817 = (($774) + 20|0);
              HEAP32[$817>>2] = $R$1$i$i;
             }
             $818 = ($R$1$i$i|0)==(0|0);
             if ($818) {
              break;
             }
            }
            $819 = HEAP32[((1504 + 16|0))>>2]|0;
            $820 = ($R$1$i$i>>>0)<($819>>>0);
            if ($820) {
             _abort();
             // unreachable;
            }
            $821 = (($R$1$i$i) + 24|0);
            HEAP32[$821>>2] = $774;
            $$sum3132$i$i = $720 | 16;
            $$sum114$i = (($$sum3132$i$i) + ($tsize$246$i))|0;
            $822 = (($tbase$247$i) + ($$sum114$i)|0);
            $823 = HEAP32[$822>>2]|0;
            $824 = ($823|0)==(0|0);
            do {
             if (!($824)) {
              $825 = HEAP32[((1504 + 16|0))>>2]|0;
              $826 = ($823>>>0)<($825>>>0);
              if ($826) {
               _abort();
               // unreachable;
              } else {
               $827 = (($R$1$i$i) + 16|0);
               HEAP32[$827>>2] = $823;
               $828 = (($823) + 24|0);
               HEAP32[$828>>2] = $R$1$i$i;
               break;
              }
             }
            } while(0);
            $$sum115$i = (($$sum2$i23$i) + ($$sum3132$i$i))|0;
            $829 = (($tbase$247$i) + ($$sum115$i)|0);
            $830 = HEAP32[$829>>2]|0;
            $831 = ($830|0)==(0|0);
            if (!($831)) {
             $832 = HEAP32[((1504 + 16|0))>>2]|0;
             $833 = ($830>>>0)<($832>>>0);
             if ($833) {
              _abort();
              // unreachable;
             } else {
              $834 = (($R$1$i$i) + 20|0);
              HEAP32[$834>>2] = $830;
              $835 = (($830) + 24|0);
              HEAP32[$835>>2] = $R$1$i$i;
              break;
             }
            }
           }
          }
         } while(0);
         $$sum9$i$i = $746 | $720;
         $$sum116$i = (($$sum9$i$i) + ($tsize$246$i))|0;
         $836 = (($tbase$247$i) + ($$sum116$i)|0);
         $837 = (($746) + ($726))|0;
         $oldfirst$0$i$i = $836;$qsize$0$i$i = $837;
        } else {
         $oldfirst$0$i$i = $721;$qsize$0$i$i = $726;
        }
        $838 = (($oldfirst$0$i$i) + 4|0);
        $839 = HEAP32[$838>>2]|0;
        $840 = $839 & -2;
        HEAP32[$838>>2] = $840;
        $841 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i21$i) + 4)|0;
        $842 = (($tbase$247$i) + ($$sum10$i$i)|0);
        HEAP32[$842>>2] = $841;
        $$sum11$i24$i = (($qsize$0$i$i) + ($$sum$i21$i))|0;
        $843 = (($tbase$247$i) + ($$sum11$i24$i)|0);
        HEAP32[$843>>2] = $qsize$0$i$i;
        $844 = $qsize$0$i$i >>> 3;
        $845 = ($qsize$0$i$i>>>0)<(256);
        if ($845) {
         $846 = $844 << 1;
         $847 = ((1504 + ($846<<2)|0) + 40|0);
         $848 = HEAP32[1504>>2]|0;
         $849 = 1 << $844;
         $850 = $848 & $849;
         $851 = ($850|0)==(0);
         if ($851) {
          $852 = $848 | $849;
          HEAP32[1504>>2] = $852;
          $$sum26$pre$i$i = (($846) + 2)|0;
          $$pre$i25$i = ((1504 + ($$sum26$pre$i$i<<2)|0) + 40|0);
          $$pre$phi$i26$iZ2D = $$pre$i25$i;$F4$0$i$i = $847;
         } else {
          $$sum29$i$i = (($846) + 2)|0;
          $853 = ((1504 + ($$sum29$i$i<<2)|0) + 40|0);
          $854 = HEAP32[$853>>2]|0;
          $855 = HEAP32[((1504 + 16|0))>>2]|0;
          $856 = ($854>>>0)<($855>>>0);
          if ($856) {
           _abort();
           // unreachable;
          } else {
           $$pre$phi$i26$iZ2D = $853;$F4$0$i$i = $854;
          }
         }
         HEAP32[$$pre$phi$i26$iZ2D>>2] = $725;
         $857 = (($F4$0$i$i) + 12|0);
         HEAP32[$857>>2] = $725;
         $$sum27$i$i = (($$sum$i21$i) + 8)|0;
         $858 = (($tbase$247$i) + ($$sum27$i$i)|0);
         HEAP32[$858>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i21$i) + 12)|0;
         $859 = (($tbase$247$i) + ($$sum28$i$i)|0);
         HEAP32[$859>>2] = $847;
         break;
        }
        $860 = $qsize$0$i$i >>> 8;
        $861 = ($860|0)==(0);
        if ($861) {
         $I7$0$i$i = 0;
        } else {
         $862 = ($qsize$0$i$i>>>0)>(16777215);
         if ($862) {
          $I7$0$i$i = 31;
         } else {
          $863 = (($860) + 1048320)|0;
          $864 = $863 >>> 16;
          $865 = $864 & 8;
          $866 = $860 << $865;
          $867 = (($866) + 520192)|0;
          $868 = $867 >>> 16;
          $869 = $868 & 4;
          $870 = $869 | $865;
          $871 = $866 << $869;
          $872 = (($871) + 245760)|0;
          $873 = $872 >>> 16;
          $874 = $873 & 2;
          $875 = $870 | $874;
          $876 = (14 - ($875))|0;
          $877 = $871 << $874;
          $878 = $877 >>> 15;
          $879 = (($876) + ($878))|0;
          $880 = $879 << 1;
          $881 = (($879) + 7)|0;
          $882 = $qsize$0$i$i >>> $881;
          $883 = $882 & 1;
          $884 = $883 | $880;
          $I7$0$i$i = $884;
         }
        }
        $885 = ((1504 + ($I7$0$i$i<<2)|0) + 304|0);
        $$sum12$i$i = (($$sum$i21$i) + 28)|0;
        $886 = (($tbase$247$i) + ($$sum12$i$i)|0);
        HEAP32[$886>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i21$i) + 16)|0;
        $887 = (($tbase$247$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i21$i) + 20)|0;
        $888 = (($tbase$247$i) + ($$sum14$i$i)|0);
        HEAP32[$888>>2] = 0;
        HEAP32[$887>>2] = 0;
        $889 = HEAP32[((1504 + 4|0))>>2]|0;
        $890 = 1 << $I7$0$i$i;
        $891 = $889 & $890;
        $892 = ($891|0)==(0);
        if ($892) {
         $893 = $889 | $890;
         HEAP32[((1504 + 4|0))>>2] = $893;
         HEAP32[$885>>2] = $725;
         $$sum15$i$i = (($$sum$i21$i) + 24)|0;
         $894 = (($tbase$247$i) + ($$sum15$i$i)|0);
         HEAP32[$894>>2] = $885;
         $$sum16$i$i = (($$sum$i21$i) + 12)|0;
         $895 = (($tbase$247$i) + ($$sum16$i$i)|0);
         HEAP32[$895>>2] = $725;
         $$sum17$i$i = (($$sum$i21$i) + 8)|0;
         $896 = (($tbase$247$i) + ($$sum17$i$i)|0);
         HEAP32[$896>>2] = $725;
         break;
        }
        $897 = HEAP32[$885>>2]|0;
        $898 = ($I7$0$i$i|0)==(31);
        if ($898) {
         $906 = 0;
        } else {
         $899 = $I7$0$i$i >>> 1;
         $900 = (25 - ($899))|0;
         $906 = $900;
        }
        $901 = (($897) + 4|0);
        $902 = HEAP32[$901>>2]|0;
        $903 = $902 & -8;
        $904 = ($903|0)==($qsize$0$i$i|0);
        L445: do {
         if ($904) {
          $T$0$lcssa$i28$i = $897;
         } else {
          $905 = $qsize$0$i$i << $906;
          $K8$052$i$i = $905;$T$051$i$i = $897;
          while(1) {
           $913 = $K8$052$i$i >>> 31;
           $914 = ((($T$051$i$i) + ($913<<2)|0) + 16|0);
           $909 = HEAP32[$914>>2]|0;
           $915 = ($909|0)==(0|0);
           if ($915) {
            break;
           }
           $907 = $K8$052$i$i << 1;
           $908 = (($909) + 4|0);
           $910 = HEAP32[$908>>2]|0;
           $911 = $910 & -8;
           $912 = ($911|0)==($qsize$0$i$i|0);
           if ($912) {
            $T$0$lcssa$i28$i = $909;
            break L445;
           } else {
            $K8$052$i$i = $907;$T$051$i$i = $909;
           }
          }
          $916 = HEAP32[((1504 + 16|0))>>2]|0;
          $917 = ($914>>>0)<($916>>>0);
          if ($917) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$914>>2] = $725;
           $$sum23$i$i = (($$sum$i21$i) + 24)|0;
           $918 = (($tbase$247$i) + ($$sum23$i$i)|0);
           HEAP32[$918>>2] = $T$051$i$i;
           $$sum24$i$i = (($$sum$i21$i) + 12)|0;
           $919 = (($tbase$247$i) + ($$sum24$i$i)|0);
           HEAP32[$919>>2] = $725;
           $$sum25$i$i = (($$sum$i21$i) + 8)|0;
           $920 = (($tbase$247$i) + ($$sum25$i$i)|0);
           HEAP32[$920>>2] = $725;
           break L348;
          }
         }
        } while(0);
        $921 = (($T$0$lcssa$i28$i) + 8|0);
        $922 = HEAP32[$921>>2]|0;
        $923 = HEAP32[((1504 + 16|0))>>2]|0;
        $924 = ($T$0$lcssa$i28$i>>>0)<($923>>>0);
        if ($924) {
         _abort();
         // unreachable;
        }
        $925 = ($922>>>0)<($923>>>0);
        if ($925) {
         _abort();
         // unreachable;
        } else {
         $926 = (($922) + 12|0);
         HEAP32[$926>>2] = $725;
         HEAP32[$921>>2] = $725;
         $$sum20$i$i = (($$sum$i21$i) + 8)|0;
         $927 = (($tbase$247$i) + ($$sum20$i$i)|0);
         HEAP32[$927>>2] = $922;
         $$sum21$i$i = (($$sum$i21$i) + 12)|0;
         $928 = (($tbase$247$i) + ($$sum21$i$i)|0);
         HEAP32[$928>>2] = $T$0$lcssa$i28$i;
         $$sum22$i$i = (($$sum$i21$i) + 24)|0;
         $929 = (($tbase$247$i) + ($$sum22$i$i)|0);
         HEAP32[$929>>2] = 0;
         break;
        }
       }
      } while(0);
      $$sum1819$i$i = $713 | 8;
      $930 = (($tbase$247$i) + ($$sum1819$i$i)|0);
      $mem$0 = $930;
      STACKTOP = sp;return ($mem$0|0);
     }
    }
    $sp$0$i$i$i = ((1504 + 448|0));
    while(1) {
     $931 = HEAP32[$sp$0$i$i$i>>2]|0;
     $932 = ($931>>>0)>($636>>>0);
     if (!($932)) {
      $933 = (($sp$0$i$i$i) + 4|0);
      $934 = HEAP32[$933>>2]|0;
      $935 = (($931) + ($934)|0);
      $936 = ($935>>>0)>($636>>>0);
      if ($936) {
       break;
      }
     }
     $937 = (($sp$0$i$i$i) + 8|0);
     $938 = HEAP32[$937>>2]|0;
     $sp$0$i$i$i = $938;
    }
    $$sum$i15$i = (($934) + -47)|0;
    $$sum1$i16$i = (($934) + -39)|0;
    $939 = (($931) + ($$sum1$i16$i)|0);
    $940 = $939;
    $941 = $940 & 7;
    $942 = ($941|0)==(0);
    if ($942) {
     $945 = 0;
    } else {
     $943 = (0 - ($940))|0;
     $944 = $943 & 7;
     $945 = $944;
    }
    $$sum2$i17$i = (($$sum$i15$i) + ($945))|0;
    $946 = (($931) + ($$sum2$i17$i)|0);
    $947 = (($636) + 16|0);
    $948 = ($946>>>0)<($947>>>0);
    $949 = $948 ? $636 : $946;
    $950 = (($949) + 8|0);
    $951 = (($tsize$246$i) + -40)|0;
    $952 = (($tbase$247$i) + 8|0);
    $953 = $952;
    $954 = $953 & 7;
    $955 = ($954|0)==(0);
    if ($955) {
     $959 = 0;
    } else {
     $956 = (0 - ($953))|0;
     $957 = $956 & 7;
     $959 = $957;
    }
    $958 = (($tbase$247$i) + ($959)|0);
    $960 = (($951) - ($959))|0;
    HEAP32[((1504 + 24|0))>>2] = $958;
    HEAP32[((1504 + 12|0))>>2] = $960;
    $961 = $960 | 1;
    $$sum$i$i$i = (($959) + 4)|0;
    $962 = (($tbase$247$i) + ($$sum$i$i$i)|0);
    HEAP32[$962>>2] = $961;
    $$sum2$i$i$i = (($tsize$246$i) + -36)|0;
    $963 = (($tbase$247$i) + ($$sum2$i$i$i)|0);
    HEAP32[$963>>2] = 40;
    $964 = HEAP32[((1976 + 16|0))>>2]|0;
    HEAP32[((1504 + 28|0))>>2] = $964;
    $965 = (($949) + 4|0);
    HEAP32[$965>>2] = 27;
    ;HEAP32[$950+0>>2]=HEAP32[((1504 + 448|0))+0>>2]|0;HEAP32[$950+4>>2]=HEAP32[((1504 + 448|0))+4>>2]|0;HEAP32[$950+8>>2]=HEAP32[((1504 + 448|0))+8>>2]|0;HEAP32[$950+12>>2]=HEAP32[((1504 + 448|0))+12>>2]|0;
    HEAP32[((1504 + 448|0))>>2] = $tbase$247$i;
    HEAP32[((1504 + 452|0))>>2] = $tsize$246$i;
    HEAP32[((1504 + 460|0))>>2] = 0;
    HEAP32[((1504 + 456|0))>>2] = $950;
    $966 = (($949) + 28|0);
    HEAP32[$966>>2] = 7;
    $967 = (($949) + 32|0);
    $968 = ($967>>>0)<($935>>>0);
    if ($968) {
     $970 = $966;
     while(1) {
      $969 = (($970) + 4|0);
      HEAP32[$969>>2] = 7;
      $971 = (($970) + 8|0);
      $972 = ($971>>>0)<($935>>>0);
      if ($972) {
       $970 = $969;
      } else {
       break;
      }
     }
    }
    $973 = ($949|0)==($636|0);
    if (!($973)) {
     $974 = $949;
     $975 = $636;
     $976 = (($974) - ($975))|0;
     $977 = (($636) + ($976)|0);
     $$sum3$i$i = (($976) + 4)|0;
     $978 = (($636) + ($$sum3$i$i)|0);
     $979 = HEAP32[$978>>2]|0;
     $980 = $979 & -2;
     HEAP32[$978>>2] = $980;
     $981 = $976 | 1;
     $982 = (($636) + 4|0);
     HEAP32[$982>>2] = $981;
     HEAP32[$977>>2] = $976;
     $983 = $976 >>> 3;
     $984 = ($976>>>0)<(256);
     if ($984) {
      $985 = $983 << 1;
      $986 = ((1504 + ($985<<2)|0) + 40|0);
      $987 = HEAP32[1504>>2]|0;
      $988 = 1 << $983;
      $989 = $987 & $988;
      $990 = ($989|0)==(0);
      if ($990) {
       $991 = $987 | $988;
       HEAP32[1504>>2] = $991;
       $$sum10$pre$i$i = (($985) + 2)|0;
       $$pre$i$i = ((1504 + ($$sum10$pre$i$i<<2)|0) + 40|0);
       $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $986;
      } else {
       $$sum11$i$i = (($985) + 2)|0;
       $992 = ((1504 + ($$sum11$i$i<<2)|0) + 40|0);
       $993 = HEAP32[$992>>2]|0;
       $994 = HEAP32[((1504 + 16|0))>>2]|0;
       $995 = ($993>>>0)<($994>>>0);
       if ($995) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $992;$F$0$i$i = $993;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $636;
      $996 = (($F$0$i$i) + 12|0);
      HEAP32[$996>>2] = $636;
      $997 = (($636) + 8|0);
      HEAP32[$997>>2] = $F$0$i$i;
      $998 = (($636) + 12|0);
      HEAP32[$998>>2] = $986;
      break;
     }
     $999 = $976 >>> 8;
     $1000 = ($999|0)==(0);
     if ($1000) {
      $I1$0$i$i = 0;
     } else {
      $1001 = ($976>>>0)>(16777215);
      if ($1001) {
       $I1$0$i$i = 31;
      } else {
       $1002 = (($999) + 1048320)|0;
       $1003 = $1002 >>> 16;
       $1004 = $1003 & 8;
       $1005 = $999 << $1004;
       $1006 = (($1005) + 520192)|0;
       $1007 = $1006 >>> 16;
       $1008 = $1007 & 4;
       $1009 = $1008 | $1004;
       $1010 = $1005 << $1008;
       $1011 = (($1010) + 245760)|0;
       $1012 = $1011 >>> 16;
       $1013 = $1012 & 2;
       $1014 = $1009 | $1013;
       $1015 = (14 - ($1014))|0;
       $1016 = $1010 << $1013;
       $1017 = $1016 >>> 15;
       $1018 = (($1015) + ($1017))|0;
       $1019 = $1018 << 1;
       $1020 = (($1018) + 7)|0;
       $1021 = $976 >>> $1020;
       $1022 = $1021 & 1;
       $1023 = $1022 | $1019;
       $I1$0$i$i = $1023;
      }
     }
     $1024 = ((1504 + ($I1$0$i$i<<2)|0) + 304|0);
     $1025 = (($636) + 28|0);
     $I1$0$c$i$i = $I1$0$i$i;
     HEAP32[$1025>>2] = $I1$0$c$i$i;
     $1026 = (($636) + 20|0);
     HEAP32[$1026>>2] = 0;
     $1027 = (($636) + 16|0);
     HEAP32[$1027>>2] = 0;
     $1028 = HEAP32[((1504 + 4|0))>>2]|0;
     $1029 = 1 << $I1$0$i$i;
     $1030 = $1028 & $1029;
     $1031 = ($1030|0)==(0);
     if ($1031) {
      $1032 = $1028 | $1029;
      HEAP32[((1504 + 4|0))>>2] = $1032;
      HEAP32[$1024>>2] = $636;
      $1033 = (($636) + 24|0);
      HEAP32[$1033>>2] = $1024;
      $1034 = (($636) + 12|0);
      HEAP32[$1034>>2] = $636;
      $1035 = (($636) + 8|0);
      HEAP32[$1035>>2] = $636;
      break;
     }
     $1036 = HEAP32[$1024>>2]|0;
     $1037 = ($I1$0$i$i|0)==(31);
     if ($1037) {
      $1045 = 0;
     } else {
      $1038 = $I1$0$i$i >>> 1;
      $1039 = (25 - ($1038))|0;
      $1045 = $1039;
     }
     $1040 = (($1036) + 4|0);
     $1041 = HEAP32[$1040>>2]|0;
     $1042 = $1041 & -8;
     $1043 = ($1042|0)==($976|0);
     L499: do {
      if ($1043) {
       $T$0$lcssa$i$i = $1036;
      } else {
       $1044 = $976 << $1045;
       $K2$014$i$i = $1044;$T$013$i$i = $1036;
       while(1) {
        $1052 = $K2$014$i$i >>> 31;
        $1053 = ((($T$013$i$i) + ($1052<<2)|0) + 16|0);
        $1048 = HEAP32[$1053>>2]|0;
        $1054 = ($1048|0)==(0|0);
        if ($1054) {
         break;
        }
        $1046 = $K2$014$i$i << 1;
        $1047 = (($1048) + 4|0);
        $1049 = HEAP32[$1047>>2]|0;
        $1050 = $1049 & -8;
        $1051 = ($1050|0)==($976|0);
        if ($1051) {
         $T$0$lcssa$i$i = $1048;
         break L499;
        } else {
         $K2$014$i$i = $1046;$T$013$i$i = $1048;
        }
       }
       $1055 = HEAP32[((1504 + 16|0))>>2]|0;
       $1056 = ($1053>>>0)<($1055>>>0);
       if ($1056) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$1053>>2] = $636;
        $1057 = (($636) + 24|0);
        HEAP32[$1057>>2] = $T$013$i$i;
        $1058 = (($636) + 12|0);
        HEAP32[$1058>>2] = $636;
        $1059 = (($636) + 8|0);
        HEAP32[$1059>>2] = $636;
        break L311;
       }
      }
     } while(0);
     $1060 = (($T$0$lcssa$i$i) + 8|0);
     $1061 = HEAP32[$1060>>2]|0;
     $1062 = HEAP32[((1504 + 16|0))>>2]|0;
     $1063 = ($T$0$lcssa$i$i>>>0)<($1062>>>0);
     if ($1063) {
      _abort();
      // unreachable;
     }
     $1064 = ($1061>>>0)<($1062>>>0);
     if ($1064) {
      _abort();
      // unreachable;
     } else {
      $1065 = (($1061) + 12|0);
      HEAP32[$1065>>2] = $636;
      HEAP32[$1060>>2] = $636;
      $1066 = (($636) + 8|0);
      HEAP32[$1066>>2] = $1061;
      $1067 = (($636) + 12|0);
      HEAP32[$1067>>2] = $T$0$lcssa$i$i;
      $1068 = (($636) + 24|0);
      HEAP32[$1068>>2] = 0;
      break;
     }
    }
   }
  } while(0);
  $1069 = HEAP32[((1504 + 12|0))>>2]|0;
  $1070 = ($1069>>>0)>($nb$0>>>0);
  if ($1070) {
   $1071 = (($1069) - ($nb$0))|0;
   HEAP32[((1504 + 12|0))>>2] = $1071;
   $1072 = HEAP32[((1504 + 24|0))>>2]|0;
   $1073 = (($1072) + ($nb$0)|0);
   HEAP32[((1504 + 24|0))>>2] = $1073;
   $1074 = $1071 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1075 = (($1072) + ($$sum$i32)|0);
   HEAP32[$1075>>2] = $1074;
   $1076 = $nb$0 | 3;
   $1077 = (($1072) + 4|0);
   HEAP32[$1077>>2] = $1076;
   $1078 = (($1072) + 8|0);
   $mem$0 = $1078;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $1079 = (___errno_location()|0);
 HEAP32[$1079>>2] = 12;
 $mem$0 = 0;
 STACKTOP = sp;return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phi68Z2D = 0, $$pre$phi70Z2D = 0, $$pre$phiZ2D = 0, $$pre67 = 0, $$pre69 = 0, $$sum = 0, $$sum16$pre = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum26 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0;
 var $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $I18$0$c = 0, $K19$057 = 0;
 var $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$056 = 0, $cond = 0, $cond54 = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($mem) + -8|0);
 $2 = HEAP32[((1504 + 16|0))>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = (($mem) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    STACKTOP = sp;return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[((1504 + 20|0))>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $104 = (($mem) + ($$sum3)|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105 & 3;
    $107 = ($106|0)==(3);
    if (!($107)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[((1504 + 8|0))>>2] = $15;
    $108 = HEAP32[$104>>2]|0;
    $109 = $108 & -2;
    HEAP32[$104>>2] = $109;
    $110 = $15 | 1;
    $$sum26 = (($$sum2) + 4)|0;
    $111 = (($mem) + ($$sum26)|0);
    HEAP32[$111>>2] = $110;
    HEAP32[$9>>2] = $15;
    STACKTOP = sp;return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum36 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum36)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum37 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum37)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = ((1504 + ($25<<2)|0) + 40|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = (($22) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[1504>>2]|0;
     $36 = $35 & $34;
     HEAP32[1504>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre69 = (($24) + 8|0);
     $$pre$phi70Z2D = $$pre69;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = (($24) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi70Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = (($22) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi70Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum28 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum28)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum29 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum29)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum31 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum31)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum30 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum30)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = (($R$0) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = (($R$0) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum35 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum35)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = (($49) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = (($46) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum32 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum32)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((1504 + ($72<<2)|0) + 304|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[((1504 + 4|0))>>2]|0;
      $79 = $78 & $77;
      HEAP32[((1504 + 4|0))>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[((1504 + 16|0))>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = (($44) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = (($44) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[((1504 + 16|0))>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = (($R$1) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum33 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum33)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = HEAP32[((1504 + 16|0))>>2]|0;
      $94 = ($91>>>0)<($93>>>0);
      if ($94) {
       _abort();
       // unreachable;
      } else {
       $95 = (($R$1) + 16|0);
       HEAP32[$95>>2] = $91;
       $96 = (($91) + 24|0);
       HEAP32[$96>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum34 = (($$sum2) + 20)|0;
    $97 = (($mem) + ($$sum34)|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $100 = HEAP32[((1504 + 16|0))>>2]|0;
     $101 = ($98>>>0)<($100>>>0);
     if ($101) {
      _abort();
      // unreachable;
     } else {
      $102 = (($R$1) + 20|0);
      HEAP32[$102>>2] = $98;
      $103 = (($98) + 24|0);
      HEAP32[$103>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $112 = ($p$0>>>0)<($9>>>0);
 if (!($112)) {
  _abort();
  // unreachable;
 }
 $$sum25 = (($8) + -4)|0;
 $113 = (($mem) + ($$sum25)|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $114 & 1;
 $116 = ($115|0)==(0);
 if ($116) {
  _abort();
  // unreachable;
 }
 $117 = $114 & 2;
 $118 = ($117|0)==(0);
 if ($118) {
  $119 = HEAP32[((1504 + 24|0))>>2]|0;
  $120 = ($9|0)==($119|0);
  if ($120) {
   $121 = HEAP32[((1504 + 12|0))>>2]|0;
   $122 = (($121) + ($psize$0))|0;
   HEAP32[((1504 + 12|0))>>2] = $122;
   HEAP32[((1504 + 24|0))>>2] = $p$0;
   $123 = $122 | 1;
   $124 = (($p$0) + 4|0);
   HEAP32[$124>>2] = $123;
   $125 = HEAP32[((1504 + 20|0))>>2]|0;
   $126 = ($p$0|0)==($125|0);
   if (!($126)) {
    STACKTOP = sp;return;
   }
   HEAP32[((1504 + 20|0))>>2] = 0;
   HEAP32[((1504 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $127 = HEAP32[((1504 + 20|0))>>2]|0;
  $128 = ($9|0)==($127|0);
  if ($128) {
   $129 = HEAP32[((1504 + 8|0))>>2]|0;
   $130 = (($129) + ($psize$0))|0;
   HEAP32[((1504 + 8|0))>>2] = $130;
   HEAP32[((1504 + 20|0))>>2] = $p$0;
   $131 = $130 | 1;
   $132 = (($p$0) + 4|0);
   HEAP32[$132>>2] = $131;
   $133 = (($p$0) + ($130)|0);
   HEAP32[$133>>2] = $130;
   STACKTOP = sp;return;
  }
  $134 = $114 & -8;
  $135 = (($134) + ($psize$0))|0;
  $136 = $114 >>> 3;
  $137 = ($114>>>0)<(256);
  do {
   if ($137) {
    $138 = (($mem) + ($8)|0);
    $139 = HEAP32[$138>>2]|0;
    $$sum2324 = $8 | 4;
    $140 = (($mem) + ($$sum2324)|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $136 << 1;
    $143 = ((1504 + ($142<<2)|0) + 40|0);
    $144 = ($139|0)==($143|0);
    if (!($144)) {
     $145 = HEAP32[((1504 + 16|0))>>2]|0;
     $146 = ($139>>>0)<($145>>>0);
     if ($146) {
      _abort();
      // unreachable;
     }
     $147 = (($139) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==($9|0);
     if (!($149)) {
      _abort();
      // unreachable;
     }
    }
    $150 = ($141|0)==($139|0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[1504>>2]|0;
     $154 = $153 & $152;
     HEAP32[1504>>2] = $154;
     break;
    }
    $155 = ($141|0)==($143|0);
    if ($155) {
     $$pre67 = (($141) + 8|0);
     $$pre$phi68Z2D = $$pre67;
    } else {
     $156 = HEAP32[((1504 + 16|0))>>2]|0;
     $157 = ($141>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     }
     $158 = (($141) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==($9|0);
     if ($160) {
      $$pre$phi68Z2D = $158;
     } else {
      _abort();
      // unreachable;
     }
    }
    $161 = (($139) + 12|0);
    HEAP32[$161>>2] = $141;
    HEAP32[$$pre$phi68Z2D>>2] = $139;
   } else {
    $$sum5 = (($8) + 16)|0;
    $162 = (($mem) + ($$sum5)|0);
    $163 = HEAP32[$162>>2]|0;
    $$sum67 = $8 | 4;
    $164 = (($mem) + ($$sum67)|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)==($9|0);
    do {
     if ($166) {
      $$sum9 = (($8) + 12)|0;
      $177 = (($mem) + ($$sum9)|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = ($178|0)==(0|0);
      if ($179) {
       $$sum8 = (($8) + 8)|0;
       $180 = (($mem) + ($$sum8)|0);
       $181 = HEAP32[$180>>2]|0;
       $182 = ($181|0)==(0|0);
       if ($182) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $181;$RP9$0 = $180;
       }
      } else {
       $R7$0 = $178;$RP9$0 = $177;
      }
      while(1) {
       $183 = (($R7$0) + 20|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)==(0|0);
       if (!($185)) {
        $R7$0 = $184;$RP9$0 = $183;
        continue;
       }
       $186 = (($R7$0) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($187|0)==(0|0);
       if ($188) {
        break;
       } else {
        $R7$0 = $187;$RP9$0 = $186;
       }
      }
      $189 = HEAP32[((1504 + 16|0))>>2]|0;
      $190 = ($RP9$0>>>0)<($189>>>0);
      if ($190) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $167 = (($mem) + ($8)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = HEAP32[((1504 + 16|0))>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if ($170) {
       _abort();
       // unreachable;
      }
      $171 = (($168) + 12|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==($9|0);
      if (!($173)) {
       _abort();
       // unreachable;
      }
      $174 = (($165) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==($9|0);
      if ($176) {
       HEAP32[$171>>2] = $165;
       HEAP32[$174>>2] = $168;
       $R7$1 = $165;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $191 = ($163|0)==(0|0);
    if (!($191)) {
     $$sum18 = (($8) + 20)|0;
     $192 = (($mem) + ($$sum18)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ((1504 + ($193<<2)|0) + 304|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($9|0)==($195|0);
     if ($196) {
      HEAP32[$194>>2] = $R7$1;
      $cond54 = ($R7$1|0)==(0|0);
      if ($cond54) {
       $197 = 1 << $193;
       $198 = $197 ^ -1;
       $199 = HEAP32[((1504 + 4|0))>>2]|0;
       $200 = $199 & $198;
       HEAP32[((1504 + 4|0))>>2] = $200;
       break;
      }
     } else {
      $201 = HEAP32[((1504 + 16|0))>>2]|0;
      $202 = ($163>>>0)<($201>>>0);
      if ($202) {
       _abort();
       // unreachable;
      }
      $203 = (($163) + 16|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = ($204|0)==($9|0);
      if ($205) {
       HEAP32[$203>>2] = $R7$1;
      } else {
       $206 = (($163) + 20|0);
       HEAP32[$206>>2] = $R7$1;
      }
      $207 = ($R7$1|0)==(0|0);
      if ($207) {
       break;
      }
     }
     $208 = HEAP32[((1504 + 16|0))>>2]|0;
     $209 = ($R7$1>>>0)<($208>>>0);
     if ($209) {
      _abort();
      // unreachable;
     }
     $210 = (($R7$1) + 24|0);
     HEAP32[$210>>2] = $163;
     $$sum19 = (($8) + 8)|0;
     $211 = (($mem) + ($$sum19)|0);
     $212 = HEAP32[$211>>2]|0;
     $213 = ($212|0)==(0|0);
     do {
      if (!($213)) {
       $214 = HEAP32[((1504 + 16|0))>>2]|0;
       $215 = ($212>>>0)<($214>>>0);
       if ($215) {
        _abort();
        // unreachable;
       } else {
        $216 = (($R7$1) + 16|0);
        HEAP32[$216>>2] = $212;
        $217 = (($212) + 24|0);
        HEAP32[$217>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum20 = (($8) + 12)|0;
     $218 = (($mem) + ($$sum20)|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = ($219|0)==(0|0);
     if (!($220)) {
      $221 = HEAP32[((1504 + 16|0))>>2]|0;
      $222 = ($219>>>0)<($221>>>0);
      if ($222) {
       _abort();
       // unreachable;
      } else {
       $223 = (($R7$1) + 20|0);
       HEAP32[$223>>2] = $219;
       $224 = (($219) + 24|0);
       HEAP32[$224>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $225 = $135 | 1;
  $226 = (($p$0) + 4|0);
  HEAP32[$226>>2] = $225;
  $227 = (($p$0) + ($135)|0);
  HEAP32[$227>>2] = $135;
  $228 = HEAP32[((1504 + 20|0))>>2]|0;
  $229 = ($p$0|0)==($228|0);
  if ($229) {
   HEAP32[((1504 + 8|0))>>2] = $135;
   STACKTOP = sp;return;
  } else {
   $psize$1 = $135;
  }
 } else {
  $230 = $114 & -2;
  HEAP32[$113>>2] = $230;
  $231 = $psize$0 | 1;
  $232 = (($p$0) + 4|0);
  HEAP32[$232>>2] = $231;
  $233 = (($p$0) + ($psize$0)|0);
  HEAP32[$233>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $234 = $psize$1 >>> 3;
 $235 = ($psize$1>>>0)<(256);
 if ($235) {
  $236 = $234 << 1;
  $237 = ((1504 + ($236<<2)|0) + 40|0);
  $238 = HEAP32[1504>>2]|0;
  $239 = 1 << $234;
  $240 = $238 & $239;
  $241 = ($240|0)==(0);
  if ($241) {
   $242 = $238 | $239;
   HEAP32[1504>>2] = $242;
   $$sum16$pre = (($236) + 2)|0;
   $$pre = ((1504 + ($$sum16$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $237;
  } else {
   $$sum17 = (($236) + 2)|0;
   $243 = ((1504 + ($$sum17<<2)|0) + 40|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = HEAP32[((1504 + 16|0))>>2]|0;
   $246 = ($244>>>0)<($245>>>0);
   if ($246) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $243;$F16$0 = $244;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $247 = (($F16$0) + 12|0);
  HEAP32[$247>>2] = $p$0;
  $248 = (($p$0) + 8|0);
  HEAP32[$248>>2] = $F16$0;
  $249 = (($p$0) + 12|0);
  HEAP32[$249>>2] = $237;
  STACKTOP = sp;return;
 }
 $250 = $psize$1 >>> 8;
 $251 = ($250|0)==(0);
 if ($251) {
  $I18$0 = 0;
 } else {
  $252 = ($psize$1>>>0)>(16777215);
  if ($252) {
   $I18$0 = 31;
  } else {
   $253 = (($250) + 1048320)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 8;
   $256 = $250 << $255;
   $257 = (($256) + 520192)|0;
   $258 = $257 >>> 16;
   $259 = $258 & 4;
   $260 = $259 | $255;
   $261 = $256 << $259;
   $262 = (($261) + 245760)|0;
   $263 = $262 >>> 16;
   $264 = $263 & 2;
   $265 = $260 | $264;
   $266 = (14 - ($265))|0;
   $267 = $261 << $264;
   $268 = $267 >>> 15;
   $269 = (($266) + ($268))|0;
   $270 = $269 << 1;
   $271 = (($269) + 7)|0;
   $272 = $psize$1 >>> $271;
   $273 = $272 & 1;
   $274 = $273 | $270;
   $I18$0 = $274;
  }
 }
 $275 = ((1504 + ($I18$0<<2)|0) + 304|0);
 $276 = (($p$0) + 28|0);
 $I18$0$c = $I18$0;
 HEAP32[$276>>2] = $I18$0$c;
 $277 = (($p$0) + 20|0);
 HEAP32[$277>>2] = 0;
 $278 = (($p$0) + 16|0);
 HEAP32[$278>>2] = 0;
 $279 = HEAP32[((1504 + 4|0))>>2]|0;
 $280 = 1 << $I18$0;
 $281 = $279 & $280;
 $282 = ($281|0)==(0);
 L199: do {
  if ($282) {
   $283 = $279 | $280;
   HEAP32[((1504 + 4|0))>>2] = $283;
   HEAP32[$275>>2] = $p$0;
   $284 = (($p$0) + 24|0);
   HEAP32[$284>>2] = $275;
   $285 = (($p$0) + 12|0);
   HEAP32[$285>>2] = $p$0;
   $286 = (($p$0) + 8|0);
   HEAP32[$286>>2] = $p$0;
  } else {
   $287 = HEAP32[$275>>2]|0;
   $288 = ($I18$0|0)==(31);
   if ($288) {
    $296 = 0;
   } else {
    $289 = $I18$0 >>> 1;
    $290 = (25 - ($289))|0;
    $296 = $290;
   }
   $291 = (($287) + 4|0);
   $292 = HEAP32[$291>>2]|0;
   $293 = $292 & -8;
   $294 = ($293|0)==($psize$1|0);
   L205: do {
    if ($294) {
     $T$0$lcssa = $287;
    } else {
     $295 = $psize$1 << $296;
     $K19$057 = $295;$T$056 = $287;
     while(1) {
      $303 = $K19$057 >>> 31;
      $304 = ((($T$056) + ($303<<2)|0) + 16|0);
      $299 = HEAP32[$304>>2]|0;
      $305 = ($299|0)==(0|0);
      if ($305) {
       break;
      }
      $297 = $K19$057 << 1;
      $298 = (($299) + 4|0);
      $300 = HEAP32[$298>>2]|0;
      $301 = $300 & -8;
      $302 = ($301|0)==($psize$1|0);
      if ($302) {
       $T$0$lcssa = $299;
       break L205;
      } else {
       $K19$057 = $297;$T$056 = $299;
      }
     }
     $306 = HEAP32[((1504 + 16|0))>>2]|0;
     $307 = ($304>>>0)<($306>>>0);
     if ($307) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$304>>2] = $p$0;
      $308 = (($p$0) + 24|0);
      HEAP32[$308>>2] = $T$056;
      $309 = (($p$0) + 12|0);
      HEAP32[$309>>2] = $p$0;
      $310 = (($p$0) + 8|0);
      HEAP32[$310>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $311 = (($T$0$lcssa) + 8|0);
   $312 = HEAP32[$311>>2]|0;
   $313 = HEAP32[((1504 + 16|0))>>2]|0;
   $314 = ($T$0$lcssa>>>0)<($313>>>0);
   if ($314) {
    _abort();
    // unreachable;
   }
   $315 = ($312>>>0)<($313>>>0);
   if ($315) {
    _abort();
    // unreachable;
   } else {
    $316 = (($312) + 12|0);
    HEAP32[$316>>2] = $p$0;
    HEAP32[$311>>2] = $p$0;
    $317 = (($p$0) + 8|0);
    HEAP32[$317>>2] = $312;
    $318 = (($p$0) + 12|0);
    HEAP32[$318>>2] = $T$0$lcssa;
    $319 = (($p$0) + 24|0);
    HEAP32[$319>>2] = 0;
    break;
   }
  }
 } while(0);
 $320 = HEAP32[((1504 + 32|0))>>2]|0;
 $321 = (($320) + -1)|0;
 HEAP32[((1504 + 32|0))>>2] = $321;
 $322 = ($321|0)==(0);
 if ($322) {
  $sp$0$in$i = ((1504 + 456|0));
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $323 = ($sp$0$i|0)==(0|0);
  $324 = (($sp$0$i) + 8|0);
  if ($323) {
   break;
  } else {
   $sp$0$in$i = $324;
  }
 }
 HEAP32[((1504 + 32|0))>>2] = -1;
 STACKTOP = sp;return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 do {
  if ($0) {
   $1 = (_malloc($bytes)|0);
   $mem$0 = $1;
  } else {
   $2 = ($bytes>>>0)>(4294967231);
   if ($2) {
    $3 = (___errno_location()|0);
    HEAP32[$3>>2] = 12;
    $mem$0 = 0;
    break;
   }
   $4 = ($bytes>>>0)<(11);
   if ($4) {
    $8 = 16;
   } else {
    $5 = (($bytes) + 11)|0;
    $6 = $5 & -8;
    $8 = $6;
   }
   $7 = (($oldmem) + -8|0);
   $9 = (_try_realloc_chunk($7,$8)|0);
   $10 = ($9|0)==(0|0);
   if (!($10)) {
    $11 = (($9) + 8|0);
    $mem$0 = $11;
    break;
   }
   $12 = (_malloc($bytes)|0);
   $13 = ($12|0)==(0|0);
   if ($13) {
    $mem$0 = 0;
   } else {
    $14 = (($oldmem) + -4|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $15 & -8;
    $17 = $15 & 3;
    $18 = ($17|0)==(0);
    $19 = $18 ? 8 : 4;
    $20 = (($16) - ($19))|0;
    $21 = ($20>>>0)<($bytes>>>0);
    $22 = $21 ? $20 : $bytes;
    _memcpy(($12|0),($oldmem|0),($22|0))|0;
    _free($oldmem);
    $mem$0 = $12;
   }
  }
 } while(0);
 STACKTOP = sp;return ($mem$0|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$1 = 0, $RP$0 = 0;
 var $cond = 0, $newp$0 = 0, $or$cond = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[((1504 + 16|0))>>2]|0;
 $5 = ($p>>>0)<($4>>>0);
 if ($5) {
  _abort();
  // unreachable;
 }
 $6 = $1 & 3;
 $7 = ($6|0)!=(1);
 $8 = ($p>>>0)<($3>>>0);
 $or$cond = $7 & $8;
 if (!($or$cond)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $9 = (($p) + ($$sum2728)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  _abort();
  // unreachable;
 }
 $13 = ($6|0)==(0);
 if ($13) {
  $14 = ($nb>>>0)<(256);
  if ($14) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $15 = (($nb) + 4)|0;
  $16 = ($2>>>0)<($15>>>0);
  if (!($16)) {
   $17 = (($2) - ($nb))|0;
   $18 = HEAP32[((1976 + 8|0))>>2]|0;
   $19 = $18 << 1;
   $20 = ($17>>>0)>($19>>>0);
   if (!($20)) {
    $newp$0 = $p;
    STACKTOP = sp;return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $21 = ($2>>>0)<($nb>>>0);
 if (!($21)) {
  $22 = (($2) - ($nb))|0;
  $23 = ($22>>>0)>(15);
  if (!($23)) {
   $newp$0 = $p;
   STACKTOP = sp;return ($newp$0|0);
  }
  $24 = (($p) + ($nb)|0);
  $25 = $1 & 1;
  $26 = $25 | $nb;
  $27 = $26 | 2;
  HEAP32[$0>>2] = $27;
  $$sum23 = (($nb) + 4)|0;
  $28 = (($p) + ($$sum23)|0);
  $29 = $22 | 3;
  HEAP32[$28>>2] = $29;
  $30 = HEAP32[$9>>2]|0;
  $31 = $30 | 1;
  HEAP32[$9>>2] = $31;
  _dispose_chunk($24,$22);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $32 = HEAP32[((1504 + 24|0))>>2]|0;
 $33 = ($3|0)==($32|0);
 if ($33) {
  $34 = HEAP32[((1504 + 12|0))>>2]|0;
  $35 = (($34) + ($2))|0;
  $36 = ($35>>>0)>($nb>>>0);
  if (!($36)) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $37 = (($35) - ($nb))|0;
  $38 = (($p) + ($nb)|0);
  $39 = $1 & 1;
  $40 = $39 | $nb;
  $41 = $40 | 2;
  HEAP32[$0>>2] = $41;
  $$sum22 = (($nb) + 4)|0;
  $42 = (($p) + ($$sum22)|0);
  $43 = $37 | 1;
  HEAP32[$42>>2] = $43;
  HEAP32[((1504 + 24|0))>>2] = $38;
  HEAP32[((1504 + 12|0))>>2] = $37;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $44 = HEAP32[((1504 + 20|0))>>2]|0;
 $45 = ($3|0)==($44|0);
 if ($45) {
  $46 = HEAP32[((1504 + 8|0))>>2]|0;
  $47 = (($46) + ($2))|0;
  $48 = ($47>>>0)<($nb>>>0);
  if ($48) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $49 = (($47) - ($nb))|0;
  $50 = ($49>>>0)>(15);
  if ($50) {
   $51 = (($p) + ($nb)|0);
   $52 = (($p) + ($47)|0);
   $53 = $1 & 1;
   $54 = $53 | $nb;
   $55 = $54 | 2;
   HEAP32[$0>>2] = $55;
   $$sum19 = (($nb) + 4)|0;
   $56 = (($p) + ($$sum19)|0);
   $57 = $49 | 1;
   HEAP32[$56>>2] = $57;
   HEAP32[$52>>2] = $49;
   $$sum20 = (($47) + 4)|0;
   $58 = (($p) + ($$sum20)|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $59 & -2;
   HEAP32[$58>>2] = $60;
   $storemerge = $51;$storemerge21 = $49;
  } else {
   $61 = $1 & 1;
   $62 = $61 | $47;
   $63 = $62 | 2;
   HEAP32[$0>>2] = $63;
   $$sum17 = (($47) + 4)|0;
   $64 = (($p) + ($$sum17)|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $65 | 1;
   HEAP32[$64>>2] = $66;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[((1504 + 8|0))>>2] = $storemerge21;
  HEAP32[((1504 + 20|0))>>2] = $storemerge;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $67 = $10 & 2;
 $68 = ($67|0)==(0);
 if (!($68)) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $69 = $10 & -8;
 $70 = (($69) + ($2))|0;
 $71 = ($70>>>0)<($nb>>>0);
 if ($71) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $72 = (($70) - ($nb))|0;
 $73 = $10 >>> 3;
 $74 = ($10>>>0)<(256);
 do {
  if ($74) {
   $$sum15 = (($2) + 8)|0;
   $75 = (($p) + ($$sum15)|0);
   $76 = HEAP32[$75>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $77 = (($p) + ($$sum16)|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = $73 << 1;
   $80 = ((1504 + ($79<<2)|0) + 40|0);
   $81 = ($76|0)==($80|0);
   if (!($81)) {
    $82 = ($76>>>0)<($4>>>0);
    if ($82) {
     _abort();
     // unreachable;
    }
    $83 = (($76) + 12|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ($84|0)==($3|0);
    if (!($85)) {
     _abort();
     // unreachable;
    }
   }
   $86 = ($78|0)==($76|0);
   if ($86) {
    $87 = 1 << $73;
    $88 = $87 ^ -1;
    $89 = HEAP32[1504>>2]|0;
    $90 = $89 & $88;
    HEAP32[1504>>2] = $90;
    break;
   }
   $91 = ($78|0)==($80|0);
   if ($91) {
    $$pre = (($78) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $92 = ($78>>>0)<($4>>>0);
    if ($92) {
     _abort();
     // unreachable;
    }
    $93 = (($78) + 8|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)==($3|0);
    if ($95) {
     $$pre$phiZ2D = $93;
    } else {
     _abort();
     // unreachable;
    }
   }
   $96 = (($76) + 12|0);
   HEAP32[$96>>2] = $78;
   HEAP32[$$pre$phiZ2D>>2] = $76;
  } else {
   $$sum = (($2) + 24)|0;
   $97 = (($p) + ($$sum)|0);
   $98 = HEAP32[$97>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $99 = (($p) + ($$sum2)|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = ($100|0)==($3|0);
   do {
    if ($101) {
     $$sum4 = (($2) + 20)|0;
     $111 = (($p) + ($$sum4)|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ($112|0)==(0|0);
     if ($113) {
      $$sum3 = (($2) + 16)|0;
      $114 = (($p) + ($$sum3)|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = ($115|0)==(0|0);
      if ($116) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $115;$RP$0 = $114;
      }
     } else {
      $R$0 = $112;$RP$0 = $111;
     }
     while(1) {
      $117 = (($R$0) + 20|0);
      $118 = HEAP32[$117>>2]|0;
      $119 = ($118|0)==(0|0);
      if (!($119)) {
       $R$0 = $118;$RP$0 = $117;
       continue;
      }
      $120 = (($R$0) + 16|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = ($121|0)==(0|0);
      if ($122) {
       break;
      } else {
       $R$0 = $121;$RP$0 = $120;
      }
     }
     $123 = ($RP$0>>>0)<($4>>>0);
     if ($123) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $102 = (($p) + ($$sum14)|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = ($103>>>0)<($4>>>0);
     if ($104) {
      _abort();
      // unreachable;
     }
     $105 = (($103) + 12|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ($106|0)==($3|0);
     if (!($107)) {
      _abort();
      // unreachable;
     }
     $108 = (($100) + 8|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ($109|0)==($3|0);
     if ($110) {
      HEAP32[$105>>2] = $100;
      HEAP32[$108>>2] = $103;
      $R$1 = $100;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $124 = ($98|0)==(0|0);
   if (!($124)) {
    $$sum11 = (($2) + 28)|0;
    $125 = (($p) + ($$sum11)|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ((1504 + ($126<<2)|0) + 304|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = ($3|0)==($128|0);
    if ($129) {
     HEAP32[$127>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $130 = 1 << $126;
      $131 = $130 ^ -1;
      $132 = HEAP32[((1504 + 4|0))>>2]|0;
      $133 = $132 & $131;
      HEAP32[((1504 + 4|0))>>2] = $133;
      break;
     }
    } else {
     $134 = HEAP32[((1504 + 16|0))>>2]|0;
     $135 = ($98>>>0)<($134>>>0);
     if ($135) {
      _abort();
      // unreachable;
     }
     $136 = (($98) + 16|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = ($137|0)==($3|0);
     if ($138) {
      HEAP32[$136>>2] = $R$1;
     } else {
      $139 = (($98) + 20|0);
      HEAP32[$139>>2] = $R$1;
     }
     $140 = ($R$1|0)==(0|0);
     if ($140) {
      break;
     }
    }
    $141 = HEAP32[((1504 + 16|0))>>2]|0;
    $142 = ($R$1>>>0)<($141>>>0);
    if ($142) {
     _abort();
     // unreachable;
    }
    $143 = (($R$1) + 24|0);
    HEAP32[$143>>2] = $98;
    $$sum12 = (($2) + 16)|0;
    $144 = (($p) + ($$sum12)|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = ($145|0)==(0|0);
    do {
     if (!($146)) {
      $147 = HEAP32[((1504 + 16|0))>>2]|0;
      $148 = ($145>>>0)<($147>>>0);
      if ($148) {
       _abort();
       // unreachable;
      } else {
       $149 = (($R$1) + 16|0);
       HEAP32[$149>>2] = $145;
       $150 = (($145) + 24|0);
       HEAP32[$150>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $151 = (($p) + ($$sum13)|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = ($152|0)==(0|0);
    if (!($153)) {
     $154 = HEAP32[((1504 + 16|0))>>2]|0;
     $155 = ($152>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     } else {
      $156 = (($R$1) + 20|0);
      HEAP32[$156>>2] = $152;
      $157 = (($152) + 24|0);
      HEAP32[$157>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $158 = ($72>>>0)<(16);
 if ($158) {
  $159 = HEAP32[$0>>2]|0;
  $160 = $159 & 1;
  $161 = $70 | $160;
  $162 = $161 | 2;
  HEAP32[$0>>2] = $162;
  $$sum910 = $70 | 4;
  $163 = (($p) + ($$sum910)|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = $164 | 1;
  HEAP32[$163>>2] = $165;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 } else {
  $166 = (($p) + ($nb)|0);
  $167 = HEAP32[$0>>2]|0;
  $168 = $167 & 1;
  $169 = $168 | $nb;
  $170 = $169 | 2;
  HEAP32[$0>>2] = $170;
  $$sum5 = (($nb) + 4)|0;
  $171 = (($p) + ($$sum5)|0);
  $172 = $72 | 3;
  HEAP32[$171>>2] = $172;
  $$sum78 = $70 | 4;
  $173 = (($p) + ($$sum78)|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = $174 | 1;
  HEAP32[$173>>2] = $175;
  _dispose_chunk($166,$72);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 return 0|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$pre = 0, $$pre$phi63Z2D = 0, $$pre$phi65Z2D = 0, $$pre$phiZ2D = 0, $$pre62 = 0, $$pre64 = 0, $$sum = 0, $$sum1 = 0, $$sum12$pre = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0;
 var $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $I19$0$c = 0, $K20$049 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$048 = 0, $cond = 0, $cond46 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    STACKTOP = sp;return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[((1504 + 16|0))>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[((1504 + 20|0))>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $100 = (($p) + ($$sum)|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $101 & 3;
    $103 = ($102|0)==(3);
    if (!($103)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[((1504 + 8|0))>>2] = $10;
    $104 = HEAP32[$100>>2]|0;
    $105 = $104 & -2;
    HEAP32[$100>>2] = $105;
    $106 = $10 | 1;
    $$sum20 = (4 - ($5))|0;
    $107 = (($p) + ($$sum20)|0);
    HEAP32[$107>>2] = $106;
    HEAP32[$0>>2] = $10;
    STACKTOP = sp;return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum30 = (8 - ($5))|0;
    $17 = (($p) + ($$sum30)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum31 = (12 - ($5))|0;
    $19 = (($p) + ($$sum31)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = ((1504 + ($21<<2)|0) + 40|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = (($18) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[1504>>2]|0;
     $32 = $31 & $30;
     HEAP32[1504>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre64 = (($20) + 8|0);
     $$pre$phi65Z2D = $$pre64;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = (($20) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi65Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = (($18) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi65Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum22 = (24 - ($5))|0;
   $39 = (($p) + ($$sum22)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum23 = (12 - ($5))|0;
   $41 = (($p) + ($$sum23)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum24 = (16 - ($5))|0;
     $$sum25 = (($$sum24) + 4)|0;
     $53 = (($p) + ($$sum25)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum24)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = (($R$0) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = (($R$0) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum29 = (8 - ($5))|0;
     $44 = (($p) + ($$sum29)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = (($45) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = (($42) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum26 = (28 - ($5))|0;
    $67 = (($p) + ($$sum26)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((1504 + ($68<<2)|0) + 304|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[((1504 + 4|0))>>2]|0;
      $75 = $74 & $73;
      HEAP32[((1504 + 4|0))>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[((1504 + 16|0))>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = (($40) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = (($40) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[((1504 + 16|0))>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = (($R$1) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum27 = (16 - ($5))|0;
    $86 = (($p) + ($$sum27)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = HEAP32[((1504 + 16|0))>>2]|0;
      $90 = ($87>>>0)<($89>>>0);
      if ($90) {
       _abort();
       // unreachable;
      } else {
       $91 = (($R$1) + 16|0);
       HEAP32[$91>>2] = $87;
       $92 = (($87) + 24|0);
       HEAP32[$92>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum27) + 4)|0;
    $93 = (($p) + ($$sum28)|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)==(0|0);
    if ($95) {
     $$0 = $9;$$02 = $10;
    } else {
     $96 = HEAP32[((1504 + 16|0))>>2]|0;
     $97 = ($94>>>0)<($96>>>0);
     if ($97) {
      _abort();
      // unreachable;
     } else {
      $98 = (($R$1) + 20|0);
      HEAP32[$98>>2] = $94;
      $99 = (($94) + 24|0);
      HEAP32[$99>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $108 = HEAP32[((1504 + 16|0))>>2]|0;
 $109 = ($0>>>0)<($108>>>0);
 if ($109) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $110 = (($p) + ($$sum1)|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $111 & 2;
 $113 = ($112|0)==(0);
 if ($113) {
  $114 = HEAP32[((1504 + 24|0))>>2]|0;
  $115 = ($0|0)==($114|0);
  if ($115) {
   $116 = HEAP32[((1504 + 12|0))>>2]|0;
   $117 = (($116) + ($$02))|0;
   HEAP32[((1504 + 12|0))>>2] = $117;
   HEAP32[((1504 + 24|0))>>2] = $$0;
   $118 = $117 | 1;
   $119 = (($$0) + 4|0);
   HEAP32[$119>>2] = $118;
   $120 = HEAP32[((1504 + 20|0))>>2]|0;
   $121 = ($$0|0)==($120|0);
   if (!($121)) {
    STACKTOP = sp;return;
   }
   HEAP32[((1504 + 20|0))>>2] = 0;
   HEAP32[((1504 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $122 = HEAP32[((1504 + 20|0))>>2]|0;
  $123 = ($0|0)==($122|0);
  if ($123) {
   $124 = HEAP32[((1504 + 8|0))>>2]|0;
   $125 = (($124) + ($$02))|0;
   HEAP32[((1504 + 8|0))>>2] = $125;
   HEAP32[((1504 + 20|0))>>2] = $$0;
   $126 = $125 | 1;
   $127 = (($$0) + 4|0);
   HEAP32[$127>>2] = $126;
   $128 = (($$0) + ($125)|0);
   HEAP32[$128>>2] = $125;
   STACKTOP = sp;return;
  }
  $129 = $111 & -8;
  $130 = (($129) + ($$02))|0;
  $131 = $111 >>> 3;
  $132 = ($111>>>0)<(256);
  do {
   if ($132) {
    $$sum18 = (($psize) + 8)|0;
    $133 = (($p) + ($$sum18)|0);
    $134 = HEAP32[$133>>2]|0;
    $$sum19 = (($psize) + 12)|0;
    $135 = (($p) + ($$sum19)|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = $131 << 1;
    $138 = ((1504 + ($137<<2)|0) + 40|0);
    $139 = ($134|0)==($138|0);
    if (!($139)) {
     $140 = ($134>>>0)<($108>>>0);
     if ($140) {
      _abort();
      // unreachable;
     }
     $141 = (($134) + 12|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($142|0)==($0|0);
     if (!($143)) {
      _abort();
      // unreachable;
     }
    }
    $144 = ($136|0)==($134|0);
    if ($144) {
     $145 = 1 << $131;
     $146 = $145 ^ -1;
     $147 = HEAP32[1504>>2]|0;
     $148 = $147 & $146;
     HEAP32[1504>>2] = $148;
     break;
    }
    $149 = ($136|0)==($138|0);
    if ($149) {
     $$pre62 = (($136) + 8|0);
     $$pre$phi63Z2D = $$pre62;
    } else {
     $150 = ($136>>>0)<($108>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($136) + 8|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($152|0)==($0|0);
     if ($153) {
      $$pre$phi63Z2D = $151;
     } else {
      _abort();
      // unreachable;
     }
    }
    $154 = (($134) + 12|0);
    HEAP32[$154>>2] = $136;
    HEAP32[$$pre$phi63Z2D>>2] = $134;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $155 = (($p) + ($$sum2)|0);
    $156 = HEAP32[$155>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $157 = (($p) + ($$sum3)|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = ($158|0)==($0|0);
    do {
     if ($159) {
      $$sum5 = (($psize) + 20)|0;
      $169 = (($p) + ($$sum5)|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==(0|0);
      if ($171) {
       $$sum4 = (($psize) + 16)|0;
       $172 = (($p) + ($$sum4)|0);
       $173 = HEAP32[$172>>2]|0;
       $174 = ($173|0)==(0|0);
       if ($174) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $173;$RP9$0 = $172;
       }
      } else {
       $R7$0 = $170;$RP9$0 = $169;
      }
      while(1) {
       $175 = (($R7$0) + 20|0);
       $176 = HEAP32[$175>>2]|0;
       $177 = ($176|0)==(0|0);
       if (!($177)) {
        $R7$0 = $176;$RP9$0 = $175;
        continue;
       }
       $178 = (($R7$0) + 16|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      }
      $181 = ($RP9$0>>>0)<($108>>>0);
      if ($181) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $$sum17 = (($psize) + 8)|0;
      $160 = (($p) + ($$sum17)|0);
      $161 = HEAP32[$160>>2]|0;
      $162 = ($161>>>0)<($108>>>0);
      if ($162) {
       _abort();
       // unreachable;
      }
      $163 = (($161) + 12|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = ($164|0)==($0|0);
      if (!($165)) {
       _abort();
       // unreachable;
      }
      $166 = (($158) + 8|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = ($167|0)==($0|0);
      if ($168) {
       HEAP32[$163>>2] = $158;
       HEAP32[$166>>2] = $161;
       $R7$1 = $158;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $182 = ($156|0)==(0|0);
    if (!($182)) {
     $$sum14 = (($psize) + 28)|0;
     $183 = (($p) + ($$sum14)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ((1504 + ($184<<2)|0) + 304|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = ($0|0)==($186|0);
     if ($187) {
      HEAP32[$185>>2] = $R7$1;
      $cond46 = ($R7$1|0)==(0|0);
      if ($cond46) {
       $188 = 1 << $184;
       $189 = $188 ^ -1;
       $190 = HEAP32[((1504 + 4|0))>>2]|0;
       $191 = $190 & $189;
       HEAP32[((1504 + 4|0))>>2] = $191;
       break;
      }
     } else {
      $192 = HEAP32[((1504 + 16|0))>>2]|0;
      $193 = ($156>>>0)<($192>>>0);
      if ($193) {
       _abort();
       // unreachable;
      }
      $194 = (($156) + 16|0);
      $195 = HEAP32[$194>>2]|0;
      $196 = ($195|0)==($0|0);
      if ($196) {
       HEAP32[$194>>2] = $R7$1;
      } else {
       $197 = (($156) + 20|0);
       HEAP32[$197>>2] = $R7$1;
      }
      $198 = ($R7$1|0)==(0|0);
      if ($198) {
       break;
      }
     }
     $199 = HEAP32[((1504 + 16|0))>>2]|0;
     $200 = ($R7$1>>>0)<($199>>>0);
     if ($200) {
      _abort();
      // unreachable;
     }
     $201 = (($R7$1) + 24|0);
     HEAP32[$201>>2] = $156;
     $$sum15 = (($psize) + 16)|0;
     $202 = (($p) + ($$sum15)|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = ($203|0)==(0|0);
     do {
      if (!($204)) {
       $205 = HEAP32[((1504 + 16|0))>>2]|0;
       $206 = ($203>>>0)<($205>>>0);
       if ($206) {
        _abort();
        // unreachable;
       } else {
        $207 = (($R7$1) + 16|0);
        HEAP32[$207>>2] = $203;
        $208 = (($203) + 24|0);
        HEAP32[$208>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum16 = (($psize) + 20)|0;
     $209 = (($p) + ($$sum16)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     if (!($211)) {
      $212 = HEAP32[((1504 + 16|0))>>2]|0;
      $213 = ($210>>>0)<($212>>>0);
      if ($213) {
       _abort();
       // unreachable;
      } else {
       $214 = (($R7$1) + 20|0);
       HEAP32[$214>>2] = $210;
       $215 = (($210) + 24|0);
       HEAP32[$215>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $216 = $130 | 1;
  $217 = (($$0) + 4|0);
  HEAP32[$217>>2] = $216;
  $218 = (($$0) + ($130)|0);
  HEAP32[$218>>2] = $130;
  $219 = HEAP32[((1504 + 20|0))>>2]|0;
  $220 = ($$0|0)==($219|0);
  if ($220) {
   HEAP32[((1504 + 8|0))>>2] = $130;
   STACKTOP = sp;return;
  } else {
   $$1 = $130;
  }
 } else {
  $221 = $111 & -2;
  HEAP32[$110>>2] = $221;
  $222 = $$02 | 1;
  $223 = (($$0) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($$0) + ($$02)|0);
  HEAP32[$224>>2] = $$02;
  $$1 = $$02;
 }
 $225 = $$1 >>> 3;
 $226 = ($$1>>>0)<(256);
 if ($226) {
  $227 = $225 << 1;
  $228 = ((1504 + ($227<<2)|0) + 40|0);
  $229 = HEAP32[1504>>2]|0;
  $230 = 1 << $225;
  $231 = $229 & $230;
  $232 = ($231|0)==(0);
  if ($232) {
   $233 = $229 | $230;
   HEAP32[1504>>2] = $233;
   $$sum12$pre = (($227) + 2)|0;
   $$pre = ((1504 + ($$sum12$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $228;
  } else {
   $$sum13 = (($227) + 2)|0;
   $234 = ((1504 + ($$sum13<<2)|0) + 40|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = HEAP32[((1504 + 16|0))>>2]|0;
   $237 = ($235>>>0)<($236>>>0);
   if ($237) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $234;$F16$0 = $235;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $238 = (($F16$0) + 12|0);
  HEAP32[$238>>2] = $$0;
  $239 = (($$0) + 8|0);
  HEAP32[$239>>2] = $F16$0;
  $240 = (($$0) + 12|0);
  HEAP32[$240>>2] = $228;
  STACKTOP = sp;return;
 }
 $241 = $$1 >>> 8;
 $242 = ($241|0)==(0);
 if ($242) {
  $I19$0 = 0;
 } else {
  $243 = ($$1>>>0)>(16777215);
  if ($243) {
   $I19$0 = 31;
  } else {
   $244 = (($241) + 1048320)|0;
   $245 = $244 >>> 16;
   $246 = $245 & 8;
   $247 = $241 << $246;
   $248 = (($247) + 520192)|0;
   $249 = $248 >>> 16;
   $250 = $249 & 4;
   $251 = $250 | $246;
   $252 = $247 << $250;
   $253 = (($252) + 245760)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 2;
   $256 = $251 | $255;
   $257 = (14 - ($256))|0;
   $258 = $252 << $255;
   $259 = $258 >>> 15;
   $260 = (($257) + ($259))|0;
   $261 = $260 << 1;
   $262 = (($260) + 7)|0;
   $263 = $$1 >>> $262;
   $264 = $263 & 1;
   $265 = $264 | $261;
   $I19$0 = $265;
  }
 }
 $266 = ((1504 + ($I19$0<<2)|0) + 304|0);
 $267 = (($$0) + 28|0);
 $I19$0$c = $I19$0;
 HEAP32[$267>>2] = $I19$0$c;
 $268 = (($$0) + 20|0);
 HEAP32[$268>>2] = 0;
 $269 = (($$0) + 16|0);
 HEAP32[$269>>2] = 0;
 $270 = HEAP32[((1504 + 4|0))>>2]|0;
 $271 = 1 << $I19$0;
 $272 = $270 & $271;
 $273 = ($272|0)==(0);
 if ($273) {
  $274 = $270 | $271;
  HEAP32[((1504 + 4|0))>>2] = $274;
  HEAP32[$266>>2] = $$0;
  $275 = (($$0) + 24|0);
  HEAP32[$275>>2] = $266;
  $276 = (($$0) + 12|0);
  HEAP32[$276>>2] = $$0;
  $277 = (($$0) + 8|0);
  HEAP32[$277>>2] = $$0;
  STACKTOP = sp;return;
 }
 $278 = HEAP32[$266>>2]|0;
 $279 = ($I19$0|0)==(31);
 if ($279) {
  $287 = 0;
 } else {
  $280 = $I19$0 >>> 1;
  $281 = (25 - ($280))|0;
  $287 = $281;
 }
 $282 = (($278) + 4|0);
 $283 = HEAP32[$282>>2]|0;
 $284 = $283 & -8;
 $285 = ($284|0)==($$1|0);
 L194: do {
  if ($285) {
   $T$0$lcssa = $278;
  } else {
   $286 = $$1 << $287;
   $K20$049 = $286;$T$048 = $278;
   while(1) {
    $294 = $K20$049 >>> 31;
    $295 = ((($T$048) + ($294<<2)|0) + 16|0);
    $290 = HEAP32[$295>>2]|0;
    $296 = ($290|0)==(0|0);
    if ($296) {
     break;
    }
    $288 = $K20$049 << 1;
    $289 = (($290) + 4|0);
    $291 = HEAP32[$289>>2]|0;
    $292 = $291 & -8;
    $293 = ($292|0)==($$1|0);
    if ($293) {
     $T$0$lcssa = $290;
     break L194;
    } else {
     $K20$049 = $288;$T$048 = $290;
    }
   }
   $297 = HEAP32[((1504 + 16|0))>>2]|0;
   $298 = ($295>>>0)<($297>>>0);
   if ($298) {
    _abort();
    // unreachable;
   }
   HEAP32[$295>>2] = $$0;
   $299 = (($$0) + 24|0);
   HEAP32[$299>>2] = $T$048;
   $300 = (($$0) + 12|0);
   HEAP32[$300>>2] = $$0;
   $301 = (($$0) + 8|0);
   HEAP32[$301>>2] = $$0;
   STACKTOP = sp;return;
  }
 } while(0);
 $302 = (($T$0$lcssa) + 8|0);
 $303 = HEAP32[$302>>2]|0;
 $304 = HEAP32[((1504 + 16|0))>>2]|0;
 $305 = ($T$0$lcssa>>>0)<($304>>>0);
 if ($305) {
  _abort();
  // unreachable;
 }
 $306 = ($303>>>0)<($304>>>0);
 if ($306) {
  _abort();
  // unreachable;
 }
 $307 = (($303) + 12|0);
 HEAP32[$307>>2] = $$0;
 HEAP32[$302>>2] = $$0;
 $308 = (($$0) + 8|0);
 HEAP32[$308>>2] = $303;
 $309 = (($$0) + 12|0);
 HEAP32[$309>>2] = $T$0$lcssa;
 $310 = (($$0) + 24|0);
 HEAP32[$310>>2] = 0;
 STACKTOP = sp;return;
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $11 = 0;
  } else {
   $$03 = $n;$l$04 = $vl;$r$05 = $vr;
   while(1) {
    $1 = HEAP8[$l$04>>0]|0;
    $2 = HEAP8[$r$05>>0]|0;
    $3 = ($1<<24>>24)==($2<<24>>24);
    if (!($3)) {
     break;
    }
    $4 = (($$03) + -1)|0;
    $5 = (($l$04) + 1|0);
    $6 = (($r$05) + 1|0);
    $7 = ($4|0)==(0);
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$03 = $4;$l$04 = $5;$r$05 = $6;
    }
   }
   $8 = $1&255;
   $9 = $2&255;
   $10 = (($8) - ($9))|0;
   $11 = $10;
  }
 } while(0);
 STACKTOP = sp;return ($11|0);
}
function _strncmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$03 = 0, $$08 = 0, $$08$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$06 = 0, $notlhs = 0;
 var $notrhs = 0, $or$cond$not = 0, $or$cond4 = 0, $r$0$lcssa = 0, $r$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$03 = 0;
  STACKTOP = sp;return ($$03|0);
 }
 $1 = HEAP8[$_l>>0]|0;
 $2 = ($1<<24>>24)==(0);
 L4: do {
  if ($2) {
   $11 = 0;$r$0$lcssa = $_r;
  } else {
   $$08$in = $n;$5 = $1;$l$06 = $_l;$r$07 = $_r;
   while(1) {
    $$08 = (($$08$in) + -1)|0;
    $3 = HEAP8[$r$07>>0]|0;
    $notlhs = ($3<<24>>24)!=(0);
    $notrhs = ($$08|0)!=(0);
    $or$cond$not = $notrhs & $notlhs;
    $4 = ($5<<24>>24)==($3<<24>>24);
    $or$cond4 = $or$cond$not & $4;
    if (!($or$cond4)) {
     $11 = $5;$r$0$lcssa = $r$07;
     break L4;
    }
    $6 = (($l$06) + 1|0);
    $7 = (($r$07) + 1|0);
    $8 = HEAP8[$6>>0]|0;
    $9 = ($8<<24>>24)==(0);
    if ($9) {
     $11 = 0;$r$0$lcssa = $7;
     break;
    } else {
     $$08$in = $$08;$5 = $8;$l$06 = $6;$r$07 = $7;
    }
   }
  }
 } while(0);
 $10 = $11&255;
 $12 = HEAP8[$r$0$lcssa>>0]|0;
 $13 = $12&255;
 $14 = (($10) - ($13))|0;
 $$03 = $14;
 STACKTOP = sp;return ($$03|0);
}
function runPostSets() {
 
}
function _tolower(chr) {
    chr = chr|0;
    if ((chr|0) < 65) return chr|0;
    if ((chr|0) > 90) return chr|0;
    return (chr - 65 + 97)|0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _strcat(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    var pdestEnd = 0;
    pdestEnd = (pdest + (_strlen(pdest)|0))|0;
    do {
      HEAP8[((pdestEnd+i)>>0)]=HEAP8[((psrc+i)>>0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))>>0)])|0));
    return pdest|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _strcpy(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    do {
      HEAP8[(((pdest+i)|0)>>0)]=HEAP8[(((psrc+i)|0)>>0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))>>0)])|0));
    return pdest|0;
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
  }
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
  }
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((ctlz_i8)+(x >>> 24))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((ctlz_i8)+(x&0xff))>>0)])|0) + 24)|0;
  }

function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



// EMSCRIPTEN_END_FUNCS

  
  function dynCall_ii(index,a1) {
    index = index|0;
    a1=a1|0;
    return FUNCTION_TABLE_ii[index&15](a1|0)|0;
  }


  function jsCall_ii_0(a1) {
    a1=a1|0;
    return jsCall(0,a1|0)|0;
  }



  function jsCall_ii_1(a1) {
    a1=a1|0;
    return jsCall(1,a1|0)|0;
  }



  function jsCall_ii_2(a1) {
    a1=a1|0;
    return jsCall(2,a1|0)|0;
  }



  function jsCall_ii_3(a1) {
    a1=a1|0;
    return jsCall(3,a1|0)|0;
  }



  function dynCall_vi(index,a1) {
    index = index|0;
    a1=a1|0;
    FUNCTION_TABLE_vi[index&15](a1|0);
  }


  function jsCall_vi_0(a1) {
    a1=a1|0;
    jsCall(0,a1|0);
  }



  function jsCall_vi_1(a1) {
    a1=a1|0;
    jsCall(1,a1|0);
  }



  function jsCall_vi_2(a1) {
    a1=a1|0;
    jsCall(2,a1|0);
  }



  function jsCall_vi_3(a1) {
    a1=a1|0;
    jsCall(3,a1|0);
  }



  function dynCall_iii(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=a2|0;
    return FUNCTION_TABLE_iii[index&15](a1|0,a2|0)|0;
  }


  function jsCall_iii_0(a1,a2) {
    a1=a1|0; a2=a2|0;
    return jsCall(0,a1|0,a2|0)|0;
  }



  function jsCall_iii_1(a1,a2) {
    a1=a1|0; a2=a2|0;
    return jsCall(1,a1|0,a2|0)|0;
  }



  function jsCall_iii_2(a1,a2) {
    a1=a1|0; a2=a2|0;
    return jsCall(2,a1|0,a2|0)|0;
  }



  function jsCall_iii_3(a1,a2) {
    a1=a1|0; a2=a2|0;
    return jsCall(3,a1|0,a2|0)|0;
  }


function b0(p0) { p0 = p0|0; nullFunc_ii(0);return 0; }
  function b1(p0) { p0 = p0|0; nullFunc_vi(1); }
  function b2(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(2);return 0; }
  // EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_ii = [b0,b0,jsCall_ii_0,b0,jsCall_ii_1,b0,jsCall_ii_2,b0,jsCall_ii_3,b0,_malloc,b0,b0,b0,b0,b0];
  var FUNCTION_TABLE_vi = [b1,b1,jsCall_vi_0,b1,jsCall_vi_1,b1,jsCall_vi_2,b1,jsCall_vi_3,b1,b1,_free,b1,b1,b1,b1];
  var FUNCTION_TABLE_iii = [b2,b2,jsCall_iii_0,b2,jsCall_iii_1,b2,jsCall_iii_2,b2,jsCall_iii_3,b2,b2,b2,b2,b2,b2,b2];

  return { _strlen: _strlen, _strcat: _strcat, _ot_insert: _ot_insert, _ot_client_open: _ot_client_open, _ot_client_apply: _ot_client_apply, _bitshift64Lshr: _bitshift64Lshr, _ot_encode: _ot_encode, _memset: _memset, _ot_delete: _ot_delete, _memcpy: _memcpy, _realloc: _realloc, _i64Add: _i64Add, _ot_new_op: _ot_new_op, _ot_server_receive: _ot_server_receive, _ot_decode: _ot_decode, _ot_snapshot: _ot_snapshot, _ot_new_client: _ot_new_client, _ot_client_receive: _ot_client_receive, _tolower: _tolower, _malloc: _malloc, _ot_skip: _ot_skip, _ot_new_server: _ot_new_server, _ot_server_open: _ot_server_open, _strcpy: _strcpy, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_ii: dynCall_ii, dynCall_vi: dynCall_vi, dynCall_iii: dynCall_iii };
})
// EMSCRIPTEN_END_ASM
({ "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array }, { "abort": abort, "assert": assert, "asmPrintInt": asmPrintInt, "asmPrintFloat": asmPrintFloat, "min": Math_min, "jsCall": jsCall, "nullFunc_ii": nullFunc_ii, "nullFunc_vi": nullFunc_vi, "nullFunc_iii": nullFunc_iii, "invoke_ii": invoke_ii, "invoke_vi": invoke_vi, "invoke_iii": invoke_iii, "_fabs": _fabs, "_llvm_pow_f64": _llvm_pow_f64, "_send": _send, "___setErrNo": ___setErrNo, "___assert_fail": ___assert_fail, "_floor": _floor, "_fflush": _fflush, "_pwrite": _pwrite, "__reallyNegative": __reallyNegative, "_sbrk": _sbrk, "_snprintf": _snprintf, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_fileno": _fileno, "_sysconf": _sysconf, "_mkport": _mkport, "_sprintf": _sprintf, "_write": _write, "___errno_location": ___errno_location, "_abort": _abort, "_fwrite": _fwrite, "_time": _time, "_fprintf": _fprintf, "__formatString": __formatString, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "NaN": NaN, "Infinity": Infinity, "_stderr": _stderr }, buffer);
var _strlen = Module["_strlen"] = asm["_strlen"];
var _strcat = Module["_strcat"] = asm["_strcat"];
var _ot_insert = Module["_ot_insert"] = asm["_ot_insert"];
var _ot_client_open = Module["_ot_client_open"] = asm["_ot_client_open"];
var _ot_client_apply = Module["_ot_client_apply"] = asm["_ot_client_apply"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _ot_encode = Module["_ot_encode"] = asm["_ot_encode"];
var _memset = Module["_memset"] = asm["_memset"];
var _ot_delete = Module["_ot_delete"] = asm["_ot_delete"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _ot_new_op = Module["_ot_new_op"] = asm["_ot_new_op"];
var _ot_server_receive = Module["_ot_server_receive"] = asm["_ot_server_receive"];
var _ot_decode = Module["_ot_decode"] = asm["_ot_decode"];
var _ot_snapshot = Module["_ot_snapshot"] = asm["_ot_snapshot"];
var _ot_new_client = Module["_ot_new_client"] = asm["_ot_new_client"];
var _ot_client_receive = Module["_ot_client_receive"] = asm["_ot_client_receive"];
var _tolower = Module["_tolower"] = asm["_tolower"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _ot_skip = Module["_ot_skip"] = asm["_ot_skip"];
var _ot_new_server = Module["_ot_new_server"] = asm["_ot_new_server"];
var _ot_server_open = Module["_ot_server_open"] = asm["_ot_server_open"];
var _strcpy = Module["_strcpy"] = asm["_strcpy"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  // TODO We should handle this differently based on environment.
  // In the browser, the best we can do is throw an exception
  // to halt execution, but in node we could process.exit and
  // I'd imagine SM shell would have something equivalent.
  // This would let us set a proper exit status (which
  // would be great for checking test exit statuses).
  // https://github.com/kripken/emscripten/issues/1371

  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



//# sourceMappingURL=libot-emscripten.js.map
    (function() {
        "use strict";

        var cFuncs = {};
        cFuncs.otNewOp = Module.cwrap("ot_new_op", "number", ["number", "string"]);
        cFuncs.otSkip = Module.cwrap("ot_skip", null, ["number", "number"]);
        cFuncs.otInsert = Module.cwrap("ot_insert", null, ["number", "string"]);
        cFuncs.otDelete = Module.cwrap("ot_delete", null, ["number", "number"]);
        cFuncs.otEncode = Module.cwrap("ot_encode", "string", ["number"]);
        cFuncs.otDecode = Module.cwrap("ot_decode", "number", ["number", "string"]);
        cFuncs.otSnapshot = Module.cwrap("ot_snapshot", "string", ["number"]);
        cFuncs.otNewClient = Module.cwrap("ot_new_client", "number", ["number", "number", "number"]);
        cFuncs.otClientOpen = Module.cwrap("ot_client_open", null, ["number", "number"]);
        cFuncs.otClientReceive = Module.cwrap("ot_client_receive", null, ["number", "string"]);
        cFuncs.otClientApply = Module.cwrap("ot_client_apply", null, ["number", "number"]);
        cFuncs.otNewServer = Module.cwrap("ot_new_server", "number", ["number", "number"]);
        cFuncs.otServerOpen = Module.cwrap("ot_server_open", null, ["number", "number"]);
        cFuncs.otServerReceive = Module.cwrap("ot_server_receive", null, ["number", "string"]);
        libot.cFuncs = cFuncs;

/* eslint-env node, browser */

"use strict";

libot.Client = function(serverAddress) {
    this.onEvent = null;
    this._socket = new WebSocket(serverAddress);
    this._socket.onopen = function() {
        console.log("WebSocket connection open.");
    };

    var sendFunc = Runtime.addFunction(function(stringPointer) {
        var string = Module.Pointer_stringify(stringPointer);
        this._socket.send(string);
    }.bind(this));

    var eventFunc = Runtime.addFunction(function(type, nativeOp) {
        if (this.onEvent) {
            this.onEvent(type, new libot.Op(nativeOp));
        }
    }.bind(this));

    this._socket.onmessage = function(e) {
        if (!this._otClient) {
            var obj = JSON.parse(e.data);
            this._otClient = cFuncs.otNewClient(sendFunc, eventFunc, obj.clientId);
            cFuncs.otClientReceive(this._otClient, obj.lastOp);
            return;
        }
        cFuncs.otClientReceive(this._otClient, e.data);
    }.bind(this);
};

libot.Client.prototype = {
    apply: function(op) {
        var ptr = Module._malloc(4);
        Module.setValue(ptr, op.nativeOp, "*");
        console.time("native");
        cFuncs.otClientApply(this._otClient, ptr);
        console.timeEnd("native");
    },
    close: function() {
        this._socket.close();
    }
};
"use strict";

/**
 * Decodes a JSON string into an Op.
 *
 * @param {string} json The JSON string to decode.
 * @return {libot.Op} The decoded operation.
 */
libot.Decode = function(json) {
    var op = new libot.Op();
    var error = cFuncs.otDecode(op.nativeOp, json);
    if (error !== 0) {
        throw new Error("Couldn't decode JSON into a valid operation. Error " +
            "code " + error + ".");
    }

    return op;
};
"use strict";

libot.encode = function(op) {
    return cFuncs.otEncode(op.nativeOp);
};
"use strict";

/**
 * Creates an instance of Op.
 * @param {NativeOp} [nativeOp] - A pointer to an existing native operation.
 * @constructor
 */
libot.Op = function Op(nativeOp) {
    if (!nativeOp) {
        nativeOp = cFuncs.otNewOp(0, "");
    }

    Object.defineProperty(this, "nativeOp", {
        get: function() {
            return nativeOp;
        }
    });
};

libot.Op.prototype = {
    get nativeOp() {
        return this.nativeOp;
    },
    apply: function(skipFunc, insertFunc, deleteFunc) {
        var json = cFuncs.otEncode(this.nativeOp);
        var jsonObject = JSON.parse(json);
        var index = 0;
        for (var i = 0; i < jsonObject.components.length; i++) {
            var component = jsonObject.components[i];
            switch (component.type) {
                case "skip":
                    if (skipFunc) {
                        skipFunc(index, component.count);
                    }
                    index += component.count;
                    break;
                case "insert":
                    if (insertFunc) {
                        insertFunc(index, component.text);
                    }
                    break;
                case "delete":
                    if (deleteFunc) {
                        deleteFunc(index, component.count);
                    }
                    index += component.count;
                    break;
            }
        }
    },
    skip: function(count) {
        cFuncs.otSkip(this.nativeOp, count);
    },
    insert: function(text) {
        cFuncs.otInsert(this.nativeOp, text);
    },
    delete: function(count) {
        cFuncs.otDelete(this.nativeOp, count);
    },
    snapshot: function() {
        return cFuncs.otSnapshot(this.nativeOp);
    }
};
"use strict";

libot.QuillAdapter = function(editor, client) {
    this.editor = editor;

    editor.on("text-change", function(delta) {
        var op = this.deltaToOperation(delta);
        client.apply(op);
    }.bind(this));

    client.onEvent = function(type, op) {
        var delta = this.operationToDelta(op);
        editor.updateContents(delta);
    }.bind(this);
};

libot.QuillAdapter.prototype = {
    deltaToOperation: function(delta) {
        var op = new libot.Op();
        var position = 0;

        function fillSkips(index) {
            if (index > position) {
                var count = index - position;
                op.skip(count);
                position = index;
            }
        }

        delta.apply(
            function(index, text) {
                fillSkips(index);
                op.insert(text);
                position += text.length;
            },
            function(index, length) {
                fillSkips(index);
                op.delete(length);
            }
        );

        fillSkips(delta.endLength);

        return op;
    },
    operationToDelta: function(op) {
        var deltaOps = [];
        op.apply(
            function skipFunc(index, count) {
                var retain = {
                    start: index,
                    end: index + count
                };
                deltaOps.push(retain);
            },
            function insertFunc(index, text) {
                var insert = {
                    value: text
                };
                deltaOps.push(insert);
            }
        );

        return {
            startLength: this.editor.getLength(),
            ops: deltaOps
        };
    }
};
"use strict";

libot.Server = function(ws) {
    var WebSocketServer = ws.Server;
    this._socketSever = new WebSocketServer({
        port: 8080
    });

    this._socketSever.broadcast = function(data) {
        for (var i in this.clients) {
            this.clients[i].send(data);
        }
    };

    var sendFunc = Runtime.addFunction(function(stringPointer) {
        var string = Module.Pointer_stringify(stringPointer);
        this._socketSever.broadcast(string);
    }.bind(this));

    this._otServer = cFuncs.otNewServer(sendFunc, null);

    var lastId = 0;
    this._socketSever.on("connection", function(ws) {
        ws.on("message", function(message) {
            cFuncs.otServerReceive(this._otServer, message);
        }.bind(this));

        lastId++;
        console.log("Assigning client ID: " + lastId);
        var msg = {
            clientId: lastId
        };

        var nativeDocPtr = Module.getValue(this._otServer + 8, "*");
        if (nativeDocPtr !== 0) {
            var nativeOpPtr = Module.getValue(nativeDocPtr + 16, "*");
            var lastOpJSON = cFuncs.otEncode(nativeOpPtr);
            console.log("Sending last op: " + lastOpJSON);
            msg.lastOp = lastOpJSON;
        }

        ws.send(JSON.stringify(msg));
    }.bind(this));
};

libot.Server.prototype = {
    close: function() {
        this._socketSever.close();
    }
};

        function isRunningInNode() {
            return (typeof module !== "undefined" && module.exports);
        }

        if (isRunningInNode()) {
            var ws = require("ws");
            module.exports = libot;
            var server = new libot.Server(ws);
            process.on("exit", function() {
                server.close();
            });
        }
    }());
}());
