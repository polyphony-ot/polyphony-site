/* eslint-env node, browser */
/* eslint strict: 0 */
/* global Module */

/**
 * @file The main entry point for polyphony.js. The {{lib}} and {{emscripten}}
 *       comments in this file will be replaced with the sources in lib and the
 *       generated Emscripten code, respectively.
 * @author Greg Curtis <greg.r.curtis@gmail.com>
 */


/** @namespace polyphony */
var polyphony = {};

(function() {

    /**
     * Module is a variable created by Emscripten and contains all of the
     * functions exported by Emscripten. It is used whenever we want to do
     * something with code generated by Emscripten.
     *
     * @var {object} Module
     */
// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  Module['thisProgram'] = process['argv'][1];
  Module['arguments'] = process['argv'].slice(2);

  module['exports'] = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?\{ ?[^}]* ?\}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_ && type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [null,null,null,null],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      var evalled = eval('(function(' + args.join(',') + '){ ' + source + ' })'); // new Function does not allow upvars in node
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*(+4294967296))) : ((+((low>>>0)))+((+((high|0)))*(+4294967296)))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;

function jsCall() {
  var args = Array.prototype.slice.call(arguments);
  return Runtime.functionPointers[args[0]].apply(null, args.slice(1));
}








//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var stack = 0;
  var JSfuncs = {
    'stackSave' : function() {
      stack = Runtime.stackSave();
    },
    'stackRestore' : function() {
      Runtime.stackRestore(stack);
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        ret = Runtime.stackAlloc(str.length + 1); // +1 for the trailing '\0'
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. A convenient way to call C functions (in C files, or
  // defined with extern "C").
  //
  // Note: ccall/cwrap use the C stack for temporary values. If you pass a string
  //       then it is only alive until the call is complete. If the code being
  //       called saves the pointer to be used later, it may point to invalid
  //       data. If you need a string to live forever, you can create it (and
  //       must later delete it manually!) using malloc and writeStringToMemory,
  //       for example.
  //
  // Note: LLVM optimizations can inline and remove functions, after which you will not be
  //       able to call them. Closure can also do so. To avoid that, add your function to
  //       the exports using something like
  //
  //         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
  //
  // @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
  // @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
  //                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
  // @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
  //                   except that 'array' is not possible (there is no way for us to know the length of the array)
  // @param args       An array of the arguments to the function, as native JS values (as in returnType)
  //                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
  // @return           The return value, as a native JS value (as in returnType)
  ccall = function ccallFunc(ident, returnType, argTypes, args) {
    var func = getCFunc(ident);
    var cArgs = [];
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) JSfuncs['stackRestore']();
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }
  // Returns a native JS wrapper for a C function. This is similar to ccall, but
  // returns a function you can call repeatedly in a normal way. For example:
  //
  //   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
  //   alert(my_function(5, 22));
  //   alert(my_function(99, 12));
  //
  cwrap = function cwrap(ident, returnType, argTypes) {
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;

// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    return parse();
  } catch(e) {
    return func;
  }
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function stackTrace() {
  var stack = new Error().stack;
  return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
}

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 4096;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be more reasonable');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeInitialized = false;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + Runtime.alignMemory(2275);
  /* global initializers */ __ATINIT__.push();
  

/* memory initializer */ allocate([0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,110,117,108,108,0,0,0,0,102,97,108,115,101,0,0,0,116,114,117,101,0,0,0,0,34,92,8,12,10,13,9,0,117,37,48,52,120,0,0,0,91,93,0,0,0,0,0,0,37,100,0,0,0,0,0,0,37,46,48,102,0,0,0,0,37,101,0,0,0,0,0,0,37,102,0,0,0,0,0,0,0,0,192,224,240,248,252,0,67,108,105,101,110,116,32,114,101,99,101,105,118,101,100,32,111,112,58,32,37,115,10,0,0,0,0,0,0,0,0,0,67,108,105,101,110,116,32,99,111,117,108,100,110,39,116,32,100,101,99,111,100,101,32,111,112,46,32,69,114,114,111,114,32,99,111,100,101,58,32,37,100,46,0,0,0,0,0,0,79,112,32,37,115,32,119,97,115,32,97,99,107,110,111,119,108,101,100,103,101,100,46,10,0,0,0,0,0,0,0,0,67,108,105,101,110,116,32,99,111,117,108,100,110,39,116,32,116,114,97,110,115,102,111,114,109,32,105,116,115,32,97,110,116,105,99,105,112,97,116,101,100,32,111,112,46,32,69,114,114,111,114,32,99,111,100,101,58,32,37,100,46,0,0,0,67,108,105,101,110,116,32,99,111,117,108,100,110,39,116,32,116,114,97,110,115,102,111,114,109,32,105,116,115,32,98,117,102,102,101,114,46,32,69,114,114,111,114,32,99,111,100,101,58,32,37,100,46,0,0,0,67,108,105,101,110,116,32,99,111,117,108,100,110,39,116,32,97,100,100,32,111,112,32,116,111,32,116,104,101,32,98,117,102,102,101,114,58,32,37,115,10,0,0,0,0,0,0,0,67,108,105,101,110,116,39,115,32,98,117,102,102,101,114,32,105,115,32,110,111,119,58,32,37,115,10,0,0,0,0,0,99,108,105,101,110,116,73,100,0,0,0,0,0,0,0,0,112,97,114,101,110,116,0,0,104,97,115,104,0,0,0,0,99,111,109,112,111,110,101,110,116,115,0,0,0,0,0,0,116,121,112,101,0,0,0,0,115,107,105,112,0,0,0,0,99,111,117,110,116,0,0,0,105,110,115,101,114,116,0,0,116,101,120,116,0,0,0,0,100,101,108,101,116,101,0,0,111,112,101,110,69,108,101,109,101,110,116,0,0,0,0,0,101,108,101,109,101,110,116,0,99,108,111,115,101,69,108,101,109,101,110,116,0,0,0,0,102,111,114,109,97,116,116,105,110,103,66,111,117,110,100,97,114,121,0,0,0,0,0,0,116,121,112,101,0,0,0,0,115,107,105,112,0,0,0,0,99,111,117,110,116,0,0,0,105,110,115,101,114,116,0,0,116,101,120,116,0,0,0,0,100,101,108,101,116,101,0,0,111,112,101,110,69,108,101,109,101,110,116,0,0,0,0,0,101,108,101,109,101,110,116,0,99,108,111,115,101,69,108,101,109,101,110,116,0,0,0,0,99,108,105,101,110,116,73,100,0,0,0,0,0,0,0,0,112,97,114,101,110,116,0,0,104,97,115,104,0,0,0,0,99,111,109,112,111,110,101,110,116,115,0,0,0,0,0,0,83,101,114,118,101,114,32,114,101,99,101,105,118,101,100,32,111,112,58,32,37,115,10,0,0,0,0,0,0,0,0,0,83,101,114,118,101,114,32,99,111,117,108,100,110,39,116,32,100,101,99,111,100,101,32,111,112,58,32,37,115,10,0,0,83,101,114,118,101,114,39,115,32,100,111,99,117,109,101,110,116,32,105,115,32,110,111,119,58,32,37,115,10,0,0,0,83,101,114,118,101,114,32,99,111,117,108,100,110,39,116,32,102,105,110,100,32,116,104,101,32,112,97,114,101,110,116,32,111,102,32,116,104,101,32,114,101,99,101,105,118,101,100,32,111,112,58,32,37,115,10,0,83,101,114,118,101,114,32,116,114,97,110,115,102,111,114,109,105,110,103,58,10,9,37,115,10,9,37,115,10,0,0,0,83,101,114,118,101,114,32,116,114,97,110,115,102,111,114,109,32,102,97,105,108,101,100,46,10,0,0,0,0,0,0,0,83,101,114,118,101,114,32,116,114,97,110,115,102,111,114,109,32,115,117,99,99,101,101,100,101,100,58,10,9,37,115,10,9,37,115,10,0,0,0,0,83,101,114,118,101,114,32,115,101,116,116,105,110,103,32,102,105,114,115,116,32,111,112,58,32,37,115,10,0,0,0,0,83,101,114,118,101,114,32,97,112,112,101,110,100,105,110,103,58,10,9,37,115,10,9,37,115,10,0,0,0,0,0,0,83,101,114,118,101,114,32,97,112,112,101,110,100,32,102,97,105,108,101,100,46,10,0,0,83,101,114,118,101,114,32,115,101,110,116,32,111,112,58,32,37,115,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  var _BDtoIHigh=true;

   
  Module["_i64Subtract"] = _i64Subtract;

  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

  
   
  Module["_strlen"] = _strlen; 
  Module["_strcat"] = _strcat;

  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }
  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  
  
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (node.contents && node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
  
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
  
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          stream.position = position;
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return Math.floor(Math.random()*256); };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = Math.floor(idx / this.chunkSize);
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
            // Find length
            var xhr = new XMLHttpRequest();
            xhr.open('HEAD', url, false);
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            var datalength = Number(xhr.getResponseHeader("Content-length"));
            var header;
            var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
            var chunkSize = 1024*1024; // Chunk size in bytes
  
            if (!hasByteServing) chunkSize = datalength;
  
            // Function to get a range from the remote URL.
            var doXHR = (function(from, to) {
              if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
              if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
              // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
              var xhr = new XMLHttpRequest();
              xhr.open('GET', url, false);
              if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
              // Some hints to the browser that we want binary data.
              if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
              if (xhr.overrideMimeType) {
                xhr.overrideMimeType('text/plain; charset=x-user-defined');
              }
  
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              if (xhr.response !== undefined) {
                return new Uint8Array(xhr.response || []);
              } else {
                return intArrayFromString(xhr.responseText || '', true);
              }
            });
            var lazyArray = this;
            lazyArray.setDataGetter(function(chunkNum) {
              var start = chunkNum * chunkSize;
              var end = (chunkNum+1) * chunkSize - 1; // including this byte
              end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
              if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                lazyArray.chunks[chunkNum] = doXHR(start, end);
              }
              if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
              return lazyArray.chunks[chunkNum];
            });
  
            this._length = datalength;
            this._chunkSize = chunkSize;
            this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces "//" comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the "#" for "//" again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                url = url + addr + ':' + port;
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('error', function() {
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
            }
          });
          sock.server.on('closed', function() {
            sock.server = null;
          });
          sock.server.on('error', function() {
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }


  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function _llvm_pow_f64() {
  return Math_pow.apply(null, arguments)
  }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

   
  Module["_i64Add"] = _i64Add;

  function _fabs() {
  return Math_abs.apply(null, arguments)
  }

  function _floor() {
  return Math_floor.apply(null, arguments)
  }


  function ___errno_location() {
      return ___errno_state;
    }

  var _BItoD=true;

   
  Module["_strcpy"] = _strcpy;

  var Browser={mainLoop:{scheduler:null,method:"",shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx) return Module.ctx; // no need to recreate singleton GL context
  
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          if (useWebGL) {
            var contextAttributes = {
              antialias: false,
              alpha: false
            };
  
            if (webGLContextAttributes) {
              for (var attribute in webGLContextAttributes) {
                contextAttributes[attribute] = webGLContextAttributes[attribute];
              }
            }
  
  
            canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
            try {
              ['experimental-webgl', 'webgl'].some(function(webglId) {
                return ctx = canvas.getContext(webglId, contextAttributes);
              });
            } finally {
              canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
            }
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e]);
          return null;
        }
        if (useWebGL) {
          // possible GL_DEBUG entry point: ctx = wrapDebugGL(ctx);
  
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        }
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
          Module.ctx = ctx;
          if (useWebGL) GLctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = -event.wheelDelta;
            break;
          case 'wheel': 
            delta = event.deltaY;
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return Math.max(-1, Math.min(1, delta));
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      }};

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + 5242880;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);

  var Math_min = Math.min;
function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

  function asmPrintInt(x, y) {
    Module.print('int ' + x + ',' + y);// + ' ' + new Error().stack);
  }
  function asmPrintFloat(x, y) {
    Module.print('float ' + x + ',' + y);// + ' ' + new Error().stack);
  }
  // EMSCRIPTEN_START_ASM
  var asm = (function(global, env, buffer) {
    'use asm';
    var HEAP8 = new global.Int8Array(buffer);
    var HEAP16 = new global.Int16Array(buffer);
    var HEAP32 = new global.Int32Array(buffer);
    var HEAPU8 = new global.Uint8Array(buffer);
    var HEAPU16 = new global.Uint16Array(buffer);
    var HEAPU32 = new global.Uint32Array(buffer);
    var HEAPF32 = new global.Float32Array(buffer);
    var HEAPF64 = new global.Float64Array(buffer);
  
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ctlz_i8=env.ctlz_i8|0;
  var _stderr=env._stderr|0;

    var __THREW__ = 0;
    var threwValue = 0;
    var setjmpId = 0;
    var undef = 0;
    var nan = +env.NaN, inf = +env.Infinity;
    var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  
    var tempRet0 = 0;
    var tempRet1 = 0;
    var tempRet2 = 0;
    var tempRet3 = 0;
    var tempRet4 = 0;
    var tempRet5 = 0;
    var tempRet6 = 0;
    var tempRet7 = 0;
    var tempRet8 = 0;
    var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var asmPrintInt=env.asmPrintInt;
  var asmPrintFloat=env.asmPrintFloat;
  var Math_min=env.min;
  var jsCall=env.jsCall;
  var invoke_ii=env.invoke_ii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_iii=env.invoke_iii;
  var invoke_vi=env.invoke_vi;
  var _fabs=env._fabs;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _send=env._send;
  var ___setErrNo=env.___setErrNo;
  var _floor=env._floor;
  var _fflush=env._fflush;
  var _pwrite=env._pwrite;
  var _strerror_r=env._strerror_r;
  var __reallyNegative=env.__reallyNegative;
  var _sbrk=env._sbrk;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _fileno=env._fileno;
  var _sysconf=env._sysconf;
  var _mkport=env._mkport;
  var _write=env._write;
  var ___errno_location=env.___errno_location;
  var _abort=env._abort;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _fprintf=env._fprintf;
  var _strerror=env._strerror;
  var __formatString=env.__formatString;
  var tempFloat = 0.0;

  // EMSCRIPTEN_START_FUNCS
function _printf_core($f, $fmt, $ap, $nl_arg, $nl_type) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 $nl_arg = $nl_arg | 0;
 $nl_type = $nl_type | 0;
 var $$$p$i = 0, $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i104$i = 0, $$0$lcssa$i128$i = 0, $$0$lcssa$i143$i = 0, $$0$lcssa$i38 = 0, $$0$lcssa$i39$i = 0, $$0$lcssa$i44 = 0, $$0$lcssa$i46 = 0, $$0$lcssa$i46$i = 0, $$0$lcssa$i49$i = 0, $$0$lcssa$i53 = 0, $$0$lcssa$i56$i = 0, $$0$lcssa$i60 = 0, $$0$lcssa$i63$i = 0, $$0$lcssa$i67 = 0, $$0$lcssa$i69$i = 0, $$0$lcssa$i76$i = 0, $$0$lcssa$i78 = 0, $$0$lcssa$i85$i = 0, $$0$lcssa$i97$i = 0, $$01$i = 0, $$01$i$i = 0, $$01$i102$i = 0, $$01$i126$i = 0, $$01$i141$i = 0, $$01$i36 = 0, $$01$i37$i = 0, $$01$i44$i = 0, $$01$i51 = 0, $$01$i54$i = 0, $$01$i58 = 0, $$01$i61$i = 0, $$01$i65 = 0, $$01$i67$i = 0, $$01$i74$i = 0, $$01$i76 = 0, $$01$i95$i = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i86$i = 0, $$012$i = 0, $$012$i73 = 0, $$03$i41 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i80$i = 0, $$06$i = 0.0, $$1$i = 0.0, $$1$lcssa$i$i = 0, $$1$lcssa$i113$i = 0, $$113$i = 0, $$12$i = 0, $$12$i$i = 0, $$12$i111$i = 0, $$12$i120$i = 0, $$12$i135$i = 0, $$12$i88$i = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$2$us160$i = 0.0, $$20$i = 0, $$20$us$i = 0, $$22$i = 0.0, $$24$i = 0, $$26$i = 0, $$29$i = 0, $$3$i = 0.0, $$310$i = 0, $$32$i = 0, $$4$i = 0.0, $$411$lcssa$i = 0, $$411176$i = 0, $$5194$i = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us320$i = 0, $$a$3322$i = 0, $$fl$4 = 0, $$lcssa94 = 0, $$not$i = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr147$i = 0, $$pre312$i = 0, $$sink = 0, $$z$4$us$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1001 = 0, $1003 = 0, $1006 = 0, $1007 = 0, $1011 = 0, $1013 = 0, $1016 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1025 = 0, $1027 = 0, $103 = 0, $1030 = 0, $1034 = 0, $1035 = 0, $1039 = 0.0, $1040 = 0.0, $1048 = 0, $1048$phi = 0, $1049 = 0, $1049$phi = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $1060 = 0, $1061 = 0, $11 = 0, $12 = 0, $124 = 0, $125 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $134 = 0, $135 = 0, $137 = 0, $139 = 0, $14 = 0, $141 = 0, $142 = 0, $147 = 0, $15 = 0, $150 = 0, $152 = 0, $157 = 0, $158 = 0, $162 = 0, $164 = 0, $166 = 0, $169 = 0, $171 = 0, $178 = 0, $180 = 0, $187 = 0, $189 = 0.0, $193 = 0.0, $194 = 0, $196 = 0, $197 = 0, $198 = 0, $2 = 0, $205 = 0, $206 = 0, $209 = 0, $21 = 0, $217 = 0, $22 = 0, $224 = 0, $225 = 0, $228 = 0, $231 = 0, $238 = 0, $24 = 0, $248 = 0, $25 = 0, $251 = 0, $253 = 0, $256 = 0, $257 = 0, $268 = 0, $27 = 0, $273 = 0, $275 = 0, $276 = 0, $278 = 0, $283 = 0, $284 = 0, $285 = 0, $3 = 0, $30 = 0, $301 = 0, $307 = 0, $31 = 0, $310 = 0, $311 = 0, $316 = 0, $324 = 0, $334 = 0, $335 = 0, $337 = 0, $342 = 0, $344 = 0, $345 = 0, $349 = 0, $352 = 0, $354 = 0, $36 = 0, $360 = 0, $364 = 0, $368 = 0.0, $373 = 0, $377 = 0, $38 = 0, $384 = 0, $388 = 0, $39 = 0, $391 = 0, $392 = 0, $396 = 0, $4 = 0, $400 = 0, $404 = 0, $407 = 0.0, $408 = 0, $411 = 0, $413 = 0, $416 = 0, $431 = 0, $434 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $45 = 0, $456 = 0, $46 = 0, $468 = 0, $471 = 0, $472 = 0, $478 = 0, $487 = 0, $493 = 0, $5 = 0, $50 = 0, $502 = 0, $508 = 0, $515 = 0, $517 = 0, $523 = 0, $541 = 0, $542 = 0, $544 = 0, $545 = 0, $549 = 0, $55 = 0, $552 = 0, $556 = 0, $558 = 0, $560 = 0, $562 = 0, $567 = 0, $570 = 0, $574 = 0, $579 = 0, $58 = 0, $581 = 0, $582 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $598 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $612 = 0, $614 = 0, $619 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $642 = 0, $644 = 0, $647 = 0, $65 = 0, $651 = 0, $652 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $683 = 0, $687 = 0, $688 = 0, $691 = 0, $696 = 0, $698 = 0, $7 = 0, $705 = 0, $706 = 0, $707 = 0, $710 = 0, $711 = 0, $712 = 0, $719 = 0, $729 = 0, $732 = 0, $734 = 0, $736 = 0, $742 = 0, $743 = 0, $746 = 0, $748 = 0, $750 = 0, $754 = 0, $767 = 0, $772 = 0, $781 = 0, $782 = 0, $786 = 0, $789 = 0, $792 = 0, $793 = 0, $795 = 0, $799 = 0, $8 = 0, $803 = 0, $804 = 0, $805 = 0, $821 = 0, $827 = 0, $837 = 0, $842 = 0, $843 = 0, $845 = 0, $846 = 0, $85 = 0, $850 = 0, $853 = 0, $857 = 0, $860 = 0, $865 = 0, $870 = 0, $881 = 0, $89 = 0, $890 = 0, $895 = 0, $9 = 0, $902 = 0, $908 = 0, $919 = 0, $92 = 0, $921 = 0, $924 = 0, $934 = 0, $939 = 0, $943 = 0, $947 = 0, $949 = 0, $95 = 0, $951 = 0, $953 = 0, $954 = 0, $958 = 0, $961 = 0, $965 = 0, $968 = 0, $972 = 0, $975 = 0, $979 = 0, $984 = 0, $986 = 0, $988 = 0, $989 = 0, $992 = 0, $996 = 0, $997 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1257$i = 0, $a$2 = 0, $a$2$i = 0, $a$3$lcssa$i = 0, $a$3245$i = 0, $a$3245$us$i = 0, $a$6$i = 0, $a$7$i = 0, $arglist_current = 0, $arglist_current12 = 0, $arglist_current15 = 0, $arglist_current18 = 0, $arglist_current21 = 0, $arglist_current24 = 0, $arglist_current27 = 0, $arglist_current3 = 0, $arglist_current30 = 0, $arglist_current33 = 0, $arglist_current36 = 0, $arglist_current39 = 0, $arglist_current42 = 0, $arglist_current45 = 0, $arglist_current48 = 0, $arglist_current51 = 0, $arglist_current54 = 0, $arglist_current57 = 0, $arglist_current6 = 0, $arglist_current60 = 0, $arglist_current63 = 0, $arglist_current9 = 0, $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0250$i = 0, $carry3$0239$i = 0, $carry3$0239$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $d$0251$i = 0, $d$1238$i = 0, $d$1238$us$i = 0, $d$2$a$3$i = 0, $d$2$lcssa$i = 0, $d$2220$i = 0, $d$3$i = 0, $d$4184$i = 0, $d$5175$i = 0, $d$6193$i = 0, $e$0233$i = 0, $e$1$i = 0, $e$2215$i = 0, $e$3$i = 0, $e$4$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1201$i = 0, $estr$2$i = 0, $fl$0102 = 0, $fl$0106 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0167 = 0, $i$0169 = 0, $i$0234$i = 0, $i$03$i = 0, $i$03$i23 = 0, $i$1$lcssa$i = 0, $i$1175 = 0, $i$1226$i = 0, $i$2216$i = 0, $i$291 = 0, $i$3210$i = 0, $i$390 = 0, $isdigittmp = 0, $isdigittmp11 = 0, $isdigittmp9 = 0, $j$0225$i = 0, $j$0227$i = 0, $j$1211$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$lcssa = 0, $l$1168 = 0, $l10n$0 = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$4296 = 0, $p$5 = 0, $pad$i = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$7$i = 0, $re$0$i = 0, $re$1166$i = 0, $round$0165$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0, $s$0$us159$i = 0, $s$1$i = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$us$i = 0, $s$1$us161$i = 0, $s1$0$i = 0, $s7$0181$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0170$i = 0, $s9$0$i = 0, $s9$1189$i = 0, $s9$2$i = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8100 = 0, $storemerge8105 = 0, $t$0 = 0, $t$1 = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $wc = 0, $ws$0170 = 0, $ws$1176 = 0, $y$03$i = 0, $y$03$i$i = 0, $y$03$i110$i = 0, $y$03$i119$i = 0, $y$03$i134$i = 0, $y$03$i87$i = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$095 = 0, $z$1$lcssa$i = 0, $z$1256$i = 0, $z$2 = 0, $z$2$i = 0, $z$2317$i = 0, $z$3$lcssa$i = 0, $z$3244$i = 0, $z$3244$us$i = 0, $z$4$i = 0, $z$4$us$i = 0, $z$5$i = 0, $z$6$i = 0, $z$7$$i = 0, $z$7$i = 0, label = 0, sp = 0, $438$looptemp = 0, $803$looptemp = 0, $283$looptemp = 0;
 sp = STACKTOP; //@line 10397
 STACKTOP = STACKTOP + 832 | 0; //@line 10398
 $big$i = sp + 16 | 0; //@line 10399
 $e2$i = sp + 8 | 0; //@line 10400
 $buf$i = sp + 536 | 0; //@line 10401
 $0 = $buf$i; //@line 10402
 $ebuf0$i = sp + 816 | 0; //@line 10403
 $pad$i = sp + 560 | 0; //@line 10404
 $buf = sp + 496 | 0; //@line 10405
 $wc = sp; //@line 10406
 $mb = sp + 828 | 0; //@line 10407
 $1 = ($f | 0) != 0; //@line 10408
 $2 = $buf + 40 | 0; //@line 10409
 $3 = $2; //@line 10410
 $4 = $buf + 39 | 0; //@line 10411
 $5 = $wc + 4 | 0; //@line 10412
 $6 = $ebuf0$i + 12 | 0; //@line 10413
 $7 = $ebuf0$i + 11 | 0; //@line 10414
 $8 = $6; //@line 10415
 $9 = $8 - $0 | 0; //@line 10416
 $10 = -2 - $0 | 0; //@line 10417
 $11 = $8 + 2 | 0; //@line 10418
 $12 = $big$i + 264 | 0; //@line 10419
 $13 = $buf$i + 9 | 0; //@line 10420
 $14 = $13; //@line 10421
 $15 = $buf$i + 8 | 0; //@line 10422
 $1048 = 0; //@line 10423
 $1049 = 0; //@line 10423
 $22 = $fmt; //@line 10423
 $cnt$0 = 0; //@line 10423
 $l$0 = 0; //@line 10423
 $l10n$0 = 0; //@line 10423
 L1 : while (1) {
  do {
   if (($cnt$0 | 0) > -1) {
    if (($l$0 | 0) > (2147483647 - $cnt$0 | 0)) {
     HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 10432
     $cnt$1 = -1; //@line 10433
     break;
    } else {
     $cnt$1 = $l$0 + $cnt$0 | 0; //@line 10437
     break;
    }
   } else {
    $cnt$1 = $cnt$0; //@line 10441
   }
  } while (0);
  $21 = HEAP8[$22 >> 0] | 0; //@line 10444
  if ($21 << 24 >> 24 == 0) {
   label = 339; //@line 10447
   break;
  } else {
   $1050 = $21; //@line 10450
   $25 = $22; //@line 10450
  }
  while (1) {
   if ($1050 << 24 >> 24 == 37) {
    $27 = $25; //@line 10454
    $z$095 = $25; //@line 10454
    label = 9; //@line 10455
    break;
   } else if ($1050 << 24 >> 24 == 0) {
    $$lcssa94 = $25; //@line 10458
    $z$0$lcssa = $25; //@line 10458
    break;
   }
   $24 = $25 + 1 | 0; //@line 10461
   $1050 = HEAP8[$24 >> 0] | 0; //@line 10463
   $25 = $24; //@line 10463
  }
  L12 : do {
   if ((label | 0) == 9) {
    while (1) {
     label = 0; //@line 10468
     if ((HEAP8[$27 + 1 >> 0] | 0) != 37) {
      $$lcssa94 = $27; //@line 10473
      $z$0$lcssa = $z$095; //@line 10473
      break L12;
     }
     $30 = $z$095 + 1 | 0; //@line 10476
     $31 = $27 + 2 | 0; //@line 10477
     if ((HEAP8[$31 >> 0] | 0) == 37) {
      $27 = $31; //@line 10481
      $z$095 = $30; //@line 10481
      label = 9; //@line 10482
     } else {
      $$lcssa94 = $31; //@line 10484
      $z$0$lcssa = $30; //@line 10484
      break;
     }
    }
   }
  } while (0);
  $36 = $z$0$lcssa - $22 | 0; //@line 10492
  if ($1) {
   ___fwritex($22, $36, $f) | 0; //@line 10494
  }
  if (($z$0$lcssa | 0) != ($22 | 0)) {
   $1049$phi = $1049; //@line 10498
   $1048$phi = $1048; //@line 10498
   $22 = $$lcssa94; //@line 10498
   $cnt$0 = $cnt$1; //@line 10498
   $l$0 = $36; //@line 10498
   $1049 = $1049$phi; //@line 10498
   $1048 = $1048$phi; //@line 10498
   continue;
  }
  $38 = $$lcssa94 + 1 | 0; //@line 10501
  $39 = HEAP8[$38 >> 0] | 0; //@line 10502
  $isdigittmp = ($39 << 24 >> 24) + -48 | 0; //@line 10504
  if ($isdigittmp >>> 0 < 10) {
   if ((HEAP8[$$lcssa94 + 2 >> 0] | 0) == 36) {
    $44 = $$lcssa94 + 3 | 0; //@line 10511
    $46 = HEAP8[$44 >> 0] | 0; //@line 10513
    $argpos$0 = $isdigittmp; //@line 10513
    $l10n$1 = 1; //@line 10513
    $storemerge = $44; //@line 10513
   } else {
    $46 = $39; //@line 10515
    $argpos$0 = -1; //@line 10515
    $l10n$1 = $l10n$0; //@line 10515
    $storemerge = $38; //@line 10515
   }
  } else {
   $46 = $39; //@line 10518
   $argpos$0 = -1; //@line 10518
   $l10n$1 = $l10n$0; //@line 10518
   $storemerge = $38; //@line 10518
  }
  $45 = $46 << 24 >> 24; //@line 10520
  L25 : do {
   if (($45 + -32 | 0) >>> 0 < 32) {
    $50 = $45; //@line 10525
    $55 = $46; //@line 10525
    $fl$0106 = 0; //@line 10525
    $storemerge8105 = $storemerge; //@line 10525
    while (1) {
     if ((1 << $50 + -32 & 75913 | 0) == 0) {
      $65 = $55; //@line 10532
      $fl$0102 = $fl$0106; //@line 10532
      $storemerge8100 = $storemerge8105; //@line 10532
      break L25;
     }
     $58 = 1 << ($55 << 24 >> 24) + -32 | $fl$0106; //@line 10538
     $59 = $storemerge8105 + 1 | 0; //@line 10539
     $60 = HEAP8[$59 >> 0] | 0; //@line 10540
     $50 = $60 << 24 >> 24; //@line 10541
     if (!(($50 + -32 | 0) >>> 0 < 32)) {
      $65 = $60; //@line 10547
      $fl$0102 = $58; //@line 10547
      $storemerge8100 = $59; //@line 10547
      break;
     } else {
      $55 = $60; //@line 10545
      $fl$0106 = $58; //@line 10545
      $storemerge8105 = $59; //@line 10545
     }
    }
   } else {
    $65 = $46; //@line 10552
    $fl$0102 = 0; //@line 10552
    $storemerge8100 = $storemerge; //@line 10552
   }
  } while (0);
  do {
   if ($65 << 24 >> 24 == 42) {
    $66 = $storemerge8100 + 1 | 0; //@line 10558
    $isdigittmp11 = (HEAP8[$66 >> 0] | 0) + -48 | 0; //@line 10561
    if ($isdigittmp11 >>> 0 < 10) {
     if ((HEAP8[$storemerge8100 + 2 >> 0] | 0) == 36) {
      HEAP32[$nl_type + ($isdigittmp11 << 2) >> 2] = 10; //@line 10569
      $l10n$2 = 1; //@line 10581
      $storemerge13 = $storemerge8100 + 3 | 0; //@line 10581
      $w$0 = HEAP32[$nl_arg + ((HEAP8[$66 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 10581
     } else {
      label = 24; //@line 10583
     }
    } else {
     label = 24; //@line 10586
    }
    if ((label | 0) == 24) {
     label = 0; //@line 10589
     if (($l10n$1 | 0) != 0) {
      $$0 = -1; //@line 10592
      label = 357; //@line 10593
      break L1;
     }
     if (!$1) {
      $100 = $66; //@line 10597
      $fl$1 = $fl$0102; //@line 10597
      $l10n$3 = 0; //@line 10597
      $w$1 = 0; //@line 10597
      break;
     }
     $arglist_current = HEAP32[$ap >> 2] | 0; //@line 10600
     $85 = HEAP32[$arglist_current >> 2] | 0; //@line 10601
     HEAP32[$ap >> 2] = $arglist_current + 4; //@line 10603
     $l10n$2 = 0; //@line 10604
     $storemerge13 = $66; //@line 10604
     $w$0 = $85; //@line 10604
    }
    if (($w$0 | 0) < 0) {
     $100 = $storemerge13; //@line 10610
     $fl$1 = $fl$0102 | 8192; //@line 10610
     $l10n$3 = $l10n$2; //@line 10610
     $w$1 = 0 - $w$0 | 0; //@line 10610
    } else {
     $100 = $storemerge13; //@line 10612
     $fl$1 = $fl$0102; //@line 10612
     $l10n$3 = $l10n$2; //@line 10612
     $w$1 = $w$0; //@line 10612
    }
   } else {
    $89 = $65 << 24 >> 24; //@line 10615
    if (($89 + -48 | 0) >>> 0 < 10) {
     $92 = $89; //@line 10619
     $95 = $storemerge8100; //@line 10619
     $i$03$i = 0; //@line 10619
     do {
      $i$03$i = $92 + -48 + ($i$03$i * 10 | 0) | 0; //@line 10623
      $95 = $95 + 1 | 0; //@line 10624
      $92 = HEAP8[$95 >> 0] | 0; //@line 10626
     } while (($92 + -48 | 0) >>> 0 < 10);
     if (($i$03$i | 0) < 0) {
      $$0 = -1; //@line 10637
      label = 357; //@line 10638
      break L1;
     } else {
      $100 = $95; //@line 10641
      $fl$1 = $fl$0102; //@line 10641
      $l10n$3 = $l10n$1; //@line 10641
      $w$1 = $i$03$i; //@line 10641
     }
    } else {
     $100 = $storemerge8100; //@line 10644
     $fl$1 = $fl$0102; //@line 10644
     $l10n$3 = $l10n$1; //@line 10644
     $w$1 = 0; //@line 10644
    }
   }
  } while (0);
  L46 : do {
   if ((HEAP8[$100 >> 0] | 0) == 46) {
    $102 = $100 + 1 | 0; //@line 10652
    $103 = HEAP8[$102 >> 0] | 0; //@line 10653
    if (!($103 << 24 >> 24 == 42)) {
     $125 = $103 << 24 >> 24; //@line 10656
     if (($125 + -48 | 0) >>> 0 < 10) {
      $128 = $125; //@line 10660
      $131 = $102; //@line 10660
      $i$03$i23 = 0; //@line 10660
     } else {
      $1051 = $102; //@line 10662
      $p$0 = 0; //@line 10662
      break;
     }
     while (1) {
      $129 = $128 + -48 + ($i$03$i23 * 10 | 0) | 0; //@line 10668
      $130 = $131 + 1 | 0; //@line 10669
      $128 = HEAP8[$130 >> 0] | 0; //@line 10671
      if (!(($128 + -48 | 0) >>> 0 < 10)) {
       $1051 = $130; //@line 10677
       $p$0 = $129; //@line 10677
       break L46;
      } else {
       $131 = $130; //@line 10675
       $i$03$i23 = $129; //@line 10675
      }
     }
    }
    $105 = $100 + 2 | 0; //@line 10682
    $isdigittmp9 = (HEAP8[$105 >> 0] | 0) + -48 | 0; //@line 10685
    if ($isdigittmp9 >>> 0 < 10) {
     if ((HEAP8[$100 + 3 >> 0] | 0) == 36) {
      HEAP32[$nl_type + ($isdigittmp9 << 2) >> 2] = 10; //@line 10693
      $1051 = $100 + 4 | 0; //@line 10705
      $p$0 = HEAP32[$nl_arg + ((HEAP8[$105 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 10705
      break;
     }
    }
    if (($l10n$3 | 0) != 0) {
     $$0 = -1; //@line 10711
     label = 357; //@line 10712
     break L1;
    }
    if ($1) {
     $arglist_current3 = HEAP32[$ap >> 2] | 0; //@line 10716
     $124 = HEAP32[$arglist_current3 >> 2] | 0; //@line 10717
     HEAP32[$ap >> 2] = $arglist_current3 + 4; //@line 10719
     $1051 = $105; //@line 10720
     $p$0 = $124; //@line 10720
    } else {
     $1051 = $105; //@line 10722
     $p$0 = 0; //@line 10722
    }
   } else {
    $1051 = $100; //@line 10725
    $p$0 = -1; //@line 10725
   }
  } while (0);
  $135 = $1051; //@line 10728
  $st$0 = 0; //@line 10728
  while (1) {
   $134 = HEAP8[$135 >> 0] | 0; //@line 10730
   $137 = ($134 << 24 >> 24) + -65 | 0; //@line 10732
   if ($137 >>> 0 > 57) {
    $$0 = -1; //@line 10735
    label = 357; //@line 10736
    break L1;
   }
   $139 = $135 + 1 | 0; //@line 10739
   $141 = HEAP8[1600 + ($st$0 * 58 | 0) + $137 >> 0] | 0; //@line 10741
   $142 = $141 & 255; //@line 10742
   if (($142 + -1 | 0) >>> 0 < 8) {
    $135 = $139; //@line 10746
    $st$0 = $142; //@line 10746
   } else {
    break;
   }
  }
  if ($141 << 24 >> 24 == 0) {
   $$0 = -1; //@line 10753
   label = 357; //@line 10754
   break;
  }
  $147 = ($argpos$0 | 0) > -1; //@line 10758
  L65 : do {
   if ($141 << 24 >> 24 == 19) {
    if ($147) {
     $$0 = -1; //@line 10762
     label = 357; //@line 10763
     break L1;
    }
    if ($1) {
     $198 = $134; //@line 10767
     $206 = $1049; //@line 10767
     $228 = $1048; //@line 10767
    } else {
     $1049$phi = $1049; //@line 10769
     $1048$phi = $1048; //@line 10769
     $22 = $139; //@line 10769
     $cnt$0 = $cnt$1; //@line 10769
     $l$0 = $36; //@line 10769
     $l10n$0 = $l10n$3; //@line 10769
     $1049 = $1049$phi; //@line 10769
     $1048 = $1048$phi; //@line 10769
     continue L1;
    }
   } else {
    L69 : do {
     if ($147) {
      HEAP32[$nl_type + ($argpos$0 << 2) >> 2] = $142; //@line 10776
      $150 = $nl_arg + ($argpos$0 << 3) | 0; //@line 10778
      $152 = HEAP32[$150 >> 2] | 0; //@line 10780
      $$sink = $152; //@line 10784
      $1052 = $152; //@line 10784
      $1053 = HEAP32[$150 + 4 >> 2] | 0; //@line 10784
      label = 64; //@line 10785
     } else {
      if (!$1) {
       $$0 = 0; //@line 10788
       label = 357; //@line 10789
       break L1;
      }
      if (($141 & 255) > 20) {
       $198 = $134; //@line 10794
       $206 = $1049; //@line 10794
       $228 = $1048; //@line 10794
       break L65;
      }
      do {
       switch ($142 | 0) {
       case 18:
        {
         $arglist_current33 = HEAP32[$ap >> 2] | 0; //@line 10800
         HEAP32[tempDoublePtr >> 2] = HEAP32[$arglist_current33 >> 2]; //@line 10801
         HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arglist_current33 + 4 >> 2]; //@line 10801
         $193 = +HEAPF64[tempDoublePtr >> 3]; //@line 10801
         HEAP32[$ap >> 2] = $arglist_current33 + 8; //@line 10803
         HEAPF64[tempDoublePtr >> 3] = $193; //@line 10804
         $194 = HEAP32[tempDoublePtr >> 2] | 0; //@line 10804
         $$sink = $194; //@line 10806
         $1052 = $194; //@line 10806
         $1053 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 10806
         label = 64; //@line 10807
         break L69;
         break;
        }
       case 14:
        {
         $arglist_current21 = HEAP32[$ap >> 2] | 0; //@line 10812
         $178 = HEAP32[$arglist_current21 >> 2] | 0; //@line 10813
         HEAP32[$ap >> 2] = $arglist_current21 + 4; //@line 10815
         $1054 = $178 & 65535; //@line 10818
         $1055 = 0; //@line 10818
         break L69;
         break;
        }
       case 13:
        {
         $arglist_current18 = HEAP32[$ap >> 2] | 0; //@line 10823
         $171 = HEAP32[$arglist_current18 >> 2] | 0; //@line 10824
         HEAP32[$ap >> 2] = $arglist_current18 + 4; //@line 10826
         $1054 = $171 << 16 >> 16; //@line 10834
         $1055 = ((($171 & 65535) << 16 >> 16 | 0) < 0) << 31 >> 31; //@line 10834
         break L69;
         break;
        }
       case 17:
        {
         $arglist_current30 = HEAP32[$ap >> 2] | 0; //@line 10839
         HEAP32[tempDoublePtr >> 2] = HEAP32[$arglist_current30 >> 2]; //@line 10840
         HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arglist_current30 + 4 >> 2]; //@line 10840
         $189 = +HEAPF64[tempDoublePtr >> 3]; //@line 10840
         HEAP32[$ap >> 2] = $arglist_current30 + 8; //@line 10842
         HEAPF64[tempDoublePtr >> 3] = $189; //@line 10843
         $1054 = HEAP32[tempDoublePtr >> 2] | 0; //@line 10846
         $1055 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 10846
         break L69;
         break;
        }
       case 12:
        {
         $arglist_current15 = HEAP32[$ap >> 2] | 0; //@line 10851
         $164 = $arglist_current15; //@line 10852
         $166 = HEAP32[$164 >> 2] | 0; //@line 10854
         $169 = HEAP32[$164 + 4 >> 2] | 0; //@line 10857
         HEAP32[$ap >> 2] = $arglist_current15 + 8; //@line 10859
         $1054 = $166; //@line 10861
         $1055 = $169; //@line 10861
         break L69;
         break;
        }
       case 10:
        {
         $arglist_current9 = HEAP32[$ap >> 2] | 0; //@line 10866
         $158 = HEAP32[$arglist_current9 >> 2] | 0; //@line 10867
         HEAP32[$ap >> 2] = $arglist_current9 + 4; //@line 10869
         $1054 = $158; //@line 10873
         $1055 = (($158 | 0) < 0) << 31 >> 31; //@line 10873
         break L69;
         break;
        }
       case 9:
        {
         $arglist_current6 = HEAP32[$ap >> 2] | 0; //@line 10878
         $157 = HEAP32[$arglist_current6 >> 2] | 0; //@line 10879
         HEAP32[$ap >> 2] = $arglist_current6 + 4; //@line 10881
         $1054 = $157; //@line 10882
         $1055 = $1048; //@line 10882
         break L69;
         break;
        }
       case 15:
        {
         $arglist_current24 = HEAP32[$ap >> 2] | 0; //@line 10887
         $180 = HEAP32[$arglist_current24 >> 2] | 0; //@line 10888
         HEAP32[$ap >> 2] = $arglist_current24 + 4; //@line 10890
         $1054 = $180 << 24 >> 24; //@line 10898
         $1055 = ((($180 & 255) << 24 >> 24 | 0) < 0) << 31 >> 31; //@line 10898
         break L69;
         break;
        }
       case 11:
        {
         $arglist_current12 = HEAP32[$ap >> 2] | 0; //@line 10903
         $162 = HEAP32[$arglist_current12 >> 2] | 0; //@line 10904
         HEAP32[$ap >> 2] = $arglist_current12 + 4; //@line 10906
         $1054 = $162; //@line 10908
         $1055 = 0; //@line 10908
         break L69;
         break;
        }
       case 16:
        {
         $arglist_current27 = HEAP32[$ap >> 2] | 0; //@line 10913
         $187 = HEAP32[$arglist_current27 >> 2] | 0; //@line 10914
         HEAP32[$ap >> 2] = $arglist_current27 + 4; //@line 10916
         $1054 = $187 & 255; //@line 10919
         $1055 = 0; //@line 10919
         break L69;
         break;
        }
       default:
        {
         $1054 = $1049; //@line 10924
         $1055 = $1048; //@line 10924
         break L69;
        }
       }
      } while (0);
     }
    } while (0);
    if ((label | 0) == 64) {
     label = 0; //@line 10932
     $196 = $$sink; //@line 10933
     if ($1) {
      $1054 = $196; //@line 10935
      $1055 = $1053; //@line 10935
     } else {
      $1048 = $1053; //@line 10937
      $1049 = $196; //@line 10937
      $22 = $139; //@line 10937
      $cnt$0 = $cnt$1; //@line 10937
      $l$0 = $36; //@line 10937
      $l10n$0 = $l10n$3; //@line 10937
      continue L1;
     }
    }
    $198 = HEAP8[$135 >> 0] | 0; //@line 10942
    $206 = $1054; //@line 10942
    $228 = $1055; //@line 10942
   }
  } while (0);
  $197 = $198 << 24 >> 24; //@line 10945
  if (($st$0 | 0) == 0) {
   $t$0 = $197; //@line 10948
  } else {
   $t$0 = ($197 & 15 | 0) == 3 ? $197 & -33 : $197; //@line 10954
  }
  $205 = $fl$1 & -65537; //@line 10958
  $fl$1$ = ($fl$1 & 8192 | 0) == 0 ? $fl$1 : $205; //@line 10959
  L92 : do {
   switch ($t$0 | 0) {
   case 110:
    {
     switch ($st$0 | 0) {
     case 0:
      {
       HEAP32[$206 >> 2] = $cnt$1; //@line 10965
       $1048 = $228; //@line 10966
       $1049 = $206; //@line 10966
       $22 = $139; //@line 10966
       $cnt$0 = $cnt$1; //@line 10966
       $l$0 = $36; //@line 10966
       $l10n$0 = $l10n$3; //@line 10966
       continue L1;
       break;
      }
     case 1:
      {
       HEAP32[$206 >> 2] = $cnt$1; //@line 10971
       $1048 = $228; //@line 10972
       $1049 = $206; //@line 10972
       $22 = $139; //@line 10972
       $cnt$0 = $cnt$1; //@line 10972
       $l$0 = $36; //@line 10972
       $l10n$0 = $l10n$3; //@line 10972
       continue L1;
       break;
      }
     case 2:
      {
       $209 = $206; //@line 10979
       HEAP32[$209 >> 2] = $cnt$1; //@line 10981
       HEAP32[$209 + 4 >> 2] = (($cnt$1 | 0) < 0) << 31 >> 31; //@line 10984
       $1048 = $228; //@line 10985
       $1049 = $206; //@line 10985
       $22 = $139; //@line 10985
       $cnt$0 = $cnt$1; //@line 10985
       $l$0 = $36; //@line 10985
       $l10n$0 = $l10n$3; //@line 10985
       continue L1;
       break;
      }
     case 3:
      {
       HEAP16[$206 >> 1] = $cnt$1; //@line 10991
       $1048 = $228; //@line 10992
       $1049 = $206; //@line 10992
       $22 = $139; //@line 10992
       $cnt$0 = $cnt$1; //@line 10992
       $l$0 = $36; //@line 10992
       $l10n$0 = $l10n$3; //@line 10992
       continue L1;
       break;
      }
     case 4:
      {
       HEAP8[$206 >> 0] = $cnt$1; //@line 10998
       $1048 = $228; //@line 10999
       $1049 = $206; //@line 10999
       $22 = $139; //@line 10999
       $cnt$0 = $cnt$1; //@line 10999
       $l$0 = $36; //@line 10999
       $l10n$0 = $l10n$3; //@line 10999
       continue L1;
       break;
      }
     case 6:
      {
       HEAP32[$206 >> 2] = $cnt$1; //@line 11004
       $1048 = $228; //@line 11005
       $1049 = $206; //@line 11005
       $22 = $139; //@line 11005
       $cnt$0 = $cnt$1; //@line 11005
       $l$0 = $36; //@line 11005
       $l10n$0 = $l10n$3; //@line 11005
       continue L1;
       break;
      }
     case 7:
      {
       $217 = $206; //@line 11012
       HEAP32[$217 >> 2] = $cnt$1; //@line 11014
       HEAP32[$217 + 4 >> 2] = (($cnt$1 | 0) < 0) << 31 >> 31; //@line 11017
       $1048 = $228; //@line 11018
       $1049 = $206; //@line 11018
       $22 = $139; //@line 11018
       $cnt$0 = $cnt$1; //@line 11018
       $l$0 = $36; //@line 11018
       $l10n$0 = $l10n$3; //@line 11018
       continue L1;
       break;
      }
     default:
      {
       $1048 = $228; //@line 11023
       $1049 = $206; //@line 11023
       $22 = $139; //@line 11023
       $cnt$0 = $cnt$1; //@line 11023
       $l$0 = $36; //@line 11023
       $l10n$0 = $l10n$3; //@line 11023
       continue L1;
      }
     }
     break;
    }
   case 99:
    {
     HEAP8[$4 >> 0] = $206; //@line 11032
     $1056 = $228; //@line 11033
     $1057 = $206; //@line 11033
     $a$2 = $4; //@line 11033
     $fl$6 = $205; //@line 11033
     $p$5 = 1; //@line 11033
     $pl$2 = 0; //@line 11033
     $prefix$2 = 2064; //@line 11033
     $z$2 = $2; //@line 11033
     break;
    }
   case 109:
    {
     $a$1 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0; //@line 11040
     label = 100; //@line 11041
     break;
    }
   case 115:
    {
     $a$1 = ($206 | 0) == 0 ? 2080 : $206; //@line 11047
     label = 100; //@line 11048
     break;
    }
   case 67:
    {
     HEAP32[$wc >> 2] = $206; //@line 11053
     HEAP32[$5 >> 2] = 0; //@line 11054
     $1058 = $wc; //@line 11055
     $1059 = $wc; //@line 11055
     $p$4296 = -1; //@line 11055
     label = 105; //@line 11056
     break;
    }
   case 83:
    {
     if (($p$0 | 0) == 0) {
      $1060 = $206; //@line 11062
      $1061 = $206; //@line 11062
      $i$0167 = 0; //@line 11062
      label = 111; //@line 11063
     } else {
      $1058 = $206; //@line 11065
      $1059 = $206; //@line 11065
      $p$4296 = $p$0; //@line 11065
      label = 105; //@line 11066
     }
     break;
    }
   case 111:
    {
     $248 = $206; //@line 11071
     $251 = ($248 | 0) == 0 & ($228 | 0) == 0; //@line 11074
     if ($251) {
      $$0$lcssa$i44 = $2; //@line 11076
     } else {
      $$03$i41 = $2; //@line 11078
      $253 = $248; //@line 11078
      $257 = $228; //@line 11078
      while (1) {
       $256 = $$03$i41 + -1 | 0; //@line 11083
       HEAP8[$256 >> 0] = $253 & 7 | 48; //@line 11084
       $253 = _bitshift64Lshr($253 | 0, $257 | 0, 3) | 0; //@line 11085
       $257 = tempRet0; //@line 11086
       if (($253 | 0) == 0 & ($257 | 0) == 0) {
        $$0$lcssa$i44 = $256; //@line 11091
        break;
       } else {
        $$03$i41 = $256; //@line 11094
       }
      }
     }
     if (($fl$1$ & 8 | 0) == 0) {
      $307 = $206; //@line 11101
      $310 = $228; //@line 11101
      $a$0 = $$0$lcssa$i44; //@line 11101
      $fl$4 = $fl$1$; //@line 11101
      $p$2 = $p$0; //@line 11101
      $pl$1 = 0; //@line 11101
      $prefix$1 = 2064; //@line 11101
      label = 95; //@line 11102
     } else {
      $307 = $206; //@line 11107
      $310 = $228; //@line 11107
      $a$0 = $$0$lcssa$i44; //@line 11107
      $fl$4 = $fl$1$; //@line 11107
      $p$2 = $p$0; //@line 11107
      $pl$1 = $251 & 1 ^ 1; //@line 11107
      $prefix$1 = $251 ? 2064 : 2069 | 0; //@line 11107
      label = 95; //@line 11108
     }
     break;
    }
   case 117:
    {
     $276 = $206; //@line 11113
     $278 = $228; //@line 11113
     $pl$0 = 0; //@line 11113
     $prefix$0 = 2064; //@line 11113
     label = 90; //@line 11114
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     HEAP32[tempDoublePtr >> 2] = $206; //@line 11119
     HEAP32[tempDoublePtr + 4 >> 2] = $228; //@line 11119
     $368 = +HEAPF64[tempDoublePtr >> 3]; //@line 11119
     HEAP32[$e2$i >> 2] = 0; //@line 11120
     if (($228 | 0) < 0) {
      $$06$i = -$368; //@line 11124
      $pl$0$i = 1; //@line 11124
      $prefix$0$i = 2088; //@line 11124
     } else {
      if (($fl$1$ & 2048 | 0) == 0) {
       $373 = $fl$1$ & 1; //@line 11129
       $$06$i = $368; //@line 11132
       $pl$0$i = $373; //@line 11132
       $prefix$0$i = ($373 | 0) == 0 ? 2089 | 0 : 2094 | 0; //@line 11132
      } else {
       $$06$i = $368; //@line 11134
       $pl$0$i = 1; //@line 11134
       $prefix$0$i = 2091 | 0; //@line 11134
      }
     }
     HEAPF64[tempDoublePtr >> 3] = $$06$i; //@line 11137
     $377 = HEAP32[tempDoublePtr + 4 >> 2] & 2146435072; //@line 11139
     if (!($377 >>> 0 < 2146435072 | ($377 | 0) == 2146435072 & 0 < 0)) {
      $384 = ($t$0 & 32 | 0) != 0; //@line 11147
      if ($$06$i != $$06$i | 0.0 != 0.0) {
       $pl$1$i = 0; //@line 11152
       $s1$0$i = $384 ? 2128 : 2136; //@line 11152
      } else {
       $pl$1$i = $pl$0$i; //@line 11154
       $s1$0$i = $384 ? 2112 : 2120; //@line 11154
      }
      $388 = $pl$1$i + 3 | 0; //@line 11156
      $391 = ($388 | 0) < ($w$1 | 0); //@line 11159
      if (($fl$1$ & 8192 | 0) == 0 & $391) {
       $392 = $w$1 - $388 | 0; //@line 11162
       _memset($pad$i | 0, 32, ($392 >>> 0 > 256 ? 256 : $392) | 0) | 0; //@line 11165
       if ($392 >>> 0 > 255) {
        $$01$i37$i = $392; //@line 11168
        while (1) {
         ___fwritex($pad$i, 256, $f) | 0; //@line 11170
         $396 = $$01$i37$i + -256 | 0; //@line 11171
         if ($396 >>> 0 > 255) {
          $$01$i37$i = $396; //@line 11174
         } else {
          $$0$lcssa$i39$i = $396; //@line 11176
          break;
         }
        }
       } else {
        $$0$lcssa$i39$i = $392; //@line 11181
       }
       ___fwritex($pad$i, $$0$lcssa$i39$i, $f) | 0; //@line 11183
      }
      ___fwritex($prefix$0$i, $pl$1$i, $f) | 0; //@line 11185
      ___fwritex($s1$0$i, 3, $f) | 0; //@line 11186
      if (($fl$1$ & 73728 | 0) == 8192 & $391) {
       $400 = $w$1 - $388 | 0; //@line 11191
       _memset($pad$i | 0, 32, ($400 >>> 0 > 256 ? 256 : $400) | 0) | 0; //@line 11194
       if ($400 >>> 0 > 255) {
        $$01$i44$i = $400; //@line 11197
        while (1) {
         ___fwritex($pad$i, 256, $f) | 0; //@line 11199
         $404 = $$01$i44$i + -256 | 0; //@line 11200
         if ($404 >>> 0 > 255) {
          $$01$i44$i = $404; //@line 11203
         } else {
          $$0$lcssa$i46$i = $404; //@line 11205
          break;
         }
        }
       } else {
        $$0$lcssa$i46$i = $400; //@line 11210
       }
       ___fwritex($pad$i, $$0$lcssa$i46$i, $f) | 0; //@line 11212
      }
      $1048 = $228; //@line 11215
      $1049 = $206; //@line 11215
      $22 = $139; //@line 11215
      $cnt$0 = $cnt$1; //@line 11215
      $l$0 = $391 ? $w$1 : $388; //@line 11215
      $l10n$0 = $l10n$3; //@line 11215
      continue L1;
     }
     $407 = +_frexpl($$06$i, $e2$i) * 2.0; //@line 11219
     $408 = $407 != 0.0; //@line 11220
     if ($408) {
      HEAP32[$e2$i >> 2] = (HEAP32[$e2$i >> 2] | 0) + -1; //@line 11224
     }
     $411 = $t$0 | 32; //@line 11226
     if (($411 | 0) == 97) {
      $413 = $t$0 & 32; //@line 11229
      $prefix$0$$i = ($413 | 0) == 0 ? $prefix$0$i : $prefix$0$i + 9 | 0; //@line 11232
      $416 = $pl$0$i | 2; //@line 11233
      $re$0$i = $p$0 >>> 0 > 11 ? 0 : 12 - $p$0 | 0; //@line 11236
      do {
       if (($re$0$i | 0) == 0) {
        $$1$i = $407; //@line 11240
       } else {
        $re$1166$i = $re$0$i; //@line 11242
        $round$0165$i = 8.0; //@line 11242
        do {
         $re$1166$i = $re$1166$i + -1 | 0; //@line 11244
         $round$0165$i = $round$0165$i * 16.0; //@line 11245
        } while (($re$1166$i | 0) != 0);
        if ((HEAP8[$prefix$0$$i >> 0] | 0) == 45) {
         $$1$i = -($round$0165$i + (-$407 - $round$0165$i)); //@line 11260
         break;
        } else {
         $$1$i = $407 + $round$0165$i - $round$0165$i; //@line 11265
         break;
        }
       }
      } while (0);
      $431 = HEAP32[$e2$i >> 2] | 0; //@line 11270
      $434 = ($431 | 0) < 0 ? 0 - $431 | 0 : $431; //@line 11273
      if (($434 | 0) < 0) {
       $$05$i$i = $6; //@line 11278
       $438 = $434; //@line 11278
       $439 = (($434 | 0) < 0) << 31 >> 31; //@line 11278
       while (1) {
        $440 = ___uremdi3($438 | 0, $439 | 0, 10, 0) | 0; //@line 11280
        $$05$i$i = $$05$i$i + -1 | 0; //@line 11284
        HEAP8[$$05$i$i >> 0] = $440 | 48; //@line 11285
        $438$looptemp = $438;
        $438 = ___udivdi3($438 | 0, $439 | 0, 10, 0) | 0; //@line 11286
        if (!($439 >>> 0 > 9 | ($439 | 0) == 9 & $438$looptemp >>> 0 > 4294967295)) {
         break;
        } else {
         $439 = tempRet0; //@line 11294
        }
       }
       $$0$lcssa$i49$i = $$05$i$i; //@line 11299
       $$01$lcssa$off0$i$i = $438; //@line 11299
      } else {
       $$0$lcssa$i49$i = $6; //@line 11301
       $$01$lcssa$off0$i$i = $434; //@line 11301
      }
      if (($$01$lcssa$off0$i$i | 0) == 0) {
       $$1$lcssa$i$i = $$0$lcssa$i49$i; //@line 11305
      } else {
       $$12$i$i = $$0$lcssa$i49$i; //@line 11307
       $y$03$i$i = $$01$lcssa$off0$i$i; //@line 11307
       while (1) {
        $456 = $$12$i$i + -1 | 0; //@line 11312
        HEAP8[$456 >> 0] = ($y$03$i$i >>> 0) % 10 | 0 | 48; //@line 11313
        if ($y$03$i$i >>> 0 < 10) {
         $$1$lcssa$i$i = $456; //@line 11317
         break;
        } else {
         $$12$i$i = $456; //@line 11320
         $y$03$i$i = ($y$03$i$i >>> 0) / 10 | 0; //@line 11320
        }
       }
      }
      if (($$1$lcssa$i$i | 0) == ($6 | 0)) {
       HEAP8[$7 >> 0] = 48; //@line 11326
       $estr$0$i = $7; //@line 11327
      } else {
       $estr$0$i = $$1$lcssa$i$i; //@line 11329
      }
      HEAP8[$estr$0$i + -1 >> 0] = (HEAP32[$e2$i >> 2] >> 31 & 2) + 43; //@line 11337
      $468 = $estr$0$i + -2 | 0; //@line 11340
      HEAP8[$468 >> 0] = $t$0 + 15; //@line 11341
      $471 = ($fl$1$ & 8 | 0) == 0; //@line 11344
      if (($p$0 | 0) > 0) {
       if ($471) {
        $$2$us$us$i = $$1$i; //@line 11347
        $s$0$us$us$i = $buf$i; //@line 11347
        while (1) {
         $472 = ~~$$2$us$us$i; //@line 11349
         $478 = $s$0$us$us$i + 1 | 0; //@line 11355
         HEAP8[$s$0$us$us$i >> 0] = HEAPU8[2144 + $472 >> 0] | $413; //@line 11356
         $$2$us$us$i = ($$2$us$us$i - +($472 | 0)) * 16.0; //@line 11359
         if (($478 - $0 | 0) == 1) {
          HEAP8[$478 >> 0] = 46; //@line 11365
          $s$1$us$us$i = $s$0$us$us$i + 2 | 0; //@line 11366
         } else {
          $s$1$us$us$i = $478; //@line 11368
         }
         if (!($$2$us$us$i != 0.0)) {
          $s$1$lcssa$i = $s$1$us$us$i; //@line 11374
          break;
         } else {
          $s$0$us$us$i = $s$1$us$us$i; //@line 11372
         }
        }
       } else {
        $$2$us$i = $$1$i; //@line 11379
        $s$0$us$i = $buf$i; //@line 11379
        while (1) {
         $487 = ~~$$2$us$i; //@line 11381
         $493 = $s$0$us$i + 1 | 0; //@line 11387
         HEAP8[$s$0$us$i >> 0] = HEAPU8[2144 + $487 >> 0] | $413; //@line 11388
         $$2$us$i = ($$2$us$i - +($487 | 0)) * 16.0; //@line 11391
         if (($493 - $0 | 0) == 1) {
          HEAP8[$493 >> 0] = 46; //@line 11397
          $s$1$us$i = $s$0$us$i + 2 | 0; //@line 11398
         } else {
          $s$1$us$i = $493; //@line 11400
         }
         if (!($$2$us$i != 0.0)) {
          $s$1$lcssa$i = $s$1$us$i; //@line 11406
          break;
         } else {
          $s$0$us$i = $s$1$us$i; //@line 11404
         }
        }
       }
      } else {
       if ($471) {
        $$2$us160$i = $$1$i; //@line 11413
        $s$0$us159$i = $buf$i; //@line 11413
        while (1) {
         $502 = ~~$$2$us160$i; //@line 11415
         $508 = $s$0$us159$i + 1 | 0; //@line 11421
         HEAP8[$s$0$us159$i >> 0] = HEAPU8[2144 + $502 >> 0] | $413; //@line 11422
         $$2$us160$i = ($$2$us160$i - +($502 | 0)) * 16.0; //@line 11425
         $515 = $$2$us160$i != 0.0; //@line 11429
         if (($508 - $0 | 0) == 1 & $515) {
          HEAP8[$508 >> 0] = 46; //@line 11433
          $s$1$us161$i = $s$0$us159$i + 2 | 0; //@line 11434
         } else {
          $s$1$us161$i = $508; //@line 11436
         }
         if (!$515) {
          $s$1$lcssa$i = $s$1$us161$i; //@line 11441
          break;
         } else {
          $s$0$us159$i = $s$1$us161$i; //@line 11439
         }
        }
       } else {
        $$2$i = $$1$i; //@line 11446
        $s$0$i = $buf$i; //@line 11446
        while (1) {
         $517 = ~~$$2$i; //@line 11448
         $523 = $s$0$i + 1 | 0; //@line 11454
         HEAP8[$s$0$i >> 0] = HEAPU8[2144 + $517 >> 0] | $413; //@line 11455
         $$2$i = ($$2$i - +($517 | 0)) * 16.0; //@line 11458
         if (($523 - $0 | 0) == 1) {
          HEAP8[$523 >> 0] = 46; //@line 11464
          $s$1$i = $s$0$i + 2 | 0; //@line 11465
         } else {
          $s$1$i = $523; //@line 11467
         }
         if (!($$2$i != 0.0)) {
          $s$1$lcssa$i = $s$1$i; //@line 11473
          break;
         } else {
          $s$0$i = $s$1$i; //@line 11471
         }
        }
       }
      }
      $$pre312$i = $s$1$lcssa$i; //@line 11480
      do {
       if (($p$0 | 0) == 0) {
        label = 174; //@line 11483
       } else {
        if (($10 + $$pre312$i | 0) >= ($p$0 | 0)) {
         label = 174; //@line 11488
         break;
        }
        $l$0$i = $11 + $p$0 - $468 | 0; //@line 11494
       }
      } while (0);
      if ((label | 0) == 174) {
       label = 0; //@line 11498
       $l$0$i = $9 - $468 + $$pre312$i | 0; //@line 11502
      }
      $541 = $l$0$i + $416 | 0; //@line 11504
      $542 = $fl$1$ & 73728; //@line 11505
      $544 = ($541 | 0) < ($w$1 | 0); //@line 11507
      if (($542 | 0) == 0 & $544) {
       $545 = $w$1 - $541 | 0; //@line 11510
       _memset($pad$i | 0, 32, ($545 >>> 0 > 256 ? 256 : $545) | 0) | 0; //@line 11513
       if ($545 >>> 0 > 255) {
        $$01$i54$i = $545; //@line 11516
        while (1) {
         ___fwritex($pad$i, 256, $f) | 0; //@line 11518
         $549 = $$01$i54$i + -256 | 0; //@line 11519
         if ($549 >>> 0 > 255) {
          $$01$i54$i = $549; //@line 11522
         } else {
          $$0$lcssa$i56$i = $549; //@line 11524
          break;
         }
        }
       } else {
        $$0$lcssa$i56$i = $545; //@line 11529
       }
       ___fwritex($pad$i, $$0$lcssa$i56$i, $f) | 0; //@line 11531
      }
      ___fwritex($prefix$0$$i, $416, $f) | 0; //@line 11533
      if (($542 | 0) == 65536 & $544) {
       $552 = $w$1 - $541 | 0; //@line 11537
       _memset($pad$i | 0, 48, ($552 >>> 0 > 256 ? 256 : $552) | 0) | 0; //@line 11540
       if ($552 >>> 0 > 255) {
        $$01$i61$i = $552; //@line 11543
        while (1) {
         ___fwritex($pad$i, 256, $f) | 0; //@line 11545
         $556 = $$01$i61$i + -256 | 0; //@line 11546
         if ($556 >>> 0 > 255) {
          $$01$i61$i = $556; //@line 11549
         } else {
          $$0$lcssa$i63$i = $556; //@line 11551
          break;
         }
        }
       } else {
        $$0$lcssa$i63$i = $552; //@line 11556
       }
       ___fwritex($pad$i, $$0$lcssa$i63$i, $f) | 0; //@line 11558
      }
      $558 = $$pre312$i - $0 | 0; //@line 11560
      ___fwritex($buf$i, $558, $f) | 0; //@line 11561
      $560 = $8 - $468 | 0; //@line 11563
      $562 = $l$0$i - $560 - $558 | 0; //@line 11565
      if (($562 | 0) > 0) {
       _memset($pad$i | 0, 48, ($562 >>> 0 > 256 ? 256 : $562) | 0) | 0; //@line 11570
       if ($562 >>> 0 > 255) {
        $$01$i67$i = $562; //@line 11573
        while (1) {
         ___fwritex($pad$i, 256, $f) | 0; //@line 11575
         $567 = $$01$i67$i + -256 | 0; //@line 11576
         if ($567 >>> 0 > 255) {
          $$01$i67$i = $567; //@line 11579
         } else {
          $$0$lcssa$i69$i = $567; //@line 11581
          break;
         }
        }
       } else {
        $$0$lcssa$i69$i = $562; //@line 11586
       }
       ___fwritex($pad$i, $$0$lcssa$i69$i, $f) | 0; //@line 11588
      }
      ___fwritex($468, $560, $f) | 0; //@line 11590
      if (($542 | 0) == 8192 & $544) {
       $570 = $w$1 - $541 | 0; //@line 11594
       _memset($pad$i | 0, 32, ($570 >>> 0 > 256 ? 256 : $570) | 0) | 0; //@line 11597
       if ($570 >>> 0 > 255) {
        $$01$i74$i = $570; //@line 11600
        while (1) {
         ___fwritex($pad$i, 256, $f) | 0; //@line 11602
         $574 = $$01$i74$i + -256 | 0; //@line 11603
         if ($574 >>> 0 > 255) {
          $$01$i74$i = $574; //@line 11606
         } else {
          $$0$lcssa$i76$i = $574; //@line 11608
          break;
         }
        }
       } else {
        $$0$lcssa$i76$i = $570; //@line 11613
       }
       ___fwritex($pad$i, $$0$lcssa$i76$i, $f) | 0; //@line 11615
      }
      $1048 = $228; //@line 11618
      $1049 = $206; //@line 11618
      $22 = $139; //@line 11618
      $cnt$0 = $cnt$1; //@line 11618
      $l$0 = $544 ? $w$1 : $541; //@line 11618
      $l10n$0 = $l10n$3; //@line 11618
      continue L1;
     }
     $$p$i = ($p$0 | 0) < 0 ? 6 : $p$0; //@line 11622
     if ($408) {
      $579 = (HEAP32[$e2$i >> 2] | 0) + -28 | 0; //@line 11626
      HEAP32[$e2$i >> 2] = $579; //@line 11627
      $$3$i = $407 * 268435456.0; //@line 11628
      $581 = $579; //@line 11628
     } else {
      $$3$i = $407; //@line 11631
      $581 = HEAP32[$e2$i >> 2] | 0; //@line 11631
     }
     $$32$i = ($581 | 0) < 0 ? $big$i : $12; //@line 11634
     $$4$i = $$3$i; //@line 11635
     $z$0$i = $$32$i; //@line 11635
     do {
      $582 = ~~$$4$i >>> 0; //@line 11637
      HEAP32[$z$0$i >> 2] = $582; //@line 11638
      $z$0$i = $z$0$i + 4 | 0; //@line 11639
      $$4$i = ($$4$i - +($582 >>> 0)) * 1.0e9; //@line 11642
     } while ($$4$i != 0.0);
     $$pr$i = HEAP32[$e2$i >> 2] | 0; //@line 11650
     if (($$pr$i | 0) > 0) {
      $590 = $$pr$i; //@line 11653
      $a$1257$i = $$32$i; //@line 11653
      $z$1256$i = $z$0$i; //@line 11653
      while (1) {
       $591 = ($590 | 0) > 29 ? 29 : $590; //@line 11656
       $592 = $z$1256$i + -4 | 0; //@line 11657
       do {
        if ($592 >>> 0 < $a$1257$i >>> 0) {
         $a$2$i = $a$1257$i; //@line 11666
         $z$2317$i = (HEAP32[$592 >> 2] | 0) == 0 & $z$1256$i >>> 0 > $a$1257$i >>> 0 ? $592 : $z$1256$i; //@line 11666
        } else {
         $carry$0250$i = 0; //@line 11668
         $d$0251$i = $592; //@line 11668
         do {
          $598 = _bitshift64Shl(HEAP32[$d$0251$i >> 2] | 0, 0, $591 | 0) | 0; //@line 11671
          $600 = _i64Add($598 | 0, tempRet0 | 0, $carry$0250$i | 0, 0) | 0; //@line 11673
          $601 = tempRet0; //@line 11674
          $602 = ___uremdi3($600 | 0, $601 | 0, 1e9, 0) | 0; //@line 11675
          HEAP32[$d$0251$i >> 2] = $602; //@line 11677
          $carry$0250$i = ___udivdi3($600 | 0, $601 | 0, 1e9, 0) | 0; //@line 11678
          $d$0251$i = $d$0251$i + -4 | 0; //@line 11680
         } while (!($d$0251$i >>> 0 < $a$1257$i >>> 0));
         $z$2$i = (HEAP32[$592 >> 2] | 0) == 0 & $z$1256$i >>> 0 > $a$1257$i >>> 0 ? $592 : $z$1256$i; //@line 11692
         if (($carry$0250$i | 0) == 0) {
          $a$2$i = $a$1257$i; //@line 11695
          $z$2317$i = $z$2$i; //@line 11695
          break;
         }
         $612 = $a$1257$i + -4 | 0; //@line 11698
         HEAP32[$612 >> 2] = $carry$0250$i; //@line 11699
         $a$2$i = $612; //@line 11700
         $z$2317$i = $z$2$i; //@line 11700
        }
       } while (0);
       $614 = (HEAP32[$e2$i >> 2] | 0) - $591 | 0; //@line 11704
       HEAP32[$e2$i >> 2] = $614; //@line 11705
       if (($614 | 0) > 0) {
        $590 = $614; //@line 11708
        $a$1257$i = $a$2$i; //@line 11708
        $z$1256$i = $z$2317$i; //@line 11708
       } else {
        $$pr147$i = $614; //@line 11710
        $a$1$lcssa$i = $a$2$i; //@line 11710
        $z$1$lcssa$i = $z$2317$i; //@line 11710
        break;
       }
      }
     } else {
      $$pr147$i = $$pr$i; //@line 11715
      $a$1$lcssa$i = $$32$i; //@line 11715
      $z$1$lcssa$i = $z$0$i; //@line 11715
     }
     L245 : do {
      if (($$pr147$i | 0) < 0) {
       $619 = (($$p$i | 0) / 9 | 0) + 2 | 0; //@line 11722
       if (($411 | 0) == 102) {
        $620 = $$32$i; //@line 11724
        $621 = $$32$i + ($619 << 2) | 0; //@line 11725
        $623 = $$pr147$i; //@line 11726
        $a$3245$us$i = $a$1$lcssa$i; //@line 11726
        $z$3244$us$i = $z$1$lcssa$i; //@line 11726
        while (1) {
         $622 = 0 - $623 | 0; //@line 11728
         $$20$us$i = ($622 | 0) > 9 ? 9 : $622; //@line 11730
         do {
          if ($a$3245$us$i >>> 0 < $z$3244$us$i >>> 0) {
           $644 = (1 << $$20$us$i) + -1 | 0; //@line 11735
           $647 = 1e9 >>> $$20$us$i; //@line 11736
           $carry3$0239$us$i = 0; //@line 11737
           $d$1238$us$i = $a$3245$us$i; //@line 11737
           do {
            $642 = HEAP32[$d$1238$us$i >> 2] | 0; //@line 11739
            HEAP32[$d$1238$us$i >> 2] = ($642 >>> $$20$us$i) + $carry3$0239$us$i; //@line 11743
            $carry3$0239$us$i = Math_imul($642 & $644, $647) | 0; //@line 11744
            $d$1238$us$i = $d$1238$us$i + 4 | 0; //@line 11745
           } while ($d$1238$us$i >>> 0 < $z$3244$us$i >>> 0);
           $$a$3$us$i = (HEAP32[$a$3245$us$i >> 2] | 0) == 0 ? $a$3245$us$i + 4 | 0 : $a$3245$us$i; //@line 11756
           if (($carry3$0239$us$i | 0) == 0) {
            $$a$3$us320$i = $$a$3$us$i; //@line 11759
            $z$4$us$i = $z$3244$us$i; //@line 11759
            break;
           }
           HEAP32[$z$3244$us$i >> 2] = $carry3$0239$us$i; //@line 11763
           $$a$3$us320$i = $$a$3$us$i; //@line 11764
           $z$4$us$i = $z$3244$us$i + 4 | 0; //@line 11764
          } else {
           $$a$3$us320$i = (HEAP32[$a$3245$us$i >> 2] | 0) == 0 ? $a$3245$us$i + 4 | 0 : $a$3245$us$i; //@line 11770
           $z$4$us$i = $z$3244$us$i; //@line 11770
          }
         } while (0);
         $$z$4$us$i = ($z$4$us$i - $620 >> 2 | 0) > ($619 | 0) ? $621 : $z$4$us$i; //@line 11777
         $623 = (HEAP32[$e2$i >> 2] | 0) + $$20$us$i | 0; //@line 11779
         HEAP32[$e2$i >> 2] = $623; //@line 11780
         if (($623 | 0) >= 0) {
          $a$3$lcssa$i = $$a$3$us320$i; //@line 11785
          $z$3$lcssa$i = $$z$4$us$i; //@line 11785
          break L245;
         } else {
          $a$3245$us$i = $$a$3$us320$i; //@line 11783
          $z$3244$us$i = $$z$4$us$i; //@line 11783
         }
        }
       } else {
        $652 = $$pr147$i; //@line 11790
        $a$3245$i = $a$1$lcssa$i; //@line 11790
        $z$3244$i = $z$1$lcssa$i; //@line 11790
       }
       while (1) {
        $651 = 0 - $652 | 0; //@line 11793
        $$20$i = ($651 | 0) > 9 ? 9 : $651; //@line 11795
        do {
         if ($a$3245$i >>> 0 < $z$3244$i >>> 0) {
          $659 = (1 << $$20$i) + -1 | 0; //@line 11800
          $660 = 1e9 >>> $$20$i; //@line 11801
          $carry3$0239$i = 0; //@line 11802
          $d$1238$i = $a$3245$i; //@line 11802
          do {
           $661 = HEAP32[$d$1238$i >> 2] | 0; //@line 11804
           HEAP32[$d$1238$i >> 2] = ($661 >>> $$20$i) + $carry3$0239$i; //@line 11808
           $carry3$0239$i = Math_imul($661 & $659, $660) | 0; //@line 11809
           $d$1238$i = $d$1238$i + 4 | 0; //@line 11810
          } while ($d$1238$i >>> 0 < $z$3244$i >>> 0);
          $$a$3$i = (HEAP32[$a$3245$i >> 2] | 0) == 0 ? $a$3245$i + 4 | 0 : $a$3245$i; //@line 11821
          if (($carry3$0239$i | 0) == 0) {
           $$a$3322$i = $$a$3$i; //@line 11824
           $z$4$i = $z$3244$i; //@line 11824
           break;
          }
          HEAP32[$z$3244$i >> 2] = $carry3$0239$i; //@line 11828
          $$a$3322$i = $$a$3$i; //@line 11829
          $z$4$i = $z$3244$i + 4 | 0; //@line 11829
         } else {
          $$a$3322$i = (HEAP32[$a$3245$i >> 2] | 0) == 0 ? $a$3245$i + 4 | 0 : $a$3245$i; //@line 11835
          $z$4$i = $z$3244$i; //@line 11835
         }
        } while (0);
        if (($z$4$i - $$a$3322$i >> 2 | 0) > ($619 | 0)) {
         $z$5$i = $$a$3322$i + ($619 << 2) | 0; //@line 11845
        } else {
         $z$5$i = $z$4$i; //@line 11847
        }
        $652 = (HEAP32[$e2$i >> 2] | 0) + $$20$i | 0; //@line 11850
        HEAP32[$e2$i >> 2] = $652; //@line 11851
        if (($652 | 0) >= 0) {
         $a$3$lcssa$i = $$a$3322$i; //@line 11856
         $z$3$lcssa$i = $z$5$i; //@line 11856
         break;
        } else {
         $a$3245$i = $$a$3322$i; //@line 11854
         $z$3244$i = $z$5$i; //@line 11854
        }
       }
      } else {
       $a$3$lcssa$i = $a$1$lcssa$i; //@line 11861
       $z$3$lcssa$i = $z$1$lcssa$i; //@line 11861
      }
     } while (0);
     $683 = $$32$i; //@line 11865
     do {
      if ($a$3$lcssa$i >>> 0 < $z$3$lcssa$i >>> 0) {
       $687 = ($683 - $a$3$lcssa$i >> 2) * 9 | 0; //@line 11871
       $688 = HEAP32[$a$3$lcssa$i >> 2] | 0; //@line 11872
       if ($688 >>> 0 < 10) {
        $e$1$i = $687; //@line 11875
        break;
       } else {
        $e$0233$i = $687; //@line 11878
        $i$0234$i = 10; //@line 11878
       }
       while (1) {
        $i$0234$i = $i$0234$i * 10 | 0; //@line 11881
        $691 = $e$0233$i + 1 | 0; //@line 11882
        if ($688 >>> 0 < $i$0234$i >>> 0) {
         $e$1$i = $691; //@line 11885
         break;
        } else {
         $e$0233$i = $691; //@line 11888
        }
       }
      } else {
       $e$1$i = 0; //@line 11892
      }
     } while (0);
     $696 = ($411 | 0) == 103; //@line 11898
     $698 = $$p$i - (($411 | 0) != 102 ? $e$1$i : 0) + (($696 & ($$p$i | 0) != 0) << 31 >> 31) | 0; //@line 11902
     if (($698 | 0) < ((($z$3$lcssa$i - $683 >> 2) * 9 | 0) + -9 | 0)) {
      $705 = $698 + 9216 | 0; //@line 11910
      $706 = ($705 | 0) / 9 | 0; //@line 11911
      $707 = $$32$i + ($706 + -1023 << 2) | 0; //@line 11913
      $j$0225$i = (($705 | 0) % 9 | 0) + 1 | 0; //@line 11915
      if (($j$0225$i | 0) < 9) {
       $i$1226$i = 10; //@line 11918
       $j$0227$i = $j$0225$i; //@line 11918
       while (1) {
        $710 = $i$1226$i * 10 | 0; //@line 11920
        $j$0227$i = $j$0227$i + 1 | 0; //@line 11921
        if (($j$0227$i | 0) == 9) {
         $i$1$lcssa$i = $710; //@line 11924
         break;
        } else {
         $i$1226$i = $710; //@line 11927
        }
       }
      } else {
       $i$1$lcssa$i = 10; //@line 11931
      }
      $711 = HEAP32[$707 >> 2] | 0; //@line 11933
      $712 = ($711 >>> 0) % ($i$1$lcssa$i >>> 0) | 0; //@line 11934
      if (($712 | 0) == 0) {
       if (($$32$i + ($706 + -1022 << 2) | 0) == ($z$3$lcssa$i | 0)) {
        $a$6$i = $a$3$lcssa$i; //@line 11941
        $d$3$i = $707; //@line 11941
        $e$3$i = $e$1$i; //@line 11941
       } else {
        label = 232; //@line 11943
       }
      } else {
       label = 232; //@line 11946
      }
      do {
       if ((label | 0) == 232) {
        label = 0; //@line 11950
        $$22$i = ((($711 >>> 0) / ($i$1$lcssa$i >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0; //@line 11954
        $719 = ($i$1$lcssa$i | 0) / 2 | 0; //@line 11955
        do {
         if ($712 >>> 0 < $719 >>> 0) {
          $small$0$i = .5; //@line 11959
         } else {
          if (($712 | 0) == ($719 | 0)) {
           if (($$32$i + ($706 + -1022 << 2) | 0) == ($z$3$lcssa$i | 0)) {
            $small$0$i = 1.0; //@line 11967
            break;
           }
          }
          $small$0$i = 1.5; //@line 11971
         }
        } while (0);
        do {
         if (($pl$0$i | 0) == 0) {
          $round6$1$i = $$22$i; //@line 11977
          $small$1$i = $small$0$i; //@line 11977
         } else {
          if ((HEAP8[$prefix$0$i >> 0] | 0) != 45) {
           $round6$1$i = $$22$i; //@line 11982
           $small$1$i = $small$0$i; //@line 11982
           break;
          }
          $round6$1$i = $$22$i * -1.0; //@line 11987
          $small$1$i = $small$0$i * -1.0; //@line 11987
         }
        } while (0);
        $729 = $711 - $712 | 0; //@line 11990
        HEAP32[$707 >> 2] = $729; //@line 11991
        if (!($round6$1$i + $small$1$i != $round6$1$i)) {
         $a$6$i = $a$3$lcssa$i; //@line 11995
         $d$3$i = $707; //@line 11995
         $e$3$i = $e$1$i; //@line 11995
         break;
        }
        $732 = $729 + $i$1$lcssa$i | 0; //@line 11998
        HEAP32[$707 >> 2] = $732; //@line 11999
        if ($732 >>> 0 > 999999999) {
         $d$2220$i = $707; //@line 12002
         while (1) {
          $734 = $d$2220$i + -4 | 0; //@line 12004
          HEAP32[$d$2220$i >> 2] = 0; //@line 12005
          $736 = (HEAP32[$734 >> 2] | 0) + 1 | 0; //@line 12007
          HEAP32[$734 >> 2] = $736; //@line 12008
          if ($736 >>> 0 > 999999999) {
           $d$2220$i = $734; //@line 12011
          } else {
           $d$2$lcssa$i = $734; //@line 12013
           break;
          }
         }
        } else {
         $d$2$lcssa$i = $707; //@line 12018
        }
        $d$2$a$3$i = $d$2$lcssa$i >>> 0 < $a$3$lcssa$i >>> 0 ? $d$2$lcssa$i : $a$3$lcssa$i; //@line 12021
        $742 = ($683 - $d$2$a$3$i >> 2) * 9 | 0; //@line 12025
        $743 = HEAP32[$d$2$a$3$i >> 2] | 0; //@line 12026
        if ($743 >>> 0 < 10) {
         $a$6$i = $d$2$a$3$i; //@line 12029
         $d$3$i = $d$2$lcssa$i; //@line 12029
         $e$3$i = $742; //@line 12029
         break;
        } else {
         $e$2215$i = $742; //@line 12032
         $i$2216$i = 10; //@line 12032
        }
        while (1) {
         $i$2216$i = $i$2216$i * 10 | 0; //@line 12035
         $746 = $e$2215$i + 1 | 0; //@line 12036
         if ($743 >>> 0 < $i$2216$i >>> 0) {
          $a$6$i = $d$2$a$3$i; //@line 12039
          $d$3$i = $d$2$lcssa$i; //@line 12039
          $e$3$i = $746; //@line 12039
          break;
         } else {
          $e$2215$i = $746; //@line 12042
         }
        }
       }
      } while (0);
      $748 = $d$3$i + 4 | 0; //@line 12047
      $z$6$i = $z$3$lcssa$i >>> 0 > $748 >>> 0 ? $748 : $z$3$lcssa$i; //@line 12050
      while (1) {
       $750 = $z$6$i + -4 | 0; //@line 12052
       if ((HEAP32[$750 >> 2] | 0) == 0 & $z$6$i >>> 0 > $a$6$i >>> 0) {
        $z$6$i = $750; //@line 12058
       } else {
        $a$7$i = $a$6$i; //@line 12060
        $e$4$i = $e$3$i; //@line 12060
        $z$7$i = $z$6$i; //@line 12060
        break;
       }
      }
     } else {
      $a$7$i = $a$3$lcssa$i; //@line 12065
      $e$4$i = $e$1$i; //@line 12065
      $z$7$i = $z$3$lcssa$i; //@line 12065
     }
     $754 = 0 - $e$4$i | 0; //@line 12067
     do {
      if ($696) {
       $$$p$i = (($$p$i | 0) == 0 & 1) + $$p$i | 0; //@line 12072
       if (($$$p$i | 0) > ($e$4$i | 0) & ($e$4$i | 0) > -5) {
        $$012$i73 = $t$0 + -1 | 0; //@line 12080
        $$29$i = $$$p$i + -1 - $e$4$i | 0; //@line 12080
       } else {
        $$012$i73 = $t$0 + -2 | 0; //@line 12084
        $$29$i = $$$p$i + -1 | 0; //@line 12084
       }
       if (($fl$1$ & 8 | 0) != 0) {
        $$113$i = $$012$i73; //@line 12089
        $$310$i = $$29$i; //@line 12089
        break;
       }
       do {
        if ($z$7$i >>> 0 > $a$7$i >>> 0) {
         $767 = HEAP32[$z$7$i + -4 >> 2] | 0; //@line 12096
         if (($767 | 0) == 0) {
          $j$2$i = 9; //@line 12099
          break;
         }
         if ((($767 >>> 0) % 10 | 0 | 0) == 0) {
          $i$3210$i = 10; //@line 12105
          $j$1211$i = 0; //@line 12105
         } else {
          $j$2$i = 0; //@line 12107
          break;
         }
         while (1) {
          $i$3210$i = $i$3210$i * 10 | 0; //@line 12111
          $772 = $j$1211$i + 1 | 0; //@line 12112
          if ((($767 >>> 0) % ($i$3210$i >>> 0) | 0 | 0) != 0) {
           $j$2$i = $772; //@line 12118
           break;
          } else {
           $j$1211$i = $772; //@line 12116
          }
         }
        } else {
         $j$2$i = 9; //@line 12123
        }
       } while (0);
       $781 = (($z$7$i - $683 >> 2) * 9 | 0) + -9 | 0; //@line 12132
       if (($$012$i73 | 32 | 0) == 102) {
        $782 = $781 - $j$2$i | 0; //@line 12134
        $$24$i = ($782 | 0) < 0 ? 0 : $782; //@line 12136
        $$113$i = $$012$i73; //@line 12139
        $$310$i = ($$29$i | 0) < ($$24$i | 0) ? $$29$i : $$24$i; //@line 12139
        break;
       } else {
        $786 = $781 + $e$4$i - $j$2$i | 0; //@line 12143
        $$26$i = ($786 | 0) < 0 ? 0 : $786; //@line 12145
        $$113$i = $$012$i73; //@line 12148
        $$310$i = ($$29$i | 0) < ($$26$i | 0) ? $$29$i : $$26$i; //@line 12148
        break;
       }
      } else {
       $$113$i = $t$0; //@line 12152
       $$310$i = $$p$i; //@line 12152
      }
     } while (0);
     $789 = ($$310$i | 0) != 0; //@line 12155
     if ($789) {
      $793 = 1; //@line 12157
     } else {
      $793 = ($fl$1$ & 8 | 0) != 0; //@line 12161
     }
     $792 = $793 & 1; //@line 12163
     $795 = ($$113$i | 32 | 0) == 102; //@line 12165
     if ($795) {
      $$pn$i = ($e$4$i | 0) > 0 ? $e$4$i : 0; //@line 12169
      $estr$2$i = 0; //@line 12169
     } else {
      $799 = ($e$4$i | 0) < 0 ? $754 : $e$4$i; //@line 12172
      if (($799 | 0) < 0) {
       $$05$i80$i = $6; //@line 12177
       $803 = $799; //@line 12177
       $804 = (($799 | 0) < 0) << 31 >> 31; //@line 12177
       while (1) {
        $805 = ___uremdi3($803 | 0, $804 | 0, 10, 0) | 0; //@line 12179
        $$05$i80$i = $$05$i80$i + -1 | 0; //@line 12183
        HEAP8[$$05$i80$i >> 0] = $805 | 48; //@line 12184
        $803$looptemp = $803;
        $803 = ___udivdi3($803 | 0, $804 | 0, 10, 0) | 0; //@line 12185
        if (!($804 >>> 0 > 9 | ($804 | 0) == 9 & $803$looptemp >>> 0 > 4294967295)) {
         break;
        } else {
         $804 = tempRet0; //@line 12193
        }
       }
       $$0$lcssa$i85$i = $$05$i80$i; //@line 12198
       $$01$lcssa$off0$i86$i = $803; //@line 12198
      } else {
       $$0$lcssa$i85$i = $6; //@line 12200
       $$01$lcssa$off0$i86$i = $799; //@line 12200
      }
      if (($$01$lcssa$off0$i86$i | 0) == 0) {
       $estr$1$ph$i = $$0$lcssa$i85$i; //@line 12204
      } else {
       $$12$i88$i = $$0$lcssa$i85$i; //@line 12206
       $y$03$i87$i = $$01$lcssa$off0$i86$i; //@line 12206
       while (1) {
        $821 = $$12$i88$i + -1 | 0; //@line 12211
        HEAP8[$821 >> 0] = ($y$03$i87$i >>> 0) % 10 | 0 | 48; //@line 12212
        if ($y$03$i87$i >>> 0 < 10) {
         $estr$1$ph$i = $821; //@line 12216
         break;
        } else {
         $$12$i88$i = $821; //@line 12219
         $y$03$i87$i = ($y$03$i87$i >>> 0) / 10 | 0; //@line 12219
        }
       }
      }
      if (($8 - $estr$1$ph$i | 0) < 2) {
       $estr$1201$i = $estr$1$ph$i; //@line 12227
       while (1) {
        $827 = $estr$1201$i + -1 | 0; //@line 12229
        HEAP8[$827 >> 0] = 48; //@line 12230
        if (($8 - $827 | 0) < 2) {
         $estr$1201$i = $827; //@line 12235
        } else {
         $estr$1$lcssa$i = $827; //@line 12237
         break;
        }
       }
      } else {
       $estr$1$lcssa$i = $estr$1$ph$i; //@line 12242
      }
      HEAP8[$estr$1$lcssa$i + -1 >> 0] = ($e$4$i >> 31 & 2) + 43; //@line 12249
      $837 = $estr$1$lcssa$i + -2 | 0; //@line 12251
      HEAP8[$837 >> 0] = $$113$i; //@line 12252
      $$pn$i = $8 - $837 | 0; //@line 12255
      $estr$2$i = $837; //@line 12255
     }
     $842 = $pl$0$i + 1 + $$310$i + $792 + $$pn$i | 0; //@line 12260
     $843 = $fl$1$ & 73728; //@line 12261
     $845 = ($842 | 0) < ($w$1 | 0); //@line 12263
     if (($843 | 0) == 0 & $845) {
      $846 = $w$1 - $842 | 0; //@line 12266
      _memset($pad$i | 0, 32, ($846 >>> 0 > 256 ? 256 : $846) | 0) | 0; //@line 12269
      if ($846 >>> 0 > 255) {
       $$01$i95$i = $846; //@line 12272
       while (1) {
        ___fwritex($pad$i, 256, $f) | 0; //@line 12274
        $850 = $$01$i95$i + -256 | 0; //@line 12275
        if ($850 >>> 0 > 255) {
         $$01$i95$i = $850; //@line 12278
        } else {
         $$0$lcssa$i97$i = $850; //@line 12280
         break;
        }
       }
      } else {
       $$0$lcssa$i97$i = $846; //@line 12285
      }
      ___fwritex($pad$i, $$0$lcssa$i97$i, $f) | 0; //@line 12287
     }
     ___fwritex($prefix$0$i, $pl$0$i, $f) | 0; //@line 12289
     if (($843 | 0) == 65536 & $845) {
      $853 = $w$1 - $842 | 0; //@line 12293
      _memset($pad$i | 0, 48, ($853 >>> 0 > 256 ? 256 : $853) | 0) | 0; //@line 12296
      if ($853 >>> 0 > 255) {
       $$01$i102$i = $853; //@line 12299
       while (1) {
        ___fwritex($pad$i, 256, $f) | 0; //@line 12301
        $857 = $$01$i102$i + -256 | 0; //@line 12302
        if ($857 >>> 0 > 255) {
         $$01$i102$i = $857; //@line 12305
        } else {
         $$0$lcssa$i104$i = $857; //@line 12307
         break;
        }
       }
      } else {
       $$0$lcssa$i104$i = $853; //@line 12312
      }
      ___fwritex($pad$i, $$0$lcssa$i104$i, $f) | 0; //@line 12314
     }
     do {
      if ($795) {
       $r$0$a$7$i = $a$7$i >>> 0 > $$32$i >>> 0 ? $$32$i : $a$7$i; //@line 12319
       $d$4184$i = $r$0$a$7$i; //@line 12320
       do {
        $860 = HEAP32[$d$4184$i >> 2] | 0; //@line 12322
        if (($860 | 0) == 0) {
         $$1$lcssa$i113$i = $13; //@line 12325
        } else {
         $$12$i111$i = $13; //@line 12327
         $y$03$i110$i = $860; //@line 12327
         while (1) {
          $865 = $$12$i111$i + -1 | 0; //@line 12332
          HEAP8[$865 >> 0] = ($y$03$i110$i >>> 0) % 10 | 0 | 48; //@line 12333
          if ($y$03$i110$i >>> 0 < 10) {
           $$1$lcssa$i113$i = $865; //@line 12337
           break;
          } else {
           $$12$i111$i = $865; //@line 12340
           $y$03$i110$i = ($y$03$i110$i >>> 0) / 10 | 0; //@line 12340
          }
         }
        }
        do {
         if (($d$4184$i | 0) == ($r$0$a$7$i | 0)) {
          if (($$1$lcssa$i113$i | 0) != ($13 | 0)) {
           $s7$1$i = $$1$lcssa$i113$i; //@line 12349
           break;
          }
          HEAP8[$15 >> 0] = 48; //@line 12352
          $s7$1$i = $15; //@line 12353
         } else {
          if ($$1$lcssa$i113$i >>> 0 > $buf$i >>> 0) {
           $s7$0181$i = $$1$lcssa$i113$i; //@line 12357
          } else {
           $s7$1$i = $$1$lcssa$i113$i; //@line 12359
           break;
          }
          while (1) {
           $870 = $s7$0181$i + -1 | 0; //@line 12363
           HEAP8[$870 >> 0] = 48; //@line 12364
           if ($870 >>> 0 > $buf$i >>> 0) {
            $s7$0181$i = $870; //@line 12367
           } else {
            $s7$1$i = $870; //@line 12369
            break;
           }
          }
         }
        } while (0);
        ___fwritex($s7$1$i, $14 - $s7$1$i | 0, $f) | 0; //@line 12377
        $d$4184$i = $d$4184$i + 4 | 0; //@line 12378
       } while (!($d$4184$i >>> 0 > $$32$i >>> 0));
       if (!$789) {
        if (($fl$1$ & 8 | 0) == 0) {
         break;
        }
       }
       ___fwritex(2160, 1, $f) | 0; //@line 12393
       if ($d$4184$i >>> 0 < $z$7$i >>> 0 & ($$310$i | 0) > 0) {
        $$411176$i = $$310$i; //@line 12398
        $d$5175$i = $d$4184$i; //@line 12398
        while (1) {
         $881 = HEAP32[$d$5175$i >> 2] | 0; //@line 12400
         if (($881 | 0) == 0) {
          $s8$0170$i = $13; //@line 12403
          label = 295; //@line 12404
         } else {
          $$12$i120$i = $13; //@line 12406
          $y$03$i119$i = $881; //@line 12406
          while (1) {
           $$12$i120$i = $$12$i120$i + -1 | 0; //@line 12411
           HEAP8[$$12$i120$i >> 0] = ($y$03$i119$i >>> 0) % 10 | 0 | 48; //@line 12412
           if ($y$03$i119$i >>> 0 < 10) {
            break;
           } else {
            $y$03$i119$i = ($y$03$i119$i >>> 0) / 10 | 0; //@line 12418
           }
          }
          if ($$12$i120$i >>> 0 > $buf$i >>> 0) {
           $s8$0170$i = $$12$i120$i; //@line 12423
           label = 295; //@line 12424
          } else {
           $s8$0$lcssa$i = $$12$i120$i; //@line 12426
          }
         }
         if ((label | 0) == 295) {
          while (1) {
           label = 0; //@line 12431
           $890 = $s8$0170$i + -1 | 0; //@line 12432
           HEAP8[$890 >> 0] = 48; //@line 12433
           if ($890 >>> 0 > $buf$i >>> 0) {
            $s8$0170$i = $890; //@line 12436
            label = 295; //@line 12437
           } else {
            $s8$0$lcssa$i = $890; //@line 12439
            break;
           }
          }
         }
         ___fwritex($s8$0$lcssa$i, ($$411176$i | 0) > 9 ? 9 : $$411176$i, $f) | 0; //@line 12446
         $d$5175$i = $d$5175$i + 4 | 0; //@line 12447
         $895 = $$411176$i + -9 | 0; //@line 12448
         if (!($d$5175$i >>> 0 < $z$7$i >>> 0 & ($895 | 0) > 0)) {
          $$411$lcssa$i = $895; //@line 12455
          break;
         } else {
          $$411176$i = $895; //@line 12453
         }
        }
       } else {
        $$411$lcssa$i = $$310$i; //@line 12460
       }
       if (($$411$lcssa$i | 0) <= 0) {
        break;
       }
       _memset($pad$i | 0, 48, ($$411$lcssa$i >>> 0 > 256 ? 256 : $$411$lcssa$i) | 0) | 0; //@line 12468
       if ($$411$lcssa$i >>> 0 > 255) {
        $$01$i126$i = $$411$lcssa$i; //@line 12471
        while (1) {
         ___fwritex($pad$i, 256, $f) | 0; //@line 12473
         $902 = $$01$i126$i + -256 | 0; //@line 12474
         if ($902 >>> 0 > 255) {
          $$01$i126$i = $902; //@line 12477
         } else {
          $$0$lcssa$i128$i = $902; //@line 12479
          break;
         }
        }
       } else {
        $$0$lcssa$i128$i = $$411$lcssa$i; //@line 12484
       }
       ___fwritex($pad$i, $$0$lcssa$i128$i, $f) | 0; //@line 12486
      } else {
       $z$7$$i = $z$7$i >>> 0 > $a$7$i >>> 0 ? $z$7$i : $a$7$i + 4 | 0; //@line 12490
       do {
        if (($$310$i | 0) > -1) {
         $$not$i = ($fl$1$ & 8 | 0) != 0; //@line 12495
         $$5194$i = $$310$i; //@line 12496
         $d$6193$i = $a$7$i; //@line 12496
         do {
          $908 = HEAP32[$d$6193$i >> 2] | 0; //@line 12498
          if (($908 | 0) == 0) {
           label = 306; //@line 12501
          } else {
           $$12$i135$i = $13; //@line 12503
           $y$03$i134$i = $908; //@line 12503
           while (1) {
            $$12$i135$i = $$12$i135$i + -1 | 0; //@line 12508
            HEAP8[$$12$i135$i >> 0] = ($y$03$i134$i >>> 0) % 10 | 0 | 48; //@line 12509
            if ($y$03$i134$i >>> 0 < 10) {
             break;
            } else {
             $y$03$i134$i = ($y$03$i134$i >>> 0) / 10 | 0; //@line 12515
            }
           }
           if (($$12$i135$i | 0) == ($13 | 0)) {
            label = 306; //@line 12520
           } else {
            $s9$0$i = $$12$i135$i; //@line 12522
           }
          }
          if ((label | 0) == 306) {
           label = 0; //@line 12526
           HEAP8[$15 >> 0] = 48; //@line 12527
           $s9$0$i = $15; //@line 12528
          }
          do {
           if (($d$6193$i | 0) == ($a$7$i | 0)) {
            $921 = $s9$0$i + 1 | 0; //@line 12533
            ___fwritex($s9$0$i, 1, $f) | 0; //@line 12534
            if (!(($$5194$i | 0) > 0 | $$not$i)) {
             $s9$2$i = $921; //@line 12538
             break;
            }
            ___fwritex(2160, 1, $f) | 0; //@line 12541
            $s9$2$i = $921; //@line 12542
           } else {
            if ($s9$0$i >>> 0 > $buf$i >>> 0) {
             $s9$1189$i = $s9$0$i; //@line 12546
            } else {
             $s9$2$i = $s9$0$i; //@line 12548
             break;
            }
            while (1) {
             $919 = $s9$1189$i + -1 | 0; //@line 12552
             HEAP8[$919 >> 0] = 48; //@line 12553
             if ($919 >>> 0 > $buf$i >>> 0) {
              $s9$1189$i = $919; //@line 12556
             } else {
              $s9$2$i = $919; //@line 12558
              break;
             }
            }
           }
          } while (0);
          $924 = $14 - $s9$2$i | 0; //@line 12565
          ___fwritex($s9$2$i, ($924 | 0) < ($$5194$i | 0) ? $924 : $$5194$i, $f) | 0; //@line 12568
          $$5194$i = $$5194$i - $924 | 0; //@line 12569
          $d$6193$i = $d$6193$i + 4 | 0; //@line 12570
         } while ($d$6193$i >>> 0 < $z$7$$i >>> 0 & ($$5194$i | 0) > -1);
         if (($$5194$i | 0) <= 0) {
          break;
         }
         _memset($pad$i | 0, 48, ($$5194$i >>> 0 > 256 ? 256 : $$5194$i) | 0) | 0; //@line 12586
         if ($$5194$i >>> 0 > 255) {
          $$01$i141$i = $$5194$i; //@line 12589
          while (1) {
           ___fwritex($pad$i, 256, $f) | 0; //@line 12591
           $934 = $$01$i141$i + -256 | 0; //@line 12592
           if ($934 >>> 0 > 255) {
            $$01$i141$i = $934; //@line 12595
           } else {
            $$0$lcssa$i143$i = $934; //@line 12597
            break;
           }
          }
         } else {
          $$0$lcssa$i143$i = $$5194$i; //@line 12602
         }
         ___fwritex($pad$i, $$0$lcssa$i143$i, $f) | 0; //@line 12604
        }
       } while (0);
       ___fwritex($estr$2$i, $8 - $estr$2$i | 0, $f) | 0; //@line 12609
      }
     } while (0);
     if (($843 | 0) == 8192 & $845) {
      $939 = $w$1 - $842 | 0; //@line 12615
      _memset($pad$i | 0, 32, ($939 >>> 0 > 256 ? 256 : $939) | 0) | 0; //@line 12618
      if ($939 >>> 0 > 255) {
       $$01$i$i = $939; //@line 12621
       while (1) {
        ___fwritex($pad$i, 256, $f) | 0; //@line 12623
        $943 = $$01$i$i + -256 | 0; //@line 12624
        if ($943 >>> 0 > 255) {
         $$01$i$i = $943; //@line 12627
        } else {
         $$0$lcssa$i$i = $943; //@line 12629
         break;
        }
       }
      } else {
       $$0$lcssa$i$i = $939; //@line 12634
      }
      ___fwritex($pad$i, $$0$lcssa$i$i, $f) | 0; //@line 12636
     }
     $1048 = $228; //@line 12639
     $1049 = $206; //@line 12639
     $22 = $139; //@line 12639
     $cnt$0 = $cnt$1; //@line 12639
     $l$0 = $845 ? $w$1 : $842; //@line 12639
     $l10n$0 = $l10n$3; //@line 12639
     continue L1;
     break;
    }
   case 112:
    {
     $fl$3 = $fl$1$ | 8; //@line 12647
     $p$1 = $p$0 >>> 0 > 8 ? $p$0 : 8; //@line 12647
     $t$1 = 120; //@line 12647
     label = 78; //@line 12648
     break;
    }
   case 88:
   case 120:
    {
     $fl$3 = $fl$1$; //@line 12652
     $p$1 = $p$0; //@line 12652
     $t$1 = $t$0; //@line 12652
     label = 78; //@line 12653
     break;
    }
   case 105:
   case 100:
    {
     if (($228 | 0) < 0) {
      $268 = _i64Subtract(0, 0, $206 | 0, $228 | 0) | 0; //@line 12660
      $276 = $268; //@line 12663
      $278 = tempRet0; //@line 12663
      $pl$0 = 1; //@line 12663
      $prefix$0 = 2064; //@line 12663
      label = 90; //@line 12664
      break L92;
     }
     if (($fl$1$ & 2048 | 0) == 0) {
      $273 = $fl$1$ & 1; //@line 12670
      $276 = $206; //@line 12673
      $278 = $228; //@line 12673
      $pl$0 = $273; //@line 12673
      $prefix$0 = ($273 | 0) == 0 ? 2064 : 2066 | 0; //@line 12673
      label = 90; //@line 12674
     } else {
      $276 = $206; //@line 12676
      $278 = $228; //@line 12676
      $pl$0 = 1; //@line 12676
      $prefix$0 = 2065 | 0; //@line 12676
      label = 90; //@line 12677
     }
     break;
    }
   default:
    {
     $1056 = $228; //@line 12682
     $1057 = $206; //@line 12682
     $a$2 = $22; //@line 12682
     $fl$6 = $fl$1$; //@line 12682
     $p$5 = $p$0; //@line 12682
     $pl$2 = 0; //@line 12682
     $prefix$2 = 2064; //@line 12682
     $z$2 = $2; //@line 12682
    }
   }
  } while (0);
  L437 : do {
   if ((label | 0) == 78) {
    label = 0; //@line 12688
    $224 = $206; //@line 12689
    $225 = $t$1 & 32; //@line 12690
    if (($224 | 0) == 0 & ($228 | 0) == 0) {
     $307 = $206; //@line 12695
     $310 = $228; //@line 12695
     $a$0 = $2; //@line 12695
     $fl$4 = $fl$3; //@line 12695
     $p$2 = $p$1; //@line 12695
     $pl$1 = 0; //@line 12695
     $prefix$1 = 2064; //@line 12695
     label = 95; //@line 12696
    } else {
     $$012$i = $2; //@line 12698
     $231 = $224; //@line 12698
     $238 = $228; //@line 12698
     do {
      $$012$i = $$012$i + -1 | 0; //@line 12706
      HEAP8[$$012$i >> 0] = HEAPU8[2144 + ($231 & 15) >> 0] | $225; //@line 12707
      $231 = _bitshift64Lshr($231 | 0, $238 | 0, 4) | 0; //@line 12708
      $238 = tempRet0; //@line 12709
     } while (!(($231 | 0) == 0 & ($238 | 0) == 0));
     if (($fl$3 & 8 | 0) == 0) {
      $307 = $206; //@line 12722
      $310 = $228; //@line 12722
      $a$0 = $$012$i; //@line 12722
      $fl$4 = $fl$3; //@line 12722
      $p$2 = $p$1; //@line 12722
      $pl$1 = 0; //@line 12722
      $prefix$1 = 2064; //@line 12722
      label = 95; //@line 12723
     } else {
      $307 = $206; //@line 12727
      $310 = $228; //@line 12727
      $a$0 = $$012$i; //@line 12727
      $fl$4 = $fl$3; //@line 12727
      $p$2 = $p$1; //@line 12727
      $pl$1 = 2; //@line 12727
      $prefix$1 = 2064 + ($t$1 >> 4) | 0; //@line 12727
      label = 95; //@line 12728
     }
    }
   } else if ((label | 0) == 90) {
    label = 0; //@line 12733
    $275 = $276; //@line 12734
    if ($278 >>> 0 > 0 | ($278 | 0) == 0 & $275 >>> 0 > 4294967295) {
     $$05$i = $2; //@line 12741
     $283 = $275; //@line 12741
     $284 = $278; //@line 12741
     while (1) {
      $285 = ___uremdi3($283 | 0, $284 | 0, 10, 0) | 0; //@line 12743
      $$05$i = $$05$i + -1 | 0; //@line 12747
      HEAP8[$$05$i >> 0] = $285 | 48; //@line 12748
      $283$looptemp = $283;
      $283 = ___udivdi3($283 | 0, $284 | 0, 10, 0) | 0; //@line 12749
      if (!($284 >>> 0 > 9 | ($284 | 0) == 9 & $283$looptemp >>> 0 > 4294967295)) {
       break;
      } else {
       $284 = tempRet0; //@line 12757
      }
     }
     $$0$lcssa$i46 = $$05$i; //@line 12762
     $$01$lcssa$off0$i = $283; //@line 12762
    } else {
     $$0$lcssa$i46 = $2; //@line 12764
     $$01$lcssa$off0$i = $275; //@line 12764
    }
    if (($$01$lcssa$off0$i | 0) == 0) {
     $307 = $276; //@line 12768
     $310 = $278; //@line 12768
     $a$0 = $$0$lcssa$i46; //@line 12768
     $fl$4 = $fl$1$; //@line 12768
     $p$2 = $p$0; //@line 12768
     $pl$1 = $pl$0; //@line 12768
     $prefix$1 = $prefix$0; //@line 12768
     label = 95; //@line 12769
    } else {
     $$12$i = $$0$lcssa$i46; //@line 12771
     $y$03$i = $$01$lcssa$off0$i; //@line 12771
     while (1) {
      $301 = $$12$i + -1 | 0; //@line 12776
      HEAP8[$301 >> 0] = ($y$03$i >>> 0) % 10 | 0 | 48; //@line 12777
      if ($y$03$i >>> 0 < 10) {
       $307 = $276; //@line 12781
       $310 = $278; //@line 12781
       $a$0 = $301; //@line 12781
       $fl$4 = $fl$1$; //@line 12781
       $p$2 = $p$0; //@line 12781
       $pl$1 = $pl$0; //@line 12781
       $prefix$1 = $prefix$0; //@line 12781
       label = 95; //@line 12782
       break;
      } else {
       $$12$i = $301; //@line 12785
       $y$03$i = ($y$03$i >>> 0) / 10 | 0; //@line 12785
      }
     }
    }
   } else if ((label | 0) == 100) {
    label = 0; //@line 12791
    $324 = _memchr($a$1, 0, $p$0) | 0; //@line 12792
    if (($324 | 0) == 0) {
     $1056 = $228; //@line 12796
     $1057 = $206; //@line 12796
     $a$2 = $a$1; //@line 12796
     $fl$6 = $205; //@line 12796
     $p$5 = $p$0; //@line 12796
     $pl$2 = 0; //@line 12796
     $prefix$2 = 2064; //@line 12796
     $z$2 = $a$1 + $p$0 | 0; //@line 12796
     break;
    } else {
     $1056 = $228; //@line 12802
     $1057 = $206; //@line 12802
     $a$2 = $a$1; //@line 12802
     $fl$6 = $205; //@line 12802
     $p$5 = $324 - $a$1 | 0; //@line 12802
     $pl$2 = 0; //@line 12802
     $prefix$2 = 2064; //@line 12802
     $z$2 = $324; //@line 12802
     break;
    }
   } else if ((label | 0) == 105) {
    label = 0; //@line 12807
    $i$0169 = 0; //@line 12808
    $l$1168 = 0; //@line 12808
    $ws$0170 = $1058; //@line 12808
    while (1) {
     $335 = HEAP32[$ws$0170 >> 2] | 0; //@line 12810
     if (($335 | 0) == 0) {
      $i$0$lcssa = $i$0169; //@line 12813
      $l$1$lcssa = $l$1168; //@line 12813
      break;
     }
     $337 = _wctomb($mb, $335) | 0; //@line 12816
     if (!(($337 | 0) > -1)) {
      $$0 = -1; //@line 12819
      label = 357; //@line 12820
      break L1;
     }
     $334 = $337 + $i$0169 | 0; //@line 12825
     if ($337 >>> 0 > ($p$4296 - $i$0169 | 0) >>> 0) {
      $1060 = $1058; //@line 12827
      $1061 = $1059; //@line 12827
      $i$0167 = $i$0169; //@line 12827
      label = 111; //@line 12828
      break L437;
     }
     if ($334 >>> 0 < $p$4296 >>> 0) {
      $i$0169 = $334; //@line 12834
      $l$1168 = $337; //@line 12834
      $ws$0170 = $ws$0170 + 4 | 0; //@line 12834
     } else {
      $i$0$lcssa = $334; //@line 12836
      $l$1$lcssa = $337; //@line 12836
      break;
     }
    }
    if (($l$1$lcssa | 0) < 0) {
     $$0 = -1; //@line 12842
     label = 357; //@line 12843
     break L1;
    } else {
     $1060 = $1058; //@line 12846
     $1061 = $1059; //@line 12846
     $i$0167 = $i$0$lcssa; //@line 12846
     label = 111; //@line 12847
    }
   }
  } while (0);
  if ((label | 0) == 95) {
   label = 0; //@line 12852
   $$fl$4 = ($p$2 | 0) > -1 ? $fl$4 & -65537 : $fl$4; //@line 12855
   $311 = ($307 | 0) == 0 & ($310 | 0) == 0; //@line 12859
   if ($311 & ($p$2 | 0) == 0) {
    $1056 = $310; //@line 12863
    $1057 = $307; //@line 12863
    $a$2 = $2; //@line 12863
    $fl$6 = $$fl$4; //@line 12863
    $p$5 = 0; //@line 12863
    $pl$2 = $pl$1; //@line 12863
    $prefix$2 = $prefix$1; //@line 12863
    $z$2 = $2; //@line 12863
   } else {
    $316 = ($311 & 1) + ($3 - $a$0) | 0; //@line 12868
    $1056 = $310; //@line 12871
    $1057 = $307; //@line 12871
    $a$2 = $a$0; //@line 12871
    $fl$6 = $$fl$4; //@line 12871
    $p$5 = ($p$2 | 0) > ($316 | 0) ? $p$2 : $316; //@line 12871
    $pl$2 = $pl$1; //@line 12871
    $prefix$2 = $prefix$1; //@line 12871
    $z$2 = $2; //@line 12871
   }
  } else if ((label | 0) == 111) {
   label = 0; //@line 12875
   $342 = $fl$1$ & 73728; //@line 12876
   $344 = ($i$0167 | 0) < ($w$1 | 0); //@line 12878
   if (($342 | 0) == 0 & $344) {
    $345 = $w$1 - $i$0167 | 0; //@line 12881
    _memset($pad$i | 0, 32, ($345 >>> 0 > 256 ? 256 : $345) | 0) | 0; //@line 12884
    if ($345 >>> 0 > 255) {
     $$01$i58 = $345; //@line 12887
     while (1) {
      ___fwritex($pad$i, 256, $f) | 0; //@line 12889
      $349 = $$01$i58 + -256 | 0; //@line 12890
      if ($349 >>> 0 > 255) {
       $$01$i58 = $349; //@line 12893
      } else {
       $$0$lcssa$i60 = $349; //@line 12895
       break;
      }
     }
    } else {
     $$0$lcssa$i60 = $345; //@line 12900
    }
    ___fwritex($pad$i, $$0$lcssa$i60, $f) | 0; //@line 12902
   }
   L471 : do {
    if (($i$0167 | 0) != 0) {
     $i$1175 = 0; //@line 12907
     $ws$1176 = $1060; //@line 12907
     while (1) {
      $352 = HEAP32[$ws$1176 >> 2] | 0; //@line 12909
      if (($352 | 0) == 0) {
       break L471;
      }
      $354 = _wctomb($mb, $352) | 0; //@line 12914
      $i$1175 = $354 + $i$1175 | 0; //@line 12915
      if (($i$1175 | 0) > ($i$0167 | 0)) {
       break L471;
      }
      ___fwritex($mb, $354, $f) | 0; //@line 12921
      if (!($i$1175 >>> 0 < $i$0167 >>> 0)) {
       break;
      } else {
       $ws$1176 = $ws$1176 + 4 | 0; //@line 12924
      }
     }
    }
   } while (0);
   if (($342 | 0) == 8192 & $344) {
    $360 = $w$1 - $i$0167 | 0; //@line 12934
    _memset($pad$i | 0, 32, ($360 >>> 0 > 256 ? 256 : $360) | 0) | 0; //@line 12937
    if ($360 >>> 0 > 255) {
     $$01$i65 = $360; //@line 12940
     while (1) {
      ___fwritex($pad$i, 256, $f) | 0; //@line 12942
      $364 = $$01$i65 + -256 | 0; //@line 12943
      if ($364 >>> 0 > 255) {
       $$01$i65 = $364; //@line 12946
      } else {
       $$0$lcssa$i67 = $364; //@line 12948
       break;
      }
     }
    } else {
     $$0$lcssa$i67 = $360; //@line 12953
    }
    ___fwritex($pad$i, $$0$lcssa$i67, $f) | 0; //@line 12955
   }
   $1048 = $228; //@line 12958
   $1049 = $1061; //@line 12958
   $22 = $139; //@line 12958
   $cnt$0 = $cnt$1; //@line 12958
   $l$0 = $344 ? $w$1 : $i$0167; //@line 12958
   $l10n$0 = $l10n$3; //@line 12958
   continue;
  }
  $947 = $z$2 - $a$2 | 0; //@line 12963
  $$p$5 = ($p$5 | 0) < ($947 | 0) ? $947 : $p$5; //@line 12965
  $949 = $pl$2 + $$p$5 | 0; //@line 12966
  $w$2 = ($w$1 | 0) < ($949 | 0) ? $949 : $w$1; //@line 12968
  $951 = $fl$6 & 73728; //@line 12969
  $953 = ($949 | 0) < ($w$2 | 0); //@line 12971
  if (($951 | 0) == 0 & $953) {
   $954 = $w$2 - $949 | 0; //@line 12974
   _memset($pad$i | 0, 32, ($954 >>> 0 > 256 ? 256 : $954) | 0) | 0; //@line 12977
   if ($954 >>> 0 > 255) {
    $$01$i76 = $954; //@line 12980
    while (1) {
     ___fwritex($pad$i, 256, $f) | 0; //@line 12982
     $958 = $$01$i76 + -256 | 0; //@line 12983
     if ($958 >>> 0 > 255) {
      $$01$i76 = $958; //@line 12986
     } else {
      $$0$lcssa$i78 = $958; //@line 12988
      break;
     }
    }
   } else {
    $$0$lcssa$i78 = $954; //@line 12993
   }
   ___fwritex($pad$i, $$0$lcssa$i78, $f) | 0; //@line 12995
  }
  ___fwritex($prefix$2, $pl$2, $f) | 0; //@line 12997
  if (($951 | 0) == 65536 & $953) {
   $961 = $w$2 - $949 | 0; //@line 13001
   _memset($pad$i | 0, 48, ($961 >>> 0 > 256 ? 256 : $961) | 0) | 0; //@line 13004
   if ($961 >>> 0 > 255) {
    $$01$i51 = $961; //@line 13007
    while (1) {
     ___fwritex($pad$i, 256, $f) | 0; //@line 13009
     $965 = $$01$i51 + -256 | 0; //@line 13010
     if ($965 >>> 0 > 255) {
      $$01$i51 = $965; //@line 13013
     } else {
      $$0$lcssa$i53 = $965; //@line 13015
      break;
     }
    }
   } else {
    $$0$lcssa$i53 = $961; //@line 13020
   }
   ___fwritex($pad$i, $$0$lcssa$i53, $f) | 0; //@line 13022
  }
  if (($947 | 0) < ($$p$5 | 0)) {
   $968 = $$p$5 - $947 | 0; //@line 13026
   _memset($pad$i | 0, 48, ($968 >>> 0 > 256 ? 256 : $968) | 0) | 0; //@line 13029
   if ($968 >>> 0 > 255) {
    $$01$i36 = $968; //@line 13032
    while (1) {
     ___fwritex($pad$i, 256, $f) | 0; //@line 13034
     $972 = $$01$i36 + -256 | 0; //@line 13035
     if ($972 >>> 0 > 255) {
      $$01$i36 = $972; //@line 13038
     } else {
      $$0$lcssa$i38 = $972; //@line 13040
      break;
     }
    }
   } else {
    $$0$lcssa$i38 = $968; //@line 13045
   }
   ___fwritex($pad$i, $$0$lcssa$i38, $f) | 0; //@line 13047
  }
  ___fwritex($a$2, $947, $f) | 0; //@line 13049
  if (!(($951 | 0) == 8192 & $953)) {
   $1048 = $1056; //@line 13053
   $1049 = $1057; //@line 13053
   $22 = $139; //@line 13053
   $cnt$0 = $cnt$1; //@line 13053
   $l$0 = $w$2; //@line 13053
   $l10n$0 = $l10n$3; //@line 13053
   continue;
  }
  $975 = $w$2 - $949 | 0; //@line 13056
  _memset($pad$i | 0, 32, ($975 >>> 0 > 256 ? 256 : $975) | 0) | 0; //@line 13059
  if ($975 >>> 0 > 255) {
   $$01$i = $975; //@line 13062
   while (1) {
    ___fwritex($pad$i, 256, $f) | 0; //@line 13064
    $979 = $$01$i + -256 | 0; //@line 13065
    if ($979 >>> 0 > 255) {
     $$01$i = $979; //@line 13068
    } else {
     $$0$lcssa$i = $979; //@line 13070
     break;
    }
   }
  } else {
   $$0$lcssa$i = $975; //@line 13075
  }
  ___fwritex($pad$i, $$0$lcssa$i, $f) | 0; //@line 13077
  $1048 = $1056; //@line 13078
  $1049 = $1057; //@line 13078
  $22 = $139; //@line 13078
  $cnt$0 = $cnt$1; //@line 13078
  $l$0 = $w$2; //@line 13078
  $l10n$0 = $l10n$3; //@line 13078
 }
 if ((label | 0) == 339) {
  if (($f | 0) != 0) {
   $$0 = $cnt$1; //@line 13083
   STACKTOP = sp; //@line 13084
   return $$0 | 0; //@line 13084
  }
  if (($l10n$0 | 0) == 0) {
   $$0 = 0; //@line 13088
   STACKTOP = sp; //@line 13089
   return $$0 | 0; //@line 13089
  } else {
   $i$291 = 1; //@line 13091
  }
  while (1) {
   $984 = HEAP32[$nl_type + ($i$291 << 2) >> 2] | 0; //@line 13095
   if (($984 | 0) == 0) {
    $i$390 = $i$291; //@line 13098
    break;
   }
   $986 = $nl_arg + ($i$291 << 3) | 0; //@line 13101
   L523 : do {
    if (!($984 >>> 0 > 20)) {
     do {
      switch ($984 | 0) {
      case 16:
       {
        $arglist_current57 = HEAP32[$ap >> 2] | 0; //@line 13108
        $1034 = HEAP32[$arglist_current57 >> 2] | 0; //@line 13109
        HEAP32[$ap >> 2] = $arglist_current57 + 4; //@line 13111
        $1035 = $986; //@line 13113
        HEAP32[$1035 >> 2] = $1034 & 255; //@line 13115
        HEAP32[$1035 + 4 >> 2] = 0; //@line 13118
        break L523;
        break;
       }
      case 10:
       {
        $arglist_current39 = HEAP32[$ap >> 2] | 0; //@line 13123
        $989 = HEAP32[$arglist_current39 >> 2] | 0; //@line 13124
        HEAP32[$ap >> 2] = $arglist_current39 + 4; //@line 13126
        $992 = $986; //@line 13129
        HEAP32[$992 >> 2] = $989; //@line 13131
        HEAP32[$992 + 4 >> 2] = (($989 | 0) < 0) << 31 >> 31; //@line 13134
        break L523;
        break;
       }
      case 17:
       {
        $arglist_current60 = HEAP32[$ap >> 2] | 0; //@line 13139
        HEAP32[tempDoublePtr >> 2] = HEAP32[$arglist_current60 >> 2]; //@line 13140
        HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arglist_current60 + 4 >> 2]; //@line 13140
        $1039 = +HEAPF64[tempDoublePtr >> 3]; //@line 13140
        HEAP32[$ap >> 2] = $arglist_current60 + 8; //@line 13142
        HEAPF64[$986 >> 3] = $1039; //@line 13143
        break L523;
        break;
       }
      case 13:
       {
        $arglist_current48 = HEAP32[$ap >> 2] | 0; //@line 13148
        $1011 = HEAP32[$arglist_current48 >> 2] | 0; //@line 13149
        HEAP32[$ap >> 2] = $arglist_current48 + 4; //@line 13151
        $1013 = ($1011 & 65535) << 16 >> 16; //@line 13153
        $1016 = $986; //@line 13156
        HEAP32[$1016 >> 2] = $1013; //@line 13158
        HEAP32[$1016 + 4 >> 2] = (($1013 | 0) < 0) << 31 >> 31; //@line 13161
        break L523;
        break;
       }
      case 14:
       {
        $arglist_current51 = HEAP32[$ap >> 2] | 0; //@line 13166
        $1020 = HEAP32[$arglist_current51 >> 2] | 0; //@line 13167
        HEAP32[$ap >> 2] = $arglist_current51 + 4; //@line 13169
        $1021 = $986; //@line 13171
        HEAP32[$1021 >> 2] = $1020 & 65535; //@line 13173
        HEAP32[$1021 + 4 >> 2] = 0; //@line 13176
        break L523;
        break;
       }
      case 15:
       {
        $arglist_current54 = HEAP32[$ap >> 2] | 0; //@line 13181
        $1025 = HEAP32[$arglist_current54 >> 2] | 0; //@line 13182
        HEAP32[$ap >> 2] = $arglist_current54 + 4; //@line 13184
        $1027 = ($1025 & 255) << 24 >> 24; //@line 13186
        $1030 = $986; //@line 13189
        HEAP32[$1030 >> 2] = $1027; //@line 13191
        HEAP32[$1030 + 4 >> 2] = (($1027 | 0) < 0) << 31 >> 31; //@line 13194
        break L523;
        break;
       }
      case 11:
       {
        $arglist_current42 = HEAP32[$ap >> 2] | 0; //@line 13199
        $996 = HEAP32[$arglist_current42 >> 2] | 0; //@line 13200
        HEAP32[$ap >> 2] = $arglist_current42 + 4; //@line 13202
        $997 = $986; //@line 13203
        HEAP32[$997 >> 2] = $996; //@line 13205
        HEAP32[$997 + 4 >> 2] = 0; //@line 13208
        break L523;
        break;
       }
      case 12:
       {
        $arglist_current45 = HEAP32[$ap >> 2] | 0; //@line 13213
        $1001 = $arglist_current45; //@line 13214
        $1003 = HEAP32[$1001 >> 2] | 0; //@line 13216
        $1006 = HEAP32[$1001 + 4 >> 2] | 0; //@line 13219
        HEAP32[$ap >> 2] = $arglist_current45 + 8; //@line 13221
        $1007 = $986; //@line 13222
        HEAP32[$1007 >> 2] = $1003; //@line 13224
        HEAP32[$1007 + 4 >> 2] = $1006; //@line 13227
        break L523;
        break;
       }
      case 18:
       {
        $arglist_current63 = HEAP32[$ap >> 2] | 0; //@line 13232
        HEAP32[tempDoublePtr >> 2] = HEAP32[$arglist_current63 >> 2]; //@line 13233
        HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arglist_current63 + 4 >> 2]; //@line 13233
        $1040 = +HEAPF64[tempDoublePtr >> 3]; //@line 13233
        HEAP32[$ap >> 2] = $arglist_current63 + 8; //@line 13235
        HEAPF64[$986 >> 3] = $1040; //@line 13236
        break L523;
        break;
       }
      case 9:
       {
        $arglist_current36 = HEAP32[$ap >> 2] | 0; //@line 13241
        $988 = HEAP32[$arglist_current36 >> 2] | 0; //@line 13242
        HEAP32[$ap >> 2] = $arglist_current36 + 4; //@line 13244
        HEAP32[$986 >> 2] = $988; //@line 13245
        break L523;
        break;
       }
      default:
       {
        break L523;
       }
      }
     } while (0);
    }
   } while (0);
   $i$291 = $i$291 + 1 | 0; //@line 13256
   if (($i$291 | 0) >= 10) {
    $$0 = 1; //@line 13261
    label = 357; //@line 13262
    break;
   }
  }
  if ((label | 0) == 357) {
   STACKTOP = sp; //@line 13267
   return $$0 | 0; //@line 13267
  }
  while (1) {
   if ((HEAP32[$nl_type + ($i$390 << 2) >> 2] | 0) != 0) {
    $$0 = -1; //@line 13275
    label = 357; //@line 13276
    break;
   }
   $i$390 = $i$390 + 1 | 0; //@line 13273
   if (($i$390 | 0) >= 10) {
    $$0 = 1; //@line 13283
    label = 357; //@line 13284
    break;
   }
  }
  if ((label | 0) == 357) {
   STACKTOP = sp; //@line 13289
   return $$0 | 0; //@line 13289
  }
 } else if ((label | 0) == 357) {
  STACKTOP = sp; //@line 13293
  return $$0 | 0; //@line 13293
 }
 return 0; //@line 13295
}
function _malloc($bytes) {
 $bytes = $bytes | 0;
 var $$pre$phi$i$iZ2D = 0, $$pre$phi$i26$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$rsize$3$i = 0, $$sum$i21$i = 0, $$sum2$i23$i = 0, $$sum3132$i$i = 0, $$sum67$i$i = 0, $100 = 0, $1004 = 0, $1005 = 0, $1008 = 0, $1010 = 0, $1013 = 0, $1018 = 0, $1024 = 0, $1028 = 0, $1029 = 0, $1036 = 0, $1045 = 0, $1048 = 0, $1053 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1069 = 0, $1071 = 0, $1072 = 0, $110 = 0, $112 = 0, $113 = 0, $115 = 0, $117 = 0, $119 = 0, $12 = 0, $121 = 0, $123 = 0, $125 = 0, $127 = 0, $13 = 0, $132 = 0, $138 = 0, $14 = 0, $141 = 0, $144 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $151 = 0, $154 = 0, $156 = 0, $159 = 0, $16 = 0, $161 = 0, $164 = 0, $167 = 0, $168 = 0, $17 = 0, $170 = 0, $171 = 0, $173 = 0, $174 = 0, $176 = 0, $177 = 0, $18 = 0, $182 = 0, $183 = 0, $192 = 0, $201 = 0, $208 = 0, $215 = 0, $218 = 0, $226 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $237 = 0, $238 = 0, $246 = 0, $247 = 0, $248 = 0, $25 = 0, $250 = 0, $251 = 0, $256 = 0, $257 = 0, $260 = 0, $262 = 0, $265 = 0, $270 = 0, $277 = 0, $28 = 0, $283 = 0, $286 = 0, $287 = 0, $291 = 0, $301 = 0, $304 = 0, $308 = 0, $31 = 0, $310 = 0, $311 = 0, $313 = 0, $315 = 0, $317 = 0, $319 = 0, $321 = 0, $323 = 0, $325 = 0, $335 = 0, $336 = 0, $338 = 0, $347 = 0, $349 = 0, $352 = 0, $354 = 0, $357 = 0, $359 = 0, $362 = 0, $365 = 0, $366 = 0, $368 = 0, $369 = 0, $371 = 0, $372 = 0, $374 = 0, $375 = 0, $38 = 0, $380 = 0, $381 = 0, $390 = 0, $399 = 0, $4 = 0, $406 = 0, $41 = 0, $413 = 0, $416 = 0, $424 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $433 = 0, $434 = 0, $44 = 0, $440 = 0, $445 = 0, $446 = 0, $449 = 0, $451 = 0, $454 = 0, $459 = 0, $46 = 0, $465 = 0, $469 = 0, $47 = 0, $470 = 0, $477 = 0, $486 = 0, $489 = 0, $49 = 0, $494 = 0, $5 = 0, $501 = 0, $502 = 0, $503 = 0, $51 = 0, $511 = 0, $513 = 0, $514 = 0, $524 = 0, $528 = 0, $53 = 0, $530 = 0, $531 = 0, $540 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $554 = 0, $556 = 0, $557 = 0, $563 = 0, $565 = 0, $567 = 0, $57 = 0, $572 = 0, $575 = 0, $577 = 0, $578 = 0, $579 = 0, $587 = 0, $588 = 0, $59 = 0, $591 = 0, $595 = 0, $596 = 0, $599 = 0, $6 = 0, $601 = 0, $605 = 0, $606 = 0, $61 = 0, $611 = 0, $615 = 0, $624 = 0, $625 = 0, $629 = 0, $631 = 0, $633 = 0, $636 = 0, $638 = 0, $64 = 0, $642 = 0, $643 = 0, $649 = 0, $65 = 0, $655 = 0, $656 = 0, $66 = 0, $661 = 0, $662 = 0, $663 = 0, $667 = 0, $67 = 0, $677 = 0, $679 = 0, $68 = 0, $685 = 0, $686 = 0, $69 = 0, $693 = 0, $697 = 0, $7 = 0, $70 = 0, $703 = 0, $707 = 0, $713 = 0, $715 = 0, $720 = 0, $721 = 0, $725 = 0, $726 = 0, $732 = 0, $738 = 0, $743 = 0, $746 = 0, $747 = 0, $750 = 0, $752 = 0, $754 = 0, $769 = 0, $77 = 0, $774 = 0, $776 = 0, $779 = 0, $782 = 0, $785 = 0, $788 = 0, $789 = 0, $791 = 0, $792 = 0, $794 = 0, $795 = 0, $797 = 0, $798 = 0, $80 = 0, $804 = 0, $805 = 0, $81 = 0, $814 = 0, $823 = 0, $830 = 0, $838 = 0, $84 = 0, $844 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $853 = 0, $854 = 0, $860 = 0, $865 = 0, $866 = 0, $869 = 0, $871 = 0, $874 = 0, $879 = 0, $88 = 0, $885 = 0, $889 = 0, $890 = 0, $897 = 0, $90 = 0, $906 = 0, $909 = 0, $91 = 0, $914 = 0, $92 = 0, $921 = 0, $922 = 0, $923 = 0, $93 = 0, $931 = 0, $934 = 0, $935 = 0, $94 = 0, $940 = 0, $945 = 0, $946 = 0, $949 = 0, $95 = 0, $950 = 0, $953 = 0, $959 = 0, $960 = 0, $966 = 0, $970 = 0, $976 = 0, $978 = 0, $983 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $99 = 0, $992 = 0, $993 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$025$i = 0, $K2$014$i$i = 0, $K8$052$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i18 = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i17 = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i28$i = 0, $T$013$i$i = 0, $T$024$i = 0, $T$051$i$i = 0, $br$0$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $oldfirst$0$i$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$329$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$075$i = 0, $sp$168$i = 0, $ssize$0$i = 0, $ssize$1$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$228$i = 0, $tbase$0$i = 0, $tbase$247$i = 0, $tsize$0$i = 0, $tsize$0323841$i = 0, $tsize$1$i = 0, $tsize$246$i = 0, $v$0$i = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$330$i = 0, label = 0, sp = 0, $970$looptemp = 0;
 sp = STACKTOP; //@line 5431
 do {
  if ($bytes >>> 0 < 245) {
   if ($bytes >>> 0 < 11) {
    $5 = 16; //@line 5437
   } else {
    $5 = $bytes + 11 & -8; //@line 5441
   }
   $4 = $5 >>> 3; //@line 5443
   $6 = HEAP32[276] | 0; //@line 5444
   $7 = $6 >>> $4; //@line 5445
   if (($7 & 3 | 0) != 0) {
    $12 = ($7 & 1 ^ 1) + $4 | 0; //@line 5451
    $13 = $12 << 1; //@line 5452
    $14 = 1144 + ($13 << 2) | 0; //@line 5453
    $15 = 1144 + ($13 + 2 << 2) | 0; //@line 5455
    $16 = HEAP32[$15 >> 2] | 0; //@line 5456
    $17 = $16 + 8 | 0; //@line 5457
    $18 = HEAP32[$17 >> 2] | 0; //@line 5458
    do {
     if (($14 | 0) == ($18 | 0)) {
      HEAP32[276] = $6 & ~(1 << $12); //@line 5465
     } else {
      if ($18 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
       _abort(); //@line 5470
      }
      $25 = $18 + 12 | 0; //@line 5473
      if ((HEAP32[$25 >> 2] | 0) == ($16 | 0)) {
       HEAP32[$25 >> 2] = $14; //@line 5477
       HEAP32[$15 >> 2] = $18; //@line 5478
       break;
      } else {
       _abort(); //@line 5481
      }
     }
    } while (0);
    $28 = $12 << 3; //@line 5486
    HEAP32[$16 + 4 >> 2] = $28 | 3; //@line 5489
    $31 = $16 + ($28 | 4) | 0; //@line 5491
    HEAP32[$31 >> 2] = HEAP32[$31 >> 2] | 1; //@line 5494
    $mem$0 = $17; //@line 5495
    STACKTOP = sp; //@line 5496
    return $mem$0 | 0; //@line 5496
   }
   if ($5 >>> 0 > (HEAP32[1112 >> 2] | 0) >>> 0) {
    if (($7 | 0) != 0) {
     $38 = 2 << $4; //@line 5504
     $41 = $7 << $4 & ($38 | 0 - $38); //@line 5507
     $44 = ($41 & 0 - $41) + -1 | 0; //@line 5510
     $46 = $44 >>> 12 & 16; //@line 5512
     $47 = $44 >>> $46; //@line 5513
     $49 = $47 >>> 5 & 8; //@line 5515
     $51 = $47 >>> $49; //@line 5517
     $53 = $51 >>> 2 & 4; //@line 5519
     $55 = $51 >>> $53; //@line 5521
     $57 = $55 >>> 1 & 2; //@line 5523
     $59 = $55 >>> $57; //@line 5525
     $61 = $59 >>> 1 & 1; //@line 5527
     $64 = ($49 | $46 | $53 | $57 | $61) + ($59 >>> $61) | 0; //@line 5530
     $65 = $64 << 1; //@line 5531
     $66 = 1144 + ($65 << 2) | 0; //@line 5532
     $67 = 1144 + ($65 + 2 << 2) | 0; //@line 5534
     $68 = HEAP32[$67 >> 2] | 0; //@line 5535
     $69 = $68 + 8 | 0; //@line 5536
     $70 = HEAP32[$69 >> 2] | 0; //@line 5537
     do {
      if (($66 | 0) == ($70 | 0)) {
       HEAP32[276] = $6 & ~(1 << $64); //@line 5544
      } else {
       if ($70 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
        _abort(); //@line 5549
       }
       $77 = $70 + 12 | 0; //@line 5552
       if ((HEAP32[$77 >> 2] | 0) == ($68 | 0)) {
        HEAP32[$77 >> 2] = $66; //@line 5556
        HEAP32[$67 >> 2] = $70; //@line 5557
        break;
       } else {
        _abort(); //@line 5560
       }
      }
     } while (0);
     $80 = $64 << 3; //@line 5565
     $81 = $80 - $5 | 0; //@line 5566
     HEAP32[$68 + 4 >> 2] = $5 | 3; //@line 5569
     $84 = $68 + $5 | 0; //@line 5570
     HEAP32[$68 + ($5 | 4) >> 2] = $81 | 1; //@line 5574
     HEAP32[$68 + $80 >> 2] = $81; //@line 5576
     $88 = HEAP32[1112 >> 2] | 0; //@line 5577
     if (($88 | 0) != 0) {
      $90 = HEAP32[1124 >> 2] | 0; //@line 5580
      $91 = $88 >>> 3; //@line 5581
      $92 = $91 << 1; //@line 5582
      $93 = 1144 + ($92 << 2) | 0; //@line 5583
      $94 = HEAP32[276] | 0; //@line 5584
      $95 = 1 << $91; //@line 5585
      if (($94 & $95 | 0) == 0) {
       HEAP32[276] = $94 | $95; //@line 5590
       $$pre$phiZ2D = 1144 + ($92 + 2 << 2) | 0; //@line 5593
       $F4$0 = $93; //@line 5593
      } else {
       $99 = 1144 + ($92 + 2 << 2) | 0; //@line 5596
       $100 = HEAP32[$99 >> 2] | 0; //@line 5597
       if ($100 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
        _abort(); //@line 5601
       } else {
        $$pre$phiZ2D = $99; //@line 5604
        $F4$0 = $100; //@line 5604
       }
      }
      HEAP32[$$pre$phiZ2D >> 2] = $90; //@line 5607
      HEAP32[$F4$0 + 12 >> 2] = $90; //@line 5609
      HEAP32[$90 + 8 >> 2] = $F4$0; //@line 5611
      HEAP32[$90 + 12 >> 2] = $93; //@line 5613
     }
     HEAP32[1112 >> 2] = $81; //@line 5615
     HEAP32[1124 >> 2] = $84; //@line 5616
     $mem$0 = $69; //@line 5617
     STACKTOP = sp; //@line 5618
     return $mem$0 | 0; //@line 5618
    }
    $106 = HEAP32[1108 >> 2] | 0; //@line 5620
    if (($106 | 0) == 0) {
     $nb$0 = $5; //@line 5623
    } else {
     $110 = ($106 & 0 - $106) + -1 | 0; //@line 5627
     $112 = $110 >>> 12 & 16; //@line 5629
     $113 = $110 >>> $112; //@line 5630
     $115 = $113 >>> 5 & 8; //@line 5632
     $117 = $113 >>> $115; //@line 5634
     $119 = $117 >>> 2 & 4; //@line 5636
     $121 = $117 >>> $119; //@line 5638
     $123 = $121 >>> 1 & 2; //@line 5640
     $125 = $121 >>> $123; //@line 5642
     $127 = $125 >>> 1 & 1; //@line 5644
     $132 = HEAP32[1408 + (($115 | $112 | $119 | $123 | $127) + ($125 >>> $127) << 2) >> 2] | 0; //@line 5649
     $rsize$0$i = (HEAP32[$132 + 4 >> 2] & -8) - $5 | 0; //@line 5654
     $t$0$i = $132; //@line 5654
     $v$0$i = $132; //@line 5654
     while (1) {
      $138 = HEAP32[$t$0$i + 16 >> 2] | 0; //@line 5657
      if (($138 | 0) == 0) {
       $141 = HEAP32[$t$0$i + 20 >> 2] | 0; //@line 5661
       if (($141 | 0) == 0) {
        break;
       } else {
        $144 = $141; //@line 5666
       }
      } else {
       $144 = $138; //@line 5669
      }
      $147 = (HEAP32[$144 + 4 >> 2] & -8) - $5 | 0; //@line 5674
      $148 = $147 >>> 0 < $rsize$0$i >>> 0; //@line 5675
      $rsize$0$i = $148 ? $147 : $rsize$0$i; //@line 5678
      $t$0$i = $144; //@line 5678
      $v$0$i = $148 ? $144 : $v$0$i; //@line 5678
     }
     $149 = HEAP32[1120 >> 2] | 0; //@line 5680
     if ($v$0$i >>> 0 < $149 >>> 0) {
      _abort(); //@line 5683
     }
     $151 = $v$0$i + $5 | 0; //@line 5686
     if (!($v$0$i >>> 0 < $151 >>> 0)) {
      _abort(); //@line 5689
     }
     $154 = HEAP32[$v$0$i + 24 >> 2] | 0; //@line 5693
     $156 = HEAP32[$v$0$i + 12 >> 2] | 0; //@line 5695
     do {
      if (($156 | 0) == ($v$0$i | 0)) {
       $167 = $v$0$i + 20 | 0; //@line 5699
       $168 = HEAP32[$167 >> 2] | 0; //@line 5700
       if (($168 | 0) == 0) {
        $170 = $v$0$i + 16 | 0; //@line 5703
        $171 = HEAP32[$170 >> 2] | 0; //@line 5704
        if (($171 | 0) == 0) {
         $R$1$i = 0; //@line 5707
         break;
        } else {
         $R$0$i = $171; //@line 5710
         $RP$0$i = $170; //@line 5710
        }
       } else {
        $R$0$i = $168; //@line 5713
        $RP$0$i = $167; //@line 5713
       }
       while (1) {
        $173 = $R$0$i + 20 | 0; //@line 5716
        $174 = HEAP32[$173 >> 2] | 0; //@line 5717
        if (($174 | 0) != 0) {
         $R$0$i = $174; //@line 5720
         $RP$0$i = $173; //@line 5720
         continue;
        }
        $176 = $R$0$i + 16 | 0; //@line 5723
        $177 = HEAP32[$176 >> 2] | 0; //@line 5724
        if (($177 | 0) == 0) {
         break;
        } else {
         $R$0$i = $177; //@line 5729
         $RP$0$i = $176; //@line 5729
        }
       }
       if ($RP$0$i >>> 0 < $149 >>> 0) {
        _abort(); //@line 5734
       } else {
        HEAP32[$RP$0$i >> 2] = 0; //@line 5737
        $R$1$i = $R$0$i; //@line 5738
        break;
       }
      } else {
       $159 = HEAP32[$v$0$i + 8 >> 2] | 0; //@line 5743
       if ($159 >>> 0 < $149 >>> 0) {
        _abort(); //@line 5746
       }
       $161 = $159 + 12 | 0; //@line 5749
       if ((HEAP32[$161 >> 2] | 0) != ($v$0$i | 0)) {
        _abort(); //@line 5753
       }
       $164 = $156 + 8 | 0; //@line 5756
       if ((HEAP32[$164 >> 2] | 0) == ($v$0$i | 0)) {
        HEAP32[$161 >> 2] = $156; //@line 5760
        HEAP32[$164 >> 2] = $159; //@line 5761
        $R$1$i = $156; //@line 5762
        break;
       } else {
        _abort(); //@line 5765
       }
      }
     } while (0);
     do {
      if (($154 | 0) != 0) {
       $182 = HEAP32[$v$0$i + 28 >> 2] | 0; //@line 5774
       $183 = 1408 + ($182 << 2) | 0; //@line 5775
       if (($v$0$i | 0) == (HEAP32[$183 >> 2] | 0)) {
        HEAP32[$183 >> 2] = $R$1$i; //@line 5779
        if (($R$1$i | 0) == 0) {
         HEAP32[1108 >> 2] = HEAP32[1108 >> 2] & ~(1 << $182); //@line 5786
         break;
        }
       } else {
        if ($154 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
         _abort(); //@line 5793
        }
        $192 = $154 + 16 | 0; //@line 5796
        if ((HEAP32[$192 >> 2] | 0) == ($v$0$i | 0)) {
         HEAP32[$192 >> 2] = $R$1$i; //@line 5800
        } else {
         HEAP32[$154 + 20 >> 2] = $R$1$i; //@line 5803
        }
        if (($R$1$i | 0) == 0) {
         break;
        }
       }
       if ($R$1$i >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
        _abort(); //@line 5813
       }
       HEAP32[$R$1$i + 24 >> 2] = $154; //@line 5817
       $201 = HEAP32[$v$0$i + 16 >> 2] | 0; //@line 5819
       do {
        if (($201 | 0) != 0) {
         if ($201 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
          _abort(); //@line 5826
         } else {
          HEAP32[$R$1$i + 16 >> 2] = $201; //@line 5830
          HEAP32[$201 + 24 >> 2] = $R$1$i; //@line 5832
          break;
         }
        }
       } while (0);
       $208 = HEAP32[$v$0$i + 20 >> 2] | 0; //@line 5838
       if (($208 | 0) != 0) {
        if ($208 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
         _abort(); //@line 5844
        } else {
         HEAP32[$R$1$i + 20 >> 2] = $208; //@line 5848
         HEAP32[$208 + 24 >> 2] = $R$1$i; //@line 5850
         break;
        }
       }
      }
     } while (0);
     if ($rsize$0$i >>> 0 < 16) {
      $215 = $rsize$0$i + $5 | 0; //@line 5858
      HEAP32[$v$0$i + 4 >> 2] = $215 | 3; //@line 5861
      $218 = $v$0$i + ($215 + 4) | 0; //@line 5863
      HEAP32[$218 >> 2] = HEAP32[$218 >> 2] | 1; //@line 5866
     } else {
      HEAP32[$v$0$i + 4 >> 2] = $5 | 3; //@line 5870
      HEAP32[$v$0$i + ($5 | 4) >> 2] = $rsize$0$i | 1; //@line 5874
      HEAP32[$v$0$i + ($rsize$0$i + $5) >> 2] = $rsize$0$i; //@line 5877
      $226 = HEAP32[1112 >> 2] | 0; //@line 5878
      if (($226 | 0) != 0) {
       $228 = HEAP32[1124 >> 2] | 0; //@line 5881
       $229 = $226 >>> 3; //@line 5882
       $230 = $229 << 1; //@line 5883
       $231 = 1144 + ($230 << 2) | 0; //@line 5884
       $232 = HEAP32[276] | 0; //@line 5885
       $233 = 1 << $229; //@line 5886
       if (($232 & $233 | 0) == 0) {
        HEAP32[276] = $232 | $233; //@line 5891
        $$pre$phi$iZ2D = 1144 + ($230 + 2 << 2) | 0; //@line 5894
        $F1$0$i = $231; //@line 5894
       } else {
        $237 = 1144 + ($230 + 2 << 2) | 0; //@line 5897
        $238 = HEAP32[$237 >> 2] | 0; //@line 5898
        if ($238 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
         _abort(); //@line 5902
        } else {
         $$pre$phi$iZ2D = $237; //@line 5905
         $F1$0$i = $238; //@line 5905
        }
       }
       HEAP32[$$pre$phi$iZ2D >> 2] = $228; //@line 5908
       HEAP32[$F1$0$i + 12 >> 2] = $228; //@line 5910
       HEAP32[$228 + 8 >> 2] = $F1$0$i; //@line 5912
       HEAP32[$228 + 12 >> 2] = $231; //@line 5914
      }
      HEAP32[1112 >> 2] = $rsize$0$i; //@line 5916
      HEAP32[1124 >> 2] = $151; //@line 5917
     }
     $mem$0 = $v$0$i + 8 | 0; //@line 5920
     STACKTOP = sp; //@line 5921
     return $mem$0 | 0; //@line 5921
    }
   } else {
    $nb$0 = $5; //@line 5924
   }
  } else {
   if ($bytes >>> 0 > 4294967231) {
    $nb$0 = -1; //@line 5929
   } else {
    $246 = $bytes + 11 | 0; //@line 5931
    $247 = $246 & -8; //@line 5932
    $248 = HEAP32[1108 >> 2] | 0; //@line 5933
    if (($248 | 0) == 0) {
     $nb$0 = $247; //@line 5936
    } else {
     $250 = 0 - $247 | 0; //@line 5938
     $251 = $246 >>> 8; //@line 5939
     if (($251 | 0) == 0) {
      $idx$0$i = 0; //@line 5942
     } else {
      if ($247 >>> 0 > 16777215) {
       $idx$0$i = 31; //@line 5946
      } else {
       $256 = ($251 + 1048320 | 0) >>> 16 & 8; //@line 5950
       $257 = $251 << $256; //@line 5951
       $260 = ($257 + 520192 | 0) >>> 16 & 4; //@line 5954
       $262 = $257 << $260; //@line 5956
       $265 = ($262 + 245760 | 0) >>> 16 & 2; //@line 5959
       $270 = 14 - ($260 | $256 | $265) + ($262 << $265 >>> 15) | 0; //@line 5964
       $idx$0$i = $247 >>> ($270 + 7 | 0) & 1 | $270 << 1; //@line 5970
      }
     }
     $277 = HEAP32[1408 + ($idx$0$i << 2) >> 2] | 0; //@line 5974
     L9 : do {
      if (($277 | 0) == 0) {
       $rsize$2$i = $250; //@line 5978
       $t$1$i = 0; //@line 5978
       $v$2$i = 0; //@line 5978
      } else {
       if (($idx$0$i | 0) == 31) {
        $283 = 0; //@line 5982
       } else {
        $283 = 25 - ($idx$0$i >>> 1) | 0; //@line 5986
       }
       $rsize$0$i15 = $250; //@line 5989
       $rst$0$i = 0; //@line 5989
       $sizebits$0$i = $247 << $283; //@line 5989
       $t$0$i14 = $277; //@line 5989
       $v$0$i16 = 0; //@line 5989
       while (1) {
        $286 = HEAP32[$t$0$i14 + 4 >> 2] & -8; //@line 5993
        $287 = $286 - $247 | 0; //@line 5994
        if ($287 >>> 0 < $rsize$0$i15 >>> 0) {
         if (($286 | 0) == ($247 | 0)) {
          $rsize$2$i = $287; //@line 5999
          $t$1$i = $t$0$i14; //@line 5999
          $v$2$i = $t$0$i14; //@line 5999
          break L9;
         } else {
          $rsize$1$i = $287; //@line 6002
          $v$1$i = $t$0$i14; //@line 6002
         }
        } else {
         $rsize$1$i = $rsize$0$i15; //@line 6005
         $v$1$i = $v$0$i16; //@line 6005
        }
        $291 = HEAP32[$t$0$i14 + 20 >> 2] | 0; //@line 6008
        $t$0$i14 = HEAP32[$t$0$i14 + ($sizebits$0$i >>> 31 << 2) + 16 >> 2] | 0; //@line 6011
        $rst$1$i = ($291 | 0) == 0 | ($291 | 0) == ($t$0$i14 | 0) ? $rst$0$i : $291; //@line 6015
        if (($t$0$i14 | 0) == 0) {
         $rsize$2$i = $rsize$1$i; //@line 6019
         $t$1$i = $rst$1$i; //@line 6019
         $v$2$i = $v$1$i; //@line 6019
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i; //@line 6022
         $rst$0$i = $rst$1$i; //@line 6022
         $sizebits$0$i = $sizebits$0$i << 1; //@line 6022
         $v$0$i16 = $v$1$i; //@line 6022
        }
       }
      }
     } while (0);
     if (($t$1$i | 0) == 0 & ($v$2$i | 0) == 0) {
      $301 = 2 << $idx$0$i; //@line 6031
      $304 = $248 & ($301 | 0 - $301); //@line 6034
      if (($304 | 0) == 0) {
       $nb$0 = $247; //@line 6037
       break;
      }
      $308 = ($304 & 0 - $304) + -1 | 0; //@line 6042
      $310 = $308 >>> 12 & 16; //@line 6044
      $311 = $308 >>> $310; //@line 6045
      $313 = $311 >>> 5 & 8; //@line 6047
      $315 = $311 >>> $313; //@line 6049
      $317 = $315 >>> 2 & 4; //@line 6051
      $319 = $315 >>> $317; //@line 6053
      $321 = $319 >>> 1 & 2; //@line 6055
      $323 = $319 >>> $321; //@line 6057
      $325 = $323 >>> 1 & 1; //@line 6059
      $t$2$ph$i = HEAP32[1408 + (($313 | $310 | $317 | $321 | $325) + ($323 >>> $325) << 2) >> 2] | 0; //@line 6065
     } else {
      $t$2$ph$i = $t$1$i; //@line 6067
     }
     if (($t$2$ph$i | 0) == 0) {
      $rsize$3$lcssa$i = $rsize$2$i; //@line 6071
      $v$3$lcssa$i = $v$2$i; //@line 6071
     } else {
      $rsize$329$i = $rsize$2$i; //@line 6073
      $t$228$i = $t$2$ph$i; //@line 6073
      $v$330$i = $v$2$i; //@line 6073
      while (1) {
       $335 = (HEAP32[$t$228$i + 4 >> 2] & -8) - $247 | 0; //@line 6078
       $336 = $335 >>> 0 < $rsize$329$i >>> 0; //@line 6079
       $$rsize$3$i = $336 ? $335 : $rsize$329$i; //@line 6080
       $t$2$v$3$i = $336 ? $t$228$i : $v$330$i; //@line 6081
       $338 = HEAP32[$t$228$i + 16 >> 2] | 0; //@line 6083
       if (($338 | 0) != 0) {
        $rsize$329$i = $$rsize$3$i; //@line 6086
        $t$228$i = $338; //@line 6086
        $v$330$i = $t$2$v$3$i; //@line 6086
        continue;
       }
       $t$228$i = HEAP32[$t$228$i + 20 >> 2] | 0; //@line 6090
       if (($t$228$i | 0) == 0) {
        $rsize$3$lcssa$i = $$rsize$3$i; //@line 6093
        $v$3$lcssa$i = $t$2$v$3$i; //@line 6093
        break;
       } else {
        $rsize$329$i = $$rsize$3$i; //@line 6096
        $v$330$i = $t$2$v$3$i; //@line 6096
       }
      }
     }
     if (($v$3$lcssa$i | 0) == 0) {
      $nb$0 = $247; //@line 6102
     } else {
      if ($rsize$3$lcssa$i >>> 0 < ((HEAP32[1112 >> 2] | 0) - $247 | 0) >>> 0) {
       $347 = HEAP32[1120 >> 2] | 0; //@line 6108
       if ($v$3$lcssa$i >>> 0 < $347 >>> 0) {
        _abort(); //@line 6111
       }
       $349 = $v$3$lcssa$i + $247 | 0; //@line 6114
       if (!($v$3$lcssa$i >>> 0 < $349 >>> 0)) {
        _abort(); //@line 6117
       }
       $352 = HEAP32[$v$3$lcssa$i + 24 >> 2] | 0; //@line 6121
       $354 = HEAP32[$v$3$lcssa$i + 12 >> 2] | 0; //@line 6123
       do {
        if (($354 | 0) == ($v$3$lcssa$i | 0)) {
         $365 = $v$3$lcssa$i + 20 | 0; //@line 6127
         $366 = HEAP32[$365 >> 2] | 0; //@line 6128
         if (($366 | 0) == 0) {
          $368 = $v$3$lcssa$i + 16 | 0; //@line 6131
          $369 = HEAP32[$368 >> 2] | 0; //@line 6132
          if (($369 | 0) == 0) {
           $R$1$i20 = 0; //@line 6135
           break;
          } else {
           $R$0$i18 = $369; //@line 6138
           $RP$0$i17 = $368; //@line 6138
          }
         } else {
          $R$0$i18 = $366; //@line 6141
          $RP$0$i17 = $365; //@line 6141
         }
         while (1) {
          $371 = $R$0$i18 + 20 | 0; //@line 6144
          $372 = HEAP32[$371 >> 2] | 0; //@line 6145
          if (($372 | 0) != 0) {
           $R$0$i18 = $372; //@line 6148
           $RP$0$i17 = $371; //@line 6148
           continue;
          }
          $374 = $R$0$i18 + 16 | 0; //@line 6151
          $375 = HEAP32[$374 >> 2] | 0; //@line 6152
          if (($375 | 0) == 0) {
           break;
          } else {
           $R$0$i18 = $375; //@line 6157
           $RP$0$i17 = $374; //@line 6157
          }
         }
         if ($RP$0$i17 >>> 0 < $347 >>> 0) {
          _abort(); //@line 6162
         } else {
          HEAP32[$RP$0$i17 >> 2] = 0; //@line 6165
          $R$1$i20 = $R$0$i18; //@line 6166
          break;
         }
        } else {
         $357 = HEAP32[$v$3$lcssa$i + 8 >> 2] | 0; //@line 6171
         if ($357 >>> 0 < $347 >>> 0) {
          _abort(); //@line 6174
         }
         $359 = $357 + 12 | 0; //@line 6177
         if ((HEAP32[$359 >> 2] | 0) != ($v$3$lcssa$i | 0)) {
          _abort(); //@line 6181
         }
         $362 = $354 + 8 | 0; //@line 6184
         if ((HEAP32[$362 >> 2] | 0) == ($v$3$lcssa$i | 0)) {
          HEAP32[$359 >> 2] = $354; //@line 6188
          HEAP32[$362 >> 2] = $357; //@line 6189
          $R$1$i20 = $354; //@line 6190
          break;
         } else {
          _abort(); //@line 6193
         }
        }
       } while (0);
       do {
        if (($352 | 0) != 0) {
         $380 = HEAP32[$v$3$lcssa$i + 28 >> 2] | 0; //@line 6202
         $381 = 1408 + ($380 << 2) | 0; //@line 6203
         if (($v$3$lcssa$i | 0) == (HEAP32[$381 >> 2] | 0)) {
          HEAP32[$381 >> 2] = $R$1$i20; //@line 6207
          if (($R$1$i20 | 0) == 0) {
           HEAP32[1108 >> 2] = HEAP32[1108 >> 2] & ~(1 << $380); //@line 6214
           break;
          }
         } else {
          if ($352 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
           _abort(); //@line 6221
          }
          $390 = $352 + 16 | 0; //@line 6224
          if ((HEAP32[$390 >> 2] | 0) == ($v$3$lcssa$i | 0)) {
           HEAP32[$390 >> 2] = $R$1$i20; //@line 6228
          } else {
           HEAP32[$352 + 20 >> 2] = $R$1$i20; //@line 6231
          }
          if (($R$1$i20 | 0) == 0) {
           break;
          }
         }
         if ($R$1$i20 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
          _abort(); //@line 6241
         }
         HEAP32[$R$1$i20 + 24 >> 2] = $352; //@line 6245
         $399 = HEAP32[$v$3$lcssa$i + 16 >> 2] | 0; //@line 6247
         do {
          if (($399 | 0) != 0) {
           if ($399 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
            _abort(); //@line 6254
           } else {
            HEAP32[$R$1$i20 + 16 >> 2] = $399; //@line 6258
            HEAP32[$399 + 24 >> 2] = $R$1$i20; //@line 6260
            break;
           }
          }
         } while (0);
         $406 = HEAP32[$v$3$lcssa$i + 20 >> 2] | 0; //@line 6266
         if (($406 | 0) != 0) {
          if ($406 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
           _abort(); //@line 6272
          } else {
           HEAP32[$R$1$i20 + 20 >> 2] = $406; //@line 6276
           HEAP32[$406 + 24 >> 2] = $R$1$i20; //@line 6278
           break;
          }
         }
        }
       } while (0);
       L87 : do {
        if ($rsize$3$lcssa$i >>> 0 < 16) {
         $413 = $rsize$3$lcssa$i + $247 | 0; //@line 6287
         HEAP32[$v$3$lcssa$i + 4 >> 2] = $413 | 3; //@line 6290
         $416 = $v$3$lcssa$i + ($413 + 4) | 0; //@line 6292
         HEAP32[$416 >> 2] = HEAP32[$416 >> 2] | 1; //@line 6295
        } else {
         HEAP32[$v$3$lcssa$i + 4 >> 2] = $247 | 3; //@line 6299
         HEAP32[$v$3$lcssa$i + ($247 | 4) >> 2] = $rsize$3$lcssa$i | 1; //@line 6303
         HEAP32[$v$3$lcssa$i + ($rsize$3$lcssa$i + $247) >> 2] = $rsize$3$lcssa$i; //@line 6306
         $424 = $rsize$3$lcssa$i >>> 3; //@line 6307
         if ($rsize$3$lcssa$i >>> 0 < 256) {
          $426 = $424 << 1; //@line 6310
          $427 = 1144 + ($426 << 2) | 0; //@line 6311
          $428 = HEAP32[276] | 0; //@line 6312
          $429 = 1 << $424; //@line 6313
          do {
           if (($428 & $429 | 0) == 0) {
            HEAP32[276] = $428 | $429; //@line 6319
            $$pre$phi$i26Z2D = 1144 + ($426 + 2 << 2) | 0; //@line 6322
            $F5$0$i = $427; //@line 6322
           } else {
            $433 = 1144 + ($426 + 2 << 2) | 0; //@line 6325
            $434 = HEAP32[$433 >> 2] | 0; //@line 6326
            if (!($434 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0)) {
             $$pre$phi$i26Z2D = $433; //@line 6330
             $F5$0$i = $434; //@line 6330
             break;
            }
            _abort(); //@line 6333
           }
          } while (0);
          HEAP32[$$pre$phi$i26Z2D >> 2] = $349; //@line 6337
          HEAP32[$F5$0$i + 12 >> 2] = $349; //@line 6339
          HEAP32[$v$3$lcssa$i + ($247 + 8) >> 2] = $F5$0$i; //@line 6342
          HEAP32[$v$3$lcssa$i + ($247 + 12) >> 2] = $427; //@line 6345
          break;
         }
         $440 = $rsize$3$lcssa$i >>> 8; //@line 6348
         if (($440 | 0) == 0) {
          $I7$0$i = 0; //@line 6351
         } else {
          if ($rsize$3$lcssa$i >>> 0 > 16777215) {
           $I7$0$i = 31; //@line 6355
          } else {
           $445 = ($440 + 1048320 | 0) >>> 16 & 8; //@line 6359
           $446 = $440 << $445; //@line 6360
           $449 = ($446 + 520192 | 0) >>> 16 & 4; //@line 6363
           $451 = $446 << $449; //@line 6365
           $454 = ($451 + 245760 | 0) >>> 16 & 2; //@line 6368
           $459 = 14 - ($449 | $445 | $454) + ($451 << $454 >>> 15) | 0; //@line 6373
           $I7$0$i = $rsize$3$lcssa$i >>> ($459 + 7 | 0) & 1 | $459 << 1; //@line 6379
          }
         }
         $465 = 1408 + ($I7$0$i << 2) | 0; //@line 6382
         HEAP32[$v$3$lcssa$i + ($247 + 28) >> 2] = $I7$0$i; //@line 6385
         HEAP32[$v$3$lcssa$i + ($247 + 20) >> 2] = 0; //@line 6390
         HEAP32[$v$3$lcssa$i + ($247 + 16) >> 2] = 0; //@line 6391
         $469 = HEAP32[1108 >> 2] | 0; //@line 6392
         $470 = 1 << $I7$0$i; //@line 6393
         if (($469 & $470 | 0) == 0) {
          HEAP32[1108 >> 2] = $469 | $470; //@line 6398
          HEAP32[$465 >> 2] = $349; //@line 6399
          HEAP32[$v$3$lcssa$i + ($247 + 24) >> 2] = $465; //@line 6402
          HEAP32[$v$3$lcssa$i + ($247 + 12) >> 2] = $349; //@line 6405
          HEAP32[$v$3$lcssa$i + ($247 + 8) >> 2] = $349; //@line 6408
          break;
         }
         $477 = HEAP32[$465 >> 2] | 0; //@line 6411
         if (($I7$0$i | 0) == 31) {
          $486 = 0; //@line 6414
         } else {
          $486 = 25 - ($I7$0$i >>> 1) | 0; //@line 6418
         }
         L108 : do {
          if ((HEAP32[$477 + 4 >> 2] & -8 | 0) == ($rsize$3$lcssa$i | 0)) {
           $T$0$lcssa$i = $477; //@line 6426
          } else {
           $K12$025$i = $rsize$3$lcssa$i << $486; //@line 6429
           $T$024$i = $477; //@line 6429
           while (1) {
            $494 = $T$024$i + ($K12$025$i >>> 31 << 2) + 16 | 0; //@line 6432
            $489 = HEAP32[$494 >> 2] | 0; //@line 6433
            if (($489 | 0) == 0) {
             break;
            }
            if ((HEAP32[$489 + 4 >> 2] & -8 | 0) == ($rsize$3$lcssa$i | 0)) {
             $T$0$lcssa$i = $489; //@line 6444
             break L108;
            } else {
             $K12$025$i = $K12$025$i << 1; //@line 6447
             $T$024$i = $489; //@line 6447
            }
           }
           if ($494 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
            _abort(); //@line 6453
           } else {
            HEAP32[$494 >> 2] = $349; //@line 6456
            HEAP32[$v$3$lcssa$i + ($247 + 24) >> 2] = $T$024$i; //@line 6459
            HEAP32[$v$3$lcssa$i + ($247 + 12) >> 2] = $349; //@line 6462
            HEAP32[$v$3$lcssa$i + ($247 + 8) >> 2] = $349; //@line 6465
            break L87;
           }
          }
         } while (0);
         $501 = $T$0$lcssa$i + 8 | 0; //@line 6470
         $502 = HEAP32[$501 >> 2] | 0; //@line 6471
         $503 = HEAP32[1120 >> 2] | 0; //@line 6472
         if ($T$0$lcssa$i >>> 0 < $503 >>> 0) {
          _abort(); //@line 6475
         }
         if ($502 >>> 0 < $503 >>> 0) {
          _abort(); //@line 6480
         } else {
          HEAP32[$502 + 12 >> 2] = $349; //@line 6484
          HEAP32[$501 >> 2] = $349; //@line 6485
          HEAP32[$v$3$lcssa$i + ($247 + 8) >> 2] = $502; //@line 6488
          HEAP32[$v$3$lcssa$i + ($247 + 12) >> 2] = $T$0$lcssa$i; //@line 6491
          HEAP32[$v$3$lcssa$i + ($247 + 24) >> 2] = 0; //@line 6494
          break;
         }
        }
       } while (0);
       $mem$0 = $v$3$lcssa$i + 8 | 0; //@line 6500
       STACKTOP = sp; //@line 6501
       return $mem$0 | 0; //@line 6501
      } else {
       $nb$0 = $247; //@line 6503
      }
     }
    }
   }
  }
 } while (0);
 $511 = HEAP32[1112 >> 2] | 0; //@line 6510
 if (!($nb$0 >>> 0 > $511 >>> 0)) {
  $513 = $511 - $nb$0 | 0; //@line 6513
  $514 = HEAP32[1124 >> 2] | 0; //@line 6514
  if ($513 >>> 0 > 15) {
   HEAP32[1124 >> 2] = $514 + $nb$0; //@line 6518
   HEAP32[1112 >> 2] = $513; //@line 6519
   HEAP32[$514 + ($nb$0 + 4) >> 2] = $513 | 1; //@line 6523
   HEAP32[$514 + $511 >> 2] = $513; //@line 6525
   HEAP32[$514 + 4 >> 2] = $nb$0 | 3; //@line 6528
  } else {
   HEAP32[1112 >> 2] = 0; //@line 6530
   HEAP32[1124 >> 2] = 0; //@line 6531
   HEAP32[$514 + 4 >> 2] = $511 | 3; //@line 6534
   $524 = $514 + ($511 + 4) | 0; //@line 6536
   HEAP32[$524 >> 2] = HEAP32[$524 >> 2] | 1; //@line 6539
  }
  $mem$0 = $514 + 8 | 0; //@line 6542
  STACKTOP = sp; //@line 6543
  return $mem$0 | 0; //@line 6543
 }
 $528 = HEAP32[1116 >> 2] | 0; //@line 6545
 if ($nb$0 >>> 0 < $528 >>> 0) {
  $530 = $528 - $nb$0 | 0; //@line 6548
  HEAP32[1116 >> 2] = $530; //@line 6549
  $531 = HEAP32[1128 >> 2] | 0; //@line 6550
  HEAP32[1128 >> 2] = $531 + $nb$0; //@line 6552
  HEAP32[$531 + ($nb$0 + 4) >> 2] = $530 | 1; //@line 6556
  HEAP32[$531 + 4 >> 2] = $nb$0 | 3; //@line 6559
  $mem$0 = $531 + 8 | 0; //@line 6561
  STACKTOP = sp; //@line 6562
  return $mem$0 | 0; //@line 6562
 }
 do {
  if ((HEAP32[394] | 0) == 0) {
   $540 = _sysconf(30) | 0; //@line 6568
   if (($540 + -1 & $540 | 0) == 0) {
    HEAP32[1584 >> 2] = $540; //@line 6573
    HEAP32[1580 >> 2] = $540; //@line 6574
    HEAP32[1588 >> 2] = -1; //@line 6575
    HEAP32[1592 >> 2] = -1; //@line 6576
    HEAP32[1596 >> 2] = 0; //@line 6577
    HEAP32[1548 >> 2] = 0; //@line 6578
    HEAP32[394] = (_time(0) | 0) & -16 ^ 1431655768; //@line 6582
    break;
   } else {
    _abort(); //@line 6585
   }
  }
 } while (0);
 $547 = $nb$0 + 48 | 0; //@line 6590
 $548 = HEAP32[1584 >> 2] | 0; //@line 6591
 $549 = $nb$0 + 47 | 0; //@line 6592
 $550 = $548 + $549 | 0; //@line 6593
 $551 = 0 - $548 | 0; //@line 6594
 $552 = $550 & $551; //@line 6595
 if (!($552 >>> 0 > $nb$0 >>> 0)) {
  $mem$0 = 0; //@line 6598
  STACKTOP = sp; //@line 6599
  return $mem$0 | 0; //@line 6599
 }
 $554 = HEAP32[1544 >> 2] | 0; //@line 6601
 if (($554 | 0) != 0) {
  $556 = HEAP32[1536 >> 2] | 0; //@line 6604
  $557 = $556 + $552 | 0; //@line 6605
  if ($557 >>> 0 <= $556 >>> 0 | $557 >>> 0 > $554 >>> 0) {
   $mem$0 = 0; //@line 6610
   STACKTOP = sp; //@line 6611
   return $mem$0 | 0; //@line 6611
  }
 }
 L269 : do {
  if ((HEAP32[1548 >> 2] & 4 | 0) == 0) {
   $563 = HEAP32[1128 >> 2] | 0; //@line 6619
   L271 : do {
    if (($563 | 0) == 0) {
     label = 182; //@line 6623
    } else {
     $sp$0$i$i = 1552 | 0; //@line 6625
     while (1) {
      $565 = HEAP32[$sp$0$i$i >> 2] | 0; //@line 6627
      if (!($565 >>> 0 > $563 >>> 0)) {
       $567 = $sp$0$i$i + 4 | 0; //@line 6630
       if (($565 + (HEAP32[$567 >> 2] | 0) | 0) >>> 0 > $563 >>> 0) {
        break;
       }
      }
      $572 = HEAP32[$sp$0$i$i + 8 >> 2] | 0; //@line 6639
      if (($572 | 0) == 0) {
       label = 182; //@line 6642
       break L271;
      } else {
       $sp$0$i$i = $572; //@line 6645
      }
     }
     if (($sp$0$i$i | 0) == 0) {
      label = 182; //@line 6650
     } else {
      $599 = $550 - (HEAP32[1116 >> 2] | 0) & $551; //@line 6654
      if ($599 >>> 0 < 2147483647) {
       $601 = _sbrk($599 | 0) | 0; //@line 6657
       $605 = ($601 | 0) == ((HEAP32[$sp$0$i$i >> 2] | 0) + (HEAP32[$567 >> 2] | 0) | 0); //@line 6661
       $br$0$i = $601; //@line 6664
       $ssize$1$i = $599; //@line 6664
       $tbase$0$i = $605 ? $601 : -1; //@line 6664
       $tsize$0$i = $605 ? $599 : 0; //@line 6664
       label = 191; //@line 6665
      } else {
       $tsize$0323841$i = 0; //@line 6667
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 182) {
     $575 = _sbrk(0) | 0; //@line 6674
     if (($575 | 0) == (-1 | 0)) {
      $tsize$0323841$i = 0; //@line 6677
     } else {
      $577 = $575; //@line 6679
      $578 = HEAP32[1580 >> 2] | 0; //@line 6680
      $579 = $578 + -1 | 0; //@line 6681
      if (($579 & $577 | 0) == 0) {
       $ssize$0$i = $552; //@line 6685
      } else {
       $ssize$0$i = $552 - $577 + ($579 + $577 & 0 - $578) | 0; //@line 6692
      }
      $587 = HEAP32[1536 >> 2] | 0; //@line 6694
      $588 = $587 + $ssize$0$i | 0; //@line 6695
      if ($ssize$0$i >>> 0 > $nb$0 >>> 0 & $ssize$0$i >>> 0 < 2147483647) {
       $591 = HEAP32[1544 >> 2] | 0; //@line 6700
       if (($591 | 0) != 0) {
        if ($588 >>> 0 <= $587 >>> 0 | $588 >>> 0 > $591 >>> 0) {
         $tsize$0323841$i = 0; //@line 6707
         break;
        }
       }
       $595 = _sbrk($ssize$0$i | 0) | 0; //@line 6711
       $596 = ($595 | 0) == ($575 | 0); //@line 6712
       $br$0$i = $595; //@line 6715
       $ssize$1$i = $ssize$0$i; //@line 6715
       $tbase$0$i = $596 ? $575 : -1; //@line 6715
       $tsize$0$i = $596 ? $ssize$0$i : 0; //@line 6715
       label = 191; //@line 6716
      } else {
       $tsize$0323841$i = 0; //@line 6718
      }
     }
    }
   } while (0);
   L291 : do {
    if ((label | 0) == 191) {
     $606 = 0 - $ssize$1$i | 0; //@line 6725
     if (($tbase$0$i | 0) != (-1 | 0)) {
      $tbase$247$i = $tbase$0$i; //@line 6728
      $tsize$246$i = $tsize$0$i; //@line 6728
      label = 202; //@line 6729
      break L269;
     }
     do {
      if (($br$0$i | 0) != (-1 | 0) & $ssize$1$i >>> 0 < 2147483647 & $ssize$1$i >>> 0 < $547 >>> 0) {
       $611 = HEAP32[1584 >> 2] | 0; //@line 6739
       $615 = $549 - $ssize$1$i + $611 & 0 - $611; //@line 6743
       if ($615 >>> 0 < 2147483647) {
        if ((_sbrk($615 | 0) | 0) == (-1 | 0)) {
         _sbrk($606 | 0) | 0; //@line 6749
         $tsize$0323841$i = $tsize$0$i; //@line 6750
         break L291;
        } else {
         $ssize$2$i = $615 + $ssize$1$i | 0; //@line 6754
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$i; //@line 6758
       }
      } else {
       $ssize$2$i = $ssize$1$i; //@line 6761
      }
     } while (0);
     if (($br$0$i | 0) == (-1 | 0)) {
      $tsize$0323841$i = $tsize$0$i; //@line 6766
     } else {
      $tbase$247$i = $br$0$i; //@line 6768
      $tsize$246$i = $ssize$2$i; //@line 6768
      label = 202; //@line 6769
      break L269;
     }
    }
   } while (0);
   HEAP32[1548 >> 2] = HEAP32[1548 >> 2] | 4; //@line 6776
   $tsize$1$i = $tsize$0323841$i; //@line 6777
   label = 199; //@line 6778
  } else {
   $tsize$1$i = 0; //@line 6780
   label = 199; //@line 6781
  }
 } while (0);
 if ((label | 0) == 199) {
  if ($552 >>> 0 < 2147483647) {
   $624 = _sbrk($552 | 0) | 0; //@line 6787
   $625 = _sbrk(0) | 0; //@line 6788
   if (($625 | 0) != (-1 | 0) & ($624 | 0) != (-1 | 0) & $624 >>> 0 < $625 >>> 0) {
    $629 = $625 - $624 | 0; //@line 6797
    $631 = $629 >>> 0 > ($nb$0 + 40 | 0) >>> 0; //@line 6799
    if ($631) {
     $tbase$247$i = $624; //@line 6802
     $tsize$246$i = $631 ? $629 : $tsize$1$i; //@line 6802
     label = 202; //@line 6803
    }
   }
  }
 }
 if ((label | 0) == 202) {
  $633 = (HEAP32[1536 >> 2] | 0) + $tsize$246$i | 0; //@line 6810
  HEAP32[1536 >> 2] = $633; //@line 6811
  if ($633 >>> 0 > (HEAP32[1540 >> 2] | 0) >>> 0) {
   HEAP32[1540 >> 2] = $633; //@line 6815
  }
  $636 = HEAP32[1128 >> 2] | 0; //@line 6817
  L311 : do {
   if (($636 | 0) == 0) {
    $638 = HEAP32[1120 >> 2] | 0; //@line 6821
    if (($638 | 0) == 0 | $tbase$247$i >>> 0 < $638 >>> 0) {
     HEAP32[1120 >> 2] = $tbase$247$i; //@line 6826
    }
    HEAP32[1552 >> 2] = $tbase$247$i; //@line 6828
    HEAP32[1556 >> 2] = $tsize$246$i; //@line 6829
    HEAP32[1564 >> 2] = 0; //@line 6830
    HEAP32[1140 >> 2] = HEAP32[394]; //@line 6832
    HEAP32[1136 >> 2] = -1; //@line 6833
    $i$02$i$i = 0; //@line 6834
    do {
     $642 = $i$02$i$i << 1; //@line 6836
     $643 = 1144 + ($642 << 2) | 0; //@line 6837
     HEAP32[1144 + ($642 + 3 << 2) >> 2] = $643; //@line 6840
     HEAP32[1144 + ($642 + 2 << 2) >> 2] = $643; //@line 6843
     $i$02$i$i = $i$02$i$i + 1 | 0; //@line 6844
    } while (($i$02$i$i | 0) != 32);
    $649 = $tbase$247$i + 8 | 0; //@line 6854
    if (($649 & 7 | 0) == 0) {
     $655 = 0; //@line 6858
    } else {
     $655 = 0 - $649 & 7; //@line 6862
    }
    $656 = $tsize$246$i + -40 - $655 | 0; //@line 6865
    HEAP32[1128 >> 2] = $tbase$247$i + $655; //@line 6866
    HEAP32[1116 >> 2] = $656; //@line 6867
    HEAP32[$tbase$247$i + ($655 + 4) >> 2] = $656 | 1; //@line 6871
    HEAP32[$tbase$247$i + ($tsize$246$i + -36) >> 2] = 40; //@line 6874
    HEAP32[1132 >> 2] = HEAP32[1592 >> 2]; //@line 6876
   } else {
    $sp$075$i = 1552 | 0; //@line 6878
    while (1) {
     $661 = HEAP32[$sp$075$i >> 2] | 0; //@line 6880
     $662 = $sp$075$i + 4 | 0; //@line 6881
     $663 = HEAP32[$662 >> 2] | 0; //@line 6882
     if (($tbase$247$i | 0) == ($661 + $663 | 0)) {
      label = 214; //@line 6886
      break;
     }
     $667 = HEAP32[$sp$075$i + 8 >> 2] | 0; //@line 6890
     if (($667 | 0) == 0) {
      break;
     } else {
      $sp$075$i = $667; //@line 6895
     }
    }
    if ((label | 0) == 214) {
     if ((HEAP32[$sp$075$i + 12 >> 2] & 8 | 0) == 0) {
      if ($636 >>> 0 >= $661 >>> 0 & $636 >>> 0 < $tbase$247$i >>> 0) {
       HEAP32[$662 >> 2] = $663 + $tsize$246$i; //@line 6909
       $677 = (HEAP32[1116 >> 2] | 0) + $tsize$246$i | 0; //@line 6911
       $679 = $636 + 8 | 0; //@line 6913
       if (($679 & 7 | 0) == 0) {
        $685 = 0; //@line 6917
       } else {
        $685 = 0 - $679 & 7; //@line 6921
       }
       $686 = $677 - $685 | 0; //@line 6924
       HEAP32[1128 >> 2] = $636 + $685; //@line 6925
       HEAP32[1116 >> 2] = $686; //@line 6926
       HEAP32[$636 + ($685 + 4) >> 2] = $686 | 1; //@line 6930
       HEAP32[$636 + ($677 + 4) >> 2] = 40; //@line 6933
       HEAP32[1132 >> 2] = HEAP32[1592 >> 2]; //@line 6935
       break;
      }
     }
    }
    if ($tbase$247$i >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
     HEAP32[1120 >> 2] = $tbase$247$i; //@line 6943
    }
    $693 = $tbase$247$i + $tsize$246$i | 0; //@line 6945
    $sp$168$i = 1552 | 0; //@line 6946
    while (1) {
     if ((HEAP32[$sp$168$i >> 2] | 0) == ($693 | 0)) {
      label = 224; //@line 6951
      break;
     }
     $697 = HEAP32[$sp$168$i + 8 >> 2] | 0; //@line 6955
     if (($697 | 0) == 0) {
      break;
     } else {
      $sp$168$i = $697; //@line 6960
     }
    }
    if ((label | 0) == 224) {
     if ((HEAP32[$sp$168$i + 12 >> 2] & 8 | 0) == 0) {
      HEAP32[$sp$168$i >> 2] = $tbase$247$i; //@line 6969
      $703 = $sp$168$i + 4 | 0; //@line 6970
      HEAP32[$703 >> 2] = (HEAP32[$703 >> 2] | 0) + $tsize$246$i; //@line 6973
      $707 = $tbase$247$i + 8 | 0; //@line 6975
      if (($707 & 7 | 0) == 0) {
       $713 = 0; //@line 6979
      } else {
       $713 = 0 - $707 & 7; //@line 6983
      }
      $715 = $tbase$247$i + ($tsize$246$i + 8) | 0; //@line 6988
      if (($715 & 7 | 0) == 0) {
       $720 = 0; //@line 6992
      } else {
       $720 = 0 - $715 & 7; //@line 6996
      }
      $721 = $tbase$247$i + ($720 + $tsize$246$i) | 0; //@line 6999
      $$sum$i21$i = $713 + $nb$0 | 0; //@line 7003
      $725 = $tbase$247$i + $$sum$i21$i | 0; //@line 7004
      $726 = $721 - ($tbase$247$i + $713) - $nb$0 | 0; //@line 7005
      HEAP32[$tbase$247$i + ($713 + 4) >> 2] = $nb$0 | 3; //@line 7009
      L348 : do {
       if (($721 | 0) == (HEAP32[1128 >> 2] | 0)) {
        $732 = (HEAP32[1116 >> 2] | 0) + $726 | 0; //@line 7015
        HEAP32[1116 >> 2] = $732; //@line 7016
        HEAP32[1128 >> 2] = $725; //@line 7017
        HEAP32[$tbase$247$i + ($$sum$i21$i + 4) >> 2] = $732 | 1; //@line 7021
       } else {
        if (($721 | 0) == (HEAP32[1124 >> 2] | 0)) {
         $738 = (HEAP32[1112 >> 2] | 0) + $726 | 0; //@line 7027
         HEAP32[1112 >> 2] = $738; //@line 7028
         HEAP32[1124 >> 2] = $725; //@line 7029
         HEAP32[$tbase$247$i + ($$sum$i21$i + 4) >> 2] = $738 | 1; //@line 7033
         HEAP32[$tbase$247$i + ($738 + $$sum$i21$i) >> 2] = $738; //@line 7036
         break;
        }
        $$sum2$i23$i = $tsize$246$i + 4 | 0; //@line 7039
        $743 = HEAP32[$tbase$247$i + ($$sum2$i23$i + $720) >> 2] | 0; //@line 7042
        if (($743 & 3 | 0) == 1) {
         $746 = $743 & -8; //@line 7046
         $747 = $743 >>> 3; //@line 7047
         L356 : do {
          if ($743 >>> 0 < 256) {
           $750 = HEAP32[$tbase$247$i + (($720 | 8) + $tsize$246$i) >> 2] | 0; //@line 7054
           $752 = HEAP32[$tbase$247$i + ($tsize$246$i + 12 + $720) >> 2] | 0; //@line 7058
           $754 = 1144 + ($747 << 1 << 2) | 0; //@line 7060
           do {
            if (($750 | 0) != ($754 | 0)) {
             if ($750 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
              _abort(); //@line 7067
             }
             if ((HEAP32[$750 + 12 >> 2] | 0) == ($721 | 0)) {
              break;
             }
             _abort(); //@line 7076
            }
           } while (0);
           if (($752 | 0) == ($750 | 0)) {
            HEAP32[276] = HEAP32[276] & ~(1 << $747); //@line 7086
            break;
           }
           do {
            if (($752 | 0) == ($754 | 0)) {
             $$pre$phi58$i$iZ2D = $752 + 8 | 0; //@line 7093
            } else {
             if ($752 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
              _abort(); //@line 7098
             }
             $769 = $752 + 8 | 0; //@line 7101
             if ((HEAP32[$769 >> 2] | 0) == ($721 | 0)) {
              $$pre$phi58$i$iZ2D = $769; //@line 7105
              break;
             }
             _abort(); //@line 7108
            }
           } while (0);
           HEAP32[$750 + 12 >> 2] = $752; //@line 7113
           HEAP32[$$pre$phi58$i$iZ2D >> 2] = $750; //@line 7114
          } else {
           $774 = HEAP32[$tbase$247$i + (($720 | 24) + $tsize$246$i) >> 2] | 0; //@line 7119
           $776 = HEAP32[$tbase$247$i + ($tsize$246$i + 12 + $720) >> 2] | 0; //@line 7123
           do {
            if (($776 | 0) == ($721 | 0)) {
             $$sum67$i$i = $720 | 16; //@line 7127
             $788 = $tbase$247$i + ($$sum2$i23$i + $$sum67$i$i) | 0; //@line 7129
             $789 = HEAP32[$788 >> 2] | 0; //@line 7130
             if (($789 | 0) == 0) {
              $791 = $tbase$247$i + ($$sum67$i$i + $tsize$246$i) | 0; //@line 7134
              $792 = HEAP32[$791 >> 2] | 0; //@line 7135
              if (($792 | 0) == 0) {
               $R$1$i$i = 0; //@line 7138
               break;
              } else {
               $R$0$i$i = $792; //@line 7141
               $RP$0$i$i = $791; //@line 7141
              }
             } else {
              $R$0$i$i = $789; //@line 7144
              $RP$0$i$i = $788; //@line 7144
             }
             while (1) {
              $794 = $R$0$i$i + 20 | 0; //@line 7147
              $795 = HEAP32[$794 >> 2] | 0; //@line 7148
              if (($795 | 0) != 0) {
               $R$0$i$i = $795; //@line 7151
               $RP$0$i$i = $794; //@line 7151
               continue;
              }
              $797 = $R$0$i$i + 16 | 0; //@line 7154
              $798 = HEAP32[$797 >> 2] | 0; //@line 7155
              if (($798 | 0) == 0) {
               break;
              } else {
               $R$0$i$i = $798; //@line 7160
               $RP$0$i$i = $797; //@line 7160
              }
             }
             if ($RP$0$i$i >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
              _abort(); //@line 7166
             } else {
              HEAP32[$RP$0$i$i >> 2] = 0; //@line 7169
              $R$1$i$i = $R$0$i$i; //@line 7170
              break;
             }
            } else {
             $779 = HEAP32[$tbase$247$i + (($720 | 8) + $tsize$246$i) >> 2] | 0; //@line 7177
             if ($779 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
              _abort(); //@line 7181
             }
             $782 = $779 + 12 | 0; //@line 7184
             if ((HEAP32[$782 >> 2] | 0) != ($721 | 0)) {
              _abort(); //@line 7188
             }
             $785 = $776 + 8 | 0; //@line 7191
             if ((HEAP32[$785 >> 2] | 0) == ($721 | 0)) {
              HEAP32[$782 >> 2] = $776; //@line 7195
              HEAP32[$785 >> 2] = $779; //@line 7196
              $R$1$i$i = $776; //@line 7197
              break;
             } else {
              _abort(); //@line 7200
             }
            }
           } while (0);
           if (($774 | 0) == 0) {
            break;
           }
           $804 = HEAP32[$tbase$247$i + ($tsize$246$i + 28 + $720) >> 2] | 0; //@line 7212
           $805 = 1408 + ($804 << 2) | 0; //@line 7213
           do {
            if (($721 | 0) == (HEAP32[$805 >> 2] | 0)) {
             HEAP32[$805 >> 2] = $R$1$i$i; //@line 7218
             if (($R$1$i$i | 0) != 0) {
              break;
             }
             HEAP32[1108 >> 2] = HEAP32[1108 >> 2] & ~(1 << $804); //@line 7227
             break L356;
            } else {
             if ($774 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
              _abort(); //@line 7233
             }
             $814 = $774 + 16 | 0; //@line 7236
             if ((HEAP32[$814 >> 2] | 0) == ($721 | 0)) {
              HEAP32[$814 >> 2] = $R$1$i$i; //@line 7240
             } else {
              HEAP32[$774 + 20 >> 2] = $R$1$i$i; //@line 7243
             }
             if (($R$1$i$i | 0) == 0) {
              break L356;
             }
            }
           } while (0);
           if ($R$1$i$i >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
            _abort(); //@line 7254
           }
           HEAP32[$R$1$i$i + 24 >> 2] = $774; //@line 7258
           $$sum3132$i$i = $720 | 16; //@line 7259
           $823 = HEAP32[$tbase$247$i + ($$sum3132$i$i + $tsize$246$i) >> 2] | 0; //@line 7262
           do {
            if (($823 | 0) != 0) {
             if ($823 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
              _abort(); //@line 7269
             } else {
              HEAP32[$R$1$i$i + 16 >> 2] = $823; //@line 7273
              HEAP32[$823 + 24 >> 2] = $R$1$i$i; //@line 7275
              break;
             }
            }
           } while (0);
           $830 = HEAP32[$tbase$247$i + ($$sum2$i23$i + $$sum3132$i$i) >> 2] | 0; //@line 7282
           if (($830 | 0) == 0) {
            break;
           }
           if ($830 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
            _abort(); //@line 7290
           } else {
            HEAP32[$R$1$i$i + 20 >> 2] = $830; //@line 7294
            HEAP32[$830 + 24 >> 2] = $R$1$i$i; //@line 7296
            break;
           }
          }
         } while (0);
         $oldfirst$0$i$i = $tbase$247$i + (($746 | $720) + $tsize$246$i) | 0; //@line 7305
         $qsize$0$i$i = $746 + $726 | 0; //@line 7305
        } else {
         $oldfirst$0$i$i = $721; //@line 7307
         $qsize$0$i$i = $726; //@line 7307
        }
        $838 = $oldfirst$0$i$i + 4 | 0; //@line 7309
        HEAP32[$838 >> 2] = HEAP32[$838 >> 2] & -2; //@line 7312
        HEAP32[$tbase$247$i + ($$sum$i21$i + 4) >> 2] = $qsize$0$i$i | 1; //@line 7316
        HEAP32[$tbase$247$i + ($qsize$0$i$i + $$sum$i21$i) >> 2] = $qsize$0$i$i; //@line 7319
        $844 = $qsize$0$i$i >>> 3; //@line 7320
        if ($qsize$0$i$i >>> 0 < 256) {
         $846 = $844 << 1; //@line 7323
         $847 = 1144 + ($846 << 2) | 0; //@line 7324
         $848 = HEAP32[276] | 0; //@line 7325
         $849 = 1 << $844; //@line 7326
         do {
          if (($848 & $849 | 0) == 0) {
           HEAP32[276] = $848 | $849; //@line 7332
           $$pre$phi$i26$iZ2D = 1144 + ($846 + 2 << 2) | 0; //@line 7335
           $F4$0$i$i = $847; //@line 7335
          } else {
           $853 = 1144 + ($846 + 2 << 2) | 0; //@line 7338
           $854 = HEAP32[$853 >> 2] | 0; //@line 7339
           if (!($854 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0)) {
            $$pre$phi$i26$iZ2D = $853; //@line 7343
            $F4$0$i$i = $854; //@line 7343
            break;
           }
           _abort(); //@line 7346
          }
         } while (0);
         HEAP32[$$pre$phi$i26$iZ2D >> 2] = $725; //@line 7350
         HEAP32[$F4$0$i$i + 12 >> 2] = $725; //@line 7352
         HEAP32[$tbase$247$i + ($$sum$i21$i + 8) >> 2] = $F4$0$i$i; //@line 7355
         HEAP32[$tbase$247$i + ($$sum$i21$i + 12) >> 2] = $847; //@line 7358
         break;
        }
        $860 = $qsize$0$i$i >>> 8; //@line 7361
        do {
         if (($860 | 0) == 0) {
          $I7$0$i$i = 0; //@line 7365
         } else {
          if ($qsize$0$i$i >>> 0 > 16777215) {
           $I7$0$i$i = 31; //@line 7369
           break;
          }
          $865 = ($860 + 1048320 | 0) >>> 16 & 8; //@line 7374
          $866 = $860 << $865; //@line 7375
          $869 = ($866 + 520192 | 0) >>> 16 & 4; //@line 7378
          $871 = $866 << $869; //@line 7380
          $874 = ($871 + 245760 | 0) >>> 16 & 2; //@line 7383
          $879 = 14 - ($869 | $865 | $874) + ($871 << $874 >>> 15) | 0; //@line 7388
          $I7$0$i$i = $qsize$0$i$i >>> ($879 + 7 | 0) & 1 | $879 << 1; //@line 7394
         }
        } while (0);
        $885 = 1408 + ($I7$0$i$i << 2) | 0; //@line 7397
        HEAP32[$tbase$247$i + ($$sum$i21$i + 28) >> 2] = $I7$0$i$i; //@line 7400
        HEAP32[$tbase$247$i + ($$sum$i21$i + 20) >> 2] = 0; //@line 7405
        HEAP32[$tbase$247$i + ($$sum$i21$i + 16) >> 2] = 0; //@line 7406
        $889 = HEAP32[1108 >> 2] | 0; //@line 7407
        $890 = 1 << $I7$0$i$i; //@line 7408
        if (($889 & $890 | 0) == 0) {
         HEAP32[1108 >> 2] = $889 | $890; //@line 7413
         HEAP32[$885 >> 2] = $725; //@line 7414
         HEAP32[$tbase$247$i + ($$sum$i21$i + 24) >> 2] = $885; //@line 7417
         HEAP32[$tbase$247$i + ($$sum$i21$i + 12) >> 2] = $725; //@line 7420
         HEAP32[$tbase$247$i + ($$sum$i21$i + 8) >> 2] = $725; //@line 7423
         break;
        }
        $897 = HEAP32[$885 >> 2] | 0; //@line 7426
        if (($I7$0$i$i | 0) == 31) {
         $906 = 0; //@line 7429
        } else {
         $906 = 25 - ($I7$0$i$i >>> 1) | 0; //@line 7433
        }
        L445 : do {
         if ((HEAP32[$897 + 4 >> 2] & -8 | 0) == ($qsize$0$i$i | 0)) {
          $T$0$lcssa$i28$i = $897; //@line 7441
         } else {
          $K8$052$i$i = $qsize$0$i$i << $906; //@line 7444
          $T$051$i$i = $897; //@line 7444
          while (1) {
           $914 = $T$051$i$i + ($K8$052$i$i >>> 31 << 2) + 16 | 0; //@line 7447
           $909 = HEAP32[$914 >> 2] | 0; //@line 7448
           if (($909 | 0) == 0) {
            break;
           }
           if ((HEAP32[$909 + 4 >> 2] & -8 | 0) == ($qsize$0$i$i | 0)) {
            $T$0$lcssa$i28$i = $909; //@line 7459
            break L445;
           } else {
            $K8$052$i$i = $K8$052$i$i << 1; //@line 7462
            $T$051$i$i = $909; //@line 7462
           }
          }
          if ($914 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
           _abort(); //@line 7468
          } else {
           HEAP32[$914 >> 2] = $725; //@line 7471
           HEAP32[$tbase$247$i + ($$sum$i21$i + 24) >> 2] = $T$051$i$i; //@line 7474
           HEAP32[$tbase$247$i + ($$sum$i21$i + 12) >> 2] = $725; //@line 7477
           HEAP32[$tbase$247$i + ($$sum$i21$i + 8) >> 2] = $725; //@line 7480
           break L348;
          }
         }
        } while (0);
        $921 = $T$0$lcssa$i28$i + 8 | 0; //@line 7485
        $922 = HEAP32[$921 >> 2] | 0; //@line 7486
        $923 = HEAP32[1120 >> 2] | 0; //@line 7487
        if ($T$0$lcssa$i28$i >>> 0 < $923 >>> 0) {
         _abort(); //@line 7490
        }
        if ($922 >>> 0 < $923 >>> 0) {
         _abort(); //@line 7495
        } else {
         HEAP32[$922 + 12 >> 2] = $725; //@line 7499
         HEAP32[$921 >> 2] = $725; //@line 7500
         HEAP32[$tbase$247$i + ($$sum$i21$i + 8) >> 2] = $922; //@line 7503
         HEAP32[$tbase$247$i + ($$sum$i21$i + 12) >> 2] = $T$0$lcssa$i28$i; //@line 7506
         HEAP32[$tbase$247$i + ($$sum$i21$i + 24) >> 2] = 0; //@line 7509
         break;
        }
       }
      } while (0);
      $mem$0 = $tbase$247$i + ($713 | 8) | 0; //@line 7516
      STACKTOP = sp; //@line 7517
      return $mem$0 | 0; //@line 7517
     }
    }
    $sp$0$i$i$i = 1552 | 0; //@line 7520
    while (1) {
     $931 = HEAP32[$sp$0$i$i$i >> 2] | 0; //@line 7522
     if (!($931 >>> 0 > $636 >>> 0)) {
      $934 = HEAP32[$sp$0$i$i$i + 4 >> 2] | 0; //@line 7526
      $935 = $931 + $934 | 0; //@line 7527
      if ($935 >>> 0 > $636 >>> 0) {
       break;
      }
     }
     $sp$0$i$i$i = HEAP32[$sp$0$i$i$i + 8 >> 2] | 0; //@line 7535
    }
    $940 = $931 + ($934 + -39) | 0; //@line 7540
    if (($940 & 7 | 0) == 0) {
     $945 = 0; //@line 7544
    } else {
     $945 = 0 - $940 & 7; //@line 7548
    }
    $946 = $931 + ($934 + -47 + $945) | 0; //@line 7551
    $949 = $946 >>> 0 < ($636 + 16 | 0) >>> 0 ? $636 : $946; //@line 7554
    $950 = $949 + 8 | 0; //@line 7555
    $953 = $tbase$247$i + 8 | 0; //@line 7558
    if (($953 & 7 | 0) == 0) {
     $959 = 0; //@line 7562
    } else {
     $959 = 0 - $953 & 7; //@line 7566
    }
    $960 = $tsize$246$i + -40 - $959 | 0; //@line 7569
    HEAP32[1128 >> 2] = $tbase$247$i + $959; //@line 7570
    HEAP32[1116 >> 2] = $960; //@line 7571
    HEAP32[$tbase$247$i + ($959 + 4) >> 2] = $960 | 1; //@line 7575
    HEAP32[$tbase$247$i + ($tsize$246$i + -36) >> 2] = 40; //@line 7578
    HEAP32[1132 >> 2] = HEAP32[1592 >> 2]; //@line 7580
    HEAP32[$949 + 4 >> 2] = 27; //@line 7582
    HEAP32[$950 + 0 >> 2] = HEAP32[1552 >> 2]; //@line 7583
    HEAP32[$950 + 4 >> 2] = HEAP32[1556 >> 2]; //@line 7583
    HEAP32[$950 + 8 >> 2] = HEAP32[1560 >> 2]; //@line 7583
    HEAP32[$950 + 12 >> 2] = HEAP32[1564 >> 2]; //@line 7583
    HEAP32[1552 >> 2] = $tbase$247$i; //@line 7584
    HEAP32[1556 >> 2] = $tsize$246$i; //@line 7585
    HEAP32[1564 >> 2] = 0; //@line 7586
    HEAP32[1560 >> 2] = $950; //@line 7587
    $966 = $949 + 28 | 0; //@line 7588
    HEAP32[$966 >> 2] = 7; //@line 7589
    if (($949 + 32 | 0) >>> 0 < $935 >>> 0) {
     $970 = $966; //@line 7593
     do {
      $970$looptemp = $970;
      $970 = $970 + 4 | 0; //@line 7595
      HEAP32[$970 >> 2] = 7; //@line 7596
     } while (($970$looptemp + 8 | 0) >>> 0 < $935 >>> 0);
    }
    if (($949 | 0) != ($636 | 0)) {
     $976 = $949 - $636 | 0; //@line 7610
     $978 = $636 + ($976 + 4) | 0; //@line 7613
     HEAP32[$978 >> 2] = HEAP32[$978 >> 2] & -2; //@line 7616
     HEAP32[$636 + 4 >> 2] = $976 | 1; //@line 7619
     HEAP32[$636 + $976 >> 2] = $976; //@line 7620
     $983 = $976 >>> 3; //@line 7621
     if ($976 >>> 0 < 256) {
      $985 = $983 << 1; //@line 7624
      $986 = 1144 + ($985 << 2) | 0; //@line 7625
      $987 = HEAP32[276] | 0; //@line 7626
      $988 = 1 << $983; //@line 7627
      do {
       if (($987 & $988 | 0) == 0) {
        HEAP32[276] = $987 | $988; //@line 7633
        $$pre$phi$i$iZ2D = 1144 + ($985 + 2 << 2) | 0; //@line 7636
        $F$0$i$i = $986; //@line 7636
       } else {
        $992 = 1144 + ($985 + 2 << 2) | 0; //@line 7639
        $993 = HEAP32[$992 >> 2] | 0; //@line 7640
        if (!($993 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0)) {
         $$pre$phi$i$iZ2D = $992; //@line 7644
         $F$0$i$i = $993; //@line 7644
         break;
        }
        _abort(); //@line 7647
       }
      } while (0);
      HEAP32[$$pre$phi$i$iZ2D >> 2] = $636; //@line 7651
      HEAP32[$F$0$i$i + 12 >> 2] = $636; //@line 7653
      HEAP32[$636 + 8 >> 2] = $F$0$i$i; //@line 7655
      HEAP32[$636 + 12 >> 2] = $986; //@line 7657
      break;
     }
     $999 = $976 >>> 8; //@line 7660
     if (($999 | 0) == 0) {
      $I1$0$i$i = 0; //@line 7663
     } else {
      if ($976 >>> 0 > 16777215) {
       $I1$0$i$i = 31; //@line 7667
      } else {
       $1004 = ($999 + 1048320 | 0) >>> 16 & 8; //@line 7671
       $1005 = $999 << $1004; //@line 7672
       $1008 = ($1005 + 520192 | 0) >>> 16 & 4; //@line 7675
       $1010 = $1005 << $1008; //@line 7677
       $1013 = ($1010 + 245760 | 0) >>> 16 & 2; //@line 7680
       $1018 = 14 - ($1008 | $1004 | $1013) + ($1010 << $1013 >>> 15) | 0; //@line 7685
       $I1$0$i$i = $976 >>> ($1018 + 7 | 0) & 1 | $1018 << 1; //@line 7691
      }
     }
     $1024 = 1408 + ($I1$0$i$i << 2) | 0; //@line 7694
     HEAP32[$636 + 28 >> 2] = $I1$0$i$i; //@line 7697
     HEAP32[$636 + 20 >> 2] = 0; //@line 7699
     HEAP32[$636 + 16 >> 2] = 0; //@line 7701
     $1028 = HEAP32[1108 >> 2] | 0; //@line 7702
     $1029 = 1 << $I1$0$i$i; //@line 7703
     if (($1028 & $1029 | 0) == 0) {
      HEAP32[1108 >> 2] = $1028 | $1029; //@line 7708
      HEAP32[$1024 >> 2] = $636; //@line 7709
      HEAP32[$636 + 24 >> 2] = $1024; //@line 7711
      HEAP32[$636 + 12 >> 2] = $636; //@line 7713
      HEAP32[$636 + 8 >> 2] = $636; //@line 7715
      break;
     }
     $1036 = HEAP32[$1024 >> 2] | 0; //@line 7718
     if (($I1$0$i$i | 0) == 31) {
      $1045 = 0; //@line 7721
     } else {
      $1045 = 25 - ($I1$0$i$i >>> 1) | 0; //@line 7725
     }
     L499 : do {
      if ((HEAP32[$1036 + 4 >> 2] & -8 | 0) == ($976 | 0)) {
       $T$0$lcssa$i$i = $1036; //@line 7733
      } else {
       $K2$014$i$i = $976 << $1045; //@line 7736
       $T$013$i$i = $1036; //@line 7736
       while (1) {
        $1053 = $T$013$i$i + ($K2$014$i$i >>> 31 << 2) + 16 | 0; //@line 7739
        $1048 = HEAP32[$1053 >> 2] | 0; //@line 7740
        if (($1048 | 0) == 0) {
         break;
        }
        if ((HEAP32[$1048 + 4 >> 2] & -8 | 0) == ($976 | 0)) {
         $T$0$lcssa$i$i = $1048; //@line 7751
         break L499;
        } else {
         $K2$014$i$i = $K2$014$i$i << 1; //@line 7754
         $T$013$i$i = $1048; //@line 7754
        }
       }
       if ($1053 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
        _abort(); //@line 7760
       } else {
        HEAP32[$1053 >> 2] = $636; //@line 7763
        HEAP32[$636 + 24 >> 2] = $T$013$i$i; //@line 7765
        HEAP32[$636 + 12 >> 2] = $636; //@line 7767
        HEAP32[$636 + 8 >> 2] = $636; //@line 7769
        break L311;
       }
      }
     } while (0);
     $1060 = $T$0$lcssa$i$i + 8 | 0; //@line 7774
     $1061 = HEAP32[$1060 >> 2] | 0; //@line 7775
     $1062 = HEAP32[1120 >> 2] | 0; //@line 7776
     if ($T$0$lcssa$i$i >>> 0 < $1062 >>> 0) {
      _abort(); //@line 7779
     }
     if ($1061 >>> 0 < $1062 >>> 0) {
      _abort(); //@line 7784
     } else {
      HEAP32[$1061 + 12 >> 2] = $636; //@line 7788
      HEAP32[$1060 >> 2] = $636; //@line 7789
      HEAP32[$636 + 8 >> 2] = $1061; //@line 7791
      HEAP32[$636 + 12 >> 2] = $T$0$lcssa$i$i; //@line 7793
      HEAP32[$636 + 24 >> 2] = 0; //@line 7795
      break;
     }
    }
   }
  } while (0);
  $1069 = HEAP32[1116 >> 2] | 0; //@line 7801
  if ($1069 >>> 0 > $nb$0 >>> 0) {
   $1071 = $1069 - $nb$0 | 0; //@line 7804
   HEAP32[1116 >> 2] = $1071; //@line 7805
   $1072 = HEAP32[1128 >> 2] | 0; //@line 7806
   HEAP32[1128 >> 2] = $1072 + $nb$0; //@line 7808
   HEAP32[$1072 + ($nb$0 + 4) >> 2] = $1071 | 1; //@line 7812
   HEAP32[$1072 + 4 >> 2] = $nb$0 | 3; //@line 7815
   $mem$0 = $1072 + 8 | 0; //@line 7817
   STACKTOP = sp; //@line 7818
   return $mem$0 | 0; //@line 7818
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 12; //@line 7822
 $mem$0 = 0; //@line 7823
 STACKTOP = sp; //@line 7824
 return $mem$0 | 0; //@line 7824
}
function _print_value($item, $depth, $fmt) {
 $item = $item | 0;
 $depth = $depth | 0;
 $fmt = $fmt | 0;
 var $$0 = 0, $$3$i = 0, $$pre$i = 0.0, $101 = 0, $102 = 0, $103 = 0, $107 = 0, $108 = 0, $11 = 0, $111 = 0, $114 = 0, $115 = 0, $118 = 0, $121 = 0, $123 = 0, $128 = 0, $136 = 0, $139 = 0, $14 = 0.0, $143 = 0, $149 = 0, $15 = 0, $153 = 0, $156 = 0, $158 = 0, $160 = 0, $163 = 0, $164 = 0, $24 = 0, $28 = 0, $38 = 0, $41 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $5 = 0, $52 = 0, $55 = 0, $56 = 0, $62 = 0, $65 = 0, $68 = 0, $73 = 0, $75 = 0, $76 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $82 = 0, $85 = 0, $89 = 0, $92 = 0, $95 = 0, $96 = 0, $98 = 0, $99 = 0, $child$0$i45 = 0, $child$0$i47 = 0, $child$0$i986 = 0, $child$0$i988 = 0, $child$1$i1576 = 0, $child$1$i1580 = 0, $child$1$i35 = 0, $child$1$i39 = 0, $fail$0$i1679 = 0, $fail$1$i19 = 0, $i$0$i37 = 0, $i$1$i1478 = 0, $i$1$i33 = 0, $i$2$i2274 = 0, $i$2$i32 = 0, $i$3$i69 = 0, $len$0$i$lcssa114 = 0, $len$0$i13$lcssa116 = 0, $len$0$i1377 = 0, $len$0$i36 = 0, $len$1$i18 = 0, $numentries$0$i46 = 0, $numentries$0$i887 = 0, $ptr$0$i$lcssa = 0, $ptr$0$i31 = 0, $ptr$1$i = 0, $ptr$1$i12 = 0, $ptr$10$i = 0, $ptr$2$i = 0, $ptr$2$i23 = 0, $ptr$3$i$lcssa = 0, $ptr$3$i68 = 0, $ptr$5$i = 0, $ptr$6$i = 0, $ptr$7$i = 0, $ptr$8$i = 0, $smax = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 843
 STACKTOP = STACKTOP + 16 | 0; //@line 844
 $vararg_buffer7 = sp; //@line 845
 if (($item | 0) == 0) {
  $$0 = 0; //@line 848
  STACKTOP = sp; //@line 849
  return $$0 | 0; //@line 849
 }
 switch (HEAP32[$item + 12 >> 2] & 255 | 0) {
 case 2:
  {
   $5 = FUNCTION_TABLE_ii[HEAP32[4] & 15](5) | 0; //@line 857
   if (($5 | 0) == 0) {
    $$0 = 0; //@line 860
    STACKTOP = sp; //@line 861
    return $$0 | 0; //@line 861
   }
   HEAP8[$5 + 0 >> 0] = HEAP8[32 >> 0] | 0; //@line 863
   HEAP8[$5 + 1 >> 0] = HEAP8[33 >> 0] | 0; //@line 863
   HEAP8[$5 + 2 >> 0] = HEAP8[34 >> 0] | 0; //@line 863
   HEAP8[$5 + 3 >> 0] = HEAP8[35 >> 0] | 0; //@line 863
   HEAP8[$5 + 4 >> 0] = HEAP8[36 >> 0] | 0; //@line 863
   $$0 = $5; //@line 864
   STACKTOP = sp; //@line 865
   return $$0 | 0; //@line 865
  }
 case 6:
  {
   $89 = $item + 8 | 0; //@line 869
   $child$0$i986 = HEAP32[$89 >> 2] | 0; //@line 870
   if (($child$0$i986 | 0) == 0) {
    $98 = HEAP32[4] | 0; //@line 874
   } else {
    $child$0$i988 = $child$0$i986; //@line 876
    $numentries$0$i887 = 0; //@line 876
    while (1) {
     $92 = $numentries$0$i887 + 1 | 0; //@line 878
     $child$0$i988 = HEAP32[$child$0$i988 >> 2] | 0; //@line 879
     if (($child$0$i988 | 0) == 0) {
      break;
     } else {
      $numentries$0$i887 = $92; //@line 884
     }
    }
    $95 = HEAP32[4] | 0; //@line 888
    if (($92 | 0) == 0) {
     $98 = $95; //@line 890
    } else {
     $107 = $92 << 2; //@line 892
     $108 = FUNCTION_TABLE_ii[$95 & 15]($107) | 0; //@line 893
     if (($108 | 0) == 0) {
      $$0 = 0; //@line 896
      STACKTOP = sp; //@line 897
      return $$0 | 0; //@line 897
     }
     $111 = FUNCTION_TABLE_ii[HEAP32[4] & 15]($107) | 0; //@line 900
     if (($111 | 0) == 0) {
      FUNCTION_TABLE_vi[HEAP32[6] & 15]($108); //@line 904
      $$0 = 0; //@line 905
      STACKTOP = sp; //@line 906
      return $$0 | 0; //@line 906
     }
     _memset($108 | 0, 0, $107 | 0) | 0; //@line 908
     _memset($111 | 0, 0, $107 | 0) | 0; //@line 909
     $114 = $depth + 1 | 0; //@line 910
     $115 = ($fmt | 0) != 0; //@line 911
     $$3$i = $115 ? $depth + 8 | 0 : 7; //@line 913
     $child$1$i1576 = HEAP32[$89 >> 2] | 0; //@line 914
     if (($child$1$i1576 | 0) == 0) {
      $len$0$i13$lcssa116 = $$3$i; //@line 917
      label = 63; //@line 918
     } else {
      $118 = $115 ? $depth + 5 | 0 : 2; //@line 921
      $child$1$i1580 = $child$1$i1576; //@line 922
      $fail$0$i1679 = 0; //@line 922
      $i$1$i1478 = 0; //@line 922
      $len$0$i1377 = $$3$i; //@line 922
      while (1) {
       $121 = _print_string_ptr(HEAP32[$child$1$i1580 + 32 >> 2] | 0) | 0; //@line 926
       HEAP32[$111 + ($i$1$i1478 << 2) >> 2] = $121; //@line 928
       $123 = _print_value($child$1$i1580, $114, $fmt) | 0; //@line 929
       HEAP32[$108 + ($i$1$i1478 << 2) >> 2] = $123; //@line 932
       if (($121 | 0) == 0 | ($123 | 0) == 0) {
        $fail$1$i19 = 1; //@line 937
        $len$1$i18 = $len$0$i1377; //@line 937
       } else {
        $128 = _strlen($123 | 0) | 0; //@line 939
        $fail$1$i19 = $fail$0$i1679; //@line 944
        $len$1$i18 = $118 + $len$0$i1377 + $128 + (_strlen($121 | 0) | 0) | 0; //@line 944
       }
       $child$1$i1580 = HEAP32[$child$1$i1580 >> 2] | 0; //@line 946
       if (($child$1$i1580 | 0) == 0) {
        break;
       } else {
        $fail$0$i1679 = $fail$1$i19; //@line 951
        $i$1$i1478 = $i$1$i1478 + 1 | 0; //@line 951
        $len$0$i1377 = $len$1$i18; //@line 951
       }
      }
      if (($fail$1$i19 | 0) == 0) {
       $len$0$i13$lcssa116 = $len$1$i18; //@line 956
       label = 63; //@line 957
      }
     }
     if ((label | 0) == 63) {
      $136 = FUNCTION_TABLE_ii[HEAP32[4] & 15]($len$0$i13$lcssa116) | 0; //@line 962
      if (($136 | 0) != 0) {
       HEAP8[$136 >> 0] = 123; //@line 965
       $149 = $136 + 1 | 0; //@line 966
       if ($115) {
        HEAP8[$149 >> 0] = 10; //@line 969
        $ptr$2$i23 = $136 + 2 | 0; //@line 970
       } else {
        $ptr$2$i23 = $149; //@line 972
       }
       HEAP8[$ptr$2$i23 >> 0] = 0; //@line 974
       if (($numentries$0$i887 | 0) > -1) {
        $smax = ($114 | 0) > 1 ? $114 : 1; //@line 978
        $i$3$i69 = 0; //@line 979
        $ptr$3$i68 = $ptr$2$i23; //@line 979
        while (1) {
         if (($depth | 0) < 0 | $115 ^ 1) {
          $ptr$5$i = $ptr$3$i68; //@line 985
         } else {
          _memset($ptr$3$i68 | 0, 9, $smax | 0) | 0; //@line 987
          $ptr$5$i = $ptr$3$i68 + $smax | 0; //@line 989
         }
         $153 = $111 + ($i$3$i69 << 2) | 0; //@line 991
         _strcpy($ptr$5$i | 0, HEAP32[$153 >> 2] | 0) | 0; //@line 993
         $156 = _strlen(HEAP32[$153 >> 2] | 0) | 0; //@line 995
         $158 = $ptr$5$i + ($156 + 1) | 0; //@line 998
         HEAP8[$ptr$5$i + $156 >> 0] = 58; //@line 999
         if ($115) {
          HEAP8[$158 >> 0] = 9; //@line 1003
          $ptr$6$i = $ptr$5$i + ($156 + 2) | 0; //@line 1004
         } else {
          $ptr$6$i = $158; //@line 1006
         }
         $160 = $108 + ($i$3$i69 << 2) | 0; //@line 1008
         _strcpy($ptr$6$i | 0, HEAP32[$160 >> 2] | 0) | 0; //@line 1010
         $163 = _strlen(HEAP32[$160 >> 2] | 0) | 0; //@line 1012
         $164 = $ptr$6$i + $163 | 0; //@line 1013
         if (($i$3$i69 | 0) == ($numentries$0$i887 | 0)) {
          $ptr$7$i = $164; //@line 1016
         } else {
          HEAP8[$164 >> 0] = 44; //@line 1020
          $ptr$7$i = $ptr$6$i + ($163 + 1) | 0; //@line 1021
         }
         if ($115) {
          HEAP8[$ptr$7$i >> 0] = 10; //@line 1025
          $ptr$8$i = $ptr$7$i + 1 | 0; //@line 1026
         } else {
          $ptr$8$i = $ptr$7$i; //@line 1028
         }
         HEAP8[$ptr$8$i >> 0] = 0; //@line 1030
         FUNCTION_TABLE_vi[HEAP32[6] & 15](HEAP32[$153 >> 2] | 0); //@line 1033
         FUNCTION_TABLE_vi[HEAP32[6] & 15](HEAP32[$160 >> 2] | 0); //@line 1036
         $i$3$i69 = $i$3$i69 + 1 | 0; //@line 1037
         if (($i$3$i69 | 0) == ($92 | 0)) {
          $ptr$3$i$lcssa = $ptr$8$i; //@line 1040
          break;
         } else {
          $ptr$3$i68 = $ptr$8$i; //@line 1043
         }
        }
       } else {
        $ptr$3$i$lcssa = $ptr$2$i23; //@line 1047
       }
       FUNCTION_TABLE_vi[HEAP32[6] & 15]($111); //@line 1050
       FUNCTION_TABLE_vi[HEAP32[6] & 15]($108); //@line 1052
       if ($115 & ($depth | 0) > 0) {
        _memset($ptr$3$i$lcssa | 0, 9, $depth | 0) | 0; //@line 1056
        $ptr$10$i = $ptr$3$i$lcssa + $depth | 0; //@line 1058
       } else {
        $ptr$10$i = $ptr$3$i$lcssa; //@line 1060
       }
       HEAP8[$ptr$10$i >> 0] = 125; //@line 1063
       HEAP8[$ptr$10$i + 1 >> 0] = 0; //@line 1064
       $$0 = $136; //@line 1065
       STACKTOP = sp; //@line 1066
       return $$0 | 0; //@line 1066
      }
     }
     if (($numentries$0$i887 | 0) > -1) {
      $i$2$i2274 = 0; //@line 1071
      do {
       $139 = HEAP32[$111 + ($i$2$i2274 << 2) >> 2] | 0; //@line 1074
       if (($139 | 0) != 0) {
        FUNCTION_TABLE_vi[HEAP32[6] & 15]($139); //@line 1078
       }
       $143 = HEAP32[$108 + ($i$2$i2274 << 2) >> 2] | 0; //@line 1081
       if (($143 | 0) != 0) {
        FUNCTION_TABLE_vi[HEAP32[6] & 15]($143); //@line 1085
       }
       $i$2$i2274 = $i$2$i2274 + 1 | 0; //@line 1087
      } while (($i$2$i2274 | 0) != ($92 | 0));
     }
     FUNCTION_TABLE_vi[HEAP32[6] & 15]($111); //@line 1097
     FUNCTION_TABLE_vi[HEAP32[6] & 15]($108); //@line 1099
     $$0 = 0; //@line 1100
     STACKTOP = sp; //@line 1101
     return $$0 | 0; //@line 1101
    }
   }
   $96 = ($fmt | 0) != 0; //@line 1104
   $99 = FUNCTION_TABLE_ii[$98 & 15]($96 ? $depth + 4 | 0 : 3) | 0; //@line 1107
   if (($99 | 0) == 0) {
    $$0 = 0; //@line 1110
    STACKTOP = sp; //@line 1111
    return $$0 | 0; //@line 1111
   }
   $101 = $99 + 1 | 0; //@line 1113
   HEAP8[$99 >> 0] = 123; //@line 1114
   if ($96) {
    $102 = $99 + 2 | 0; //@line 1116
    HEAP8[$101 >> 0] = 10; //@line 1117
    $103 = $depth + -1 | 0; //@line 1118
    if (($103 | 0) > 0) {
     _memset($102 | 0, 9, $103 | 0) | 0; //@line 1122
     $ptr$1$i12 = $99 + ($depth + 1) | 0; //@line 1124
    } else {
     $ptr$1$i12 = $102; //@line 1126
    }
   } else {
    $ptr$1$i12 = $101; //@line 1129
   }
   HEAP8[$ptr$1$i12 >> 0] = 125; //@line 1132
   HEAP8[$ptr$1$i12 + 1 >> 0] = 0; //@line 1133
   $$0 = $99; //@line 1134
   STACKTOP = sp; //@line 1135
   return $$0 | 0; //@line 1135
  }
 case 4:
  {
   $$0 = _print_string_ptr(HEAP32[$item + 16 >> 2] | 0) | 0; //@line 1142
   STACKTOP = sp; //@line 1143
   return $$0 | 0; //@line 1143
  }
 case 5:
  {
   $38 = $item + 8 | 0; //@line 1147
   $child$0$i45 = HEAP32[$38 >> 2] | 0; //@line 1148
   if (($child$0$i45 | 0) == 0) {
    $45 = HEAP32[4] | 0; //@line 1152
   } else {
    $child$0$i47 = $child$0$i45; //@line 1154
    $numentries$0$i46 = 0; //@line 1154
    while (1) {
     $41 = $numentries$0$i46 + 1 | 0; //@line 1156
     $child$0$i47 = HEAP32[$child$0$i47 >> 2] | 0; //@line 1157
     if (($child$0$i47 | 0) == 0) {
      break;
     } else {
      $numentries$0$i46 = $41; //@line 1162
     }
    }
    $44 = HEAP32[4] | 0; //@line 1166
    if (($41 | 0) == 0) {
     $45 = $44; //@line 1168
    } else {
     $48 = $41 << 2; //@line 1170
     $49 = FUNCTION_TABLE_ii[$44 & 15]($48) | 0; //@line 1171
     if (($49 | 0) == 0) {
      $$0 = 0; //@line 1174
      STACKTOP = sp; //@line 1175
      return $$0 | 0; //@line 1175
     }
     _memset($49 | 0, 0, $48 | 0) | 0; //@line 1177
     $child$1$i35 = HEAP32[$38 >> 2] | 0; //@line 1178
     L92 : do {
      if (($child$1$i35 | 0) == 0) {
       $len$0$i$lcssa114 = 5; //@line 1182
       label = 31; //@line 1183
      } else {
       $52 = $depth + 1 | 0; //@line 1185
       $55 = ($fmt | 0) != 0 | 2; //@line 1188
       $child$1$i39 = $child$1$i35; //@line 1189
       $i$0$i37 = 0; //@line 1189
       $len$0$i36 = 5; //@line 1189
       while (1) {
        $56 = _print_value($child$1$i39, $52, $fmt) | 0; //@line 1191
        HEAP32[$49 + ($i$0$i37 << 2) >> 2] = $56; //@line 1193
        if (($56 | 0) == 0) {
         break L92;
        }
        $62 = $55 + $len$0$i36 + (_strlen($56 | 0) | 0) | 0; //@line 1201
        $child$1$i39 = HEAP32[$child$1$i39 >> 2] | 0; //@line 1202
        if (($child$1$i39 | 0) == 0) {
         $len$0$i$lcssa114 = $62; //@line 1205
         label = 31; //@line 1206
         break;
        } else {
         $i$0$i37 = $i$0$i37 + 1 | 0; //@line 1209
         $len$0$i36 = $62; //@line 1209
        }
       }
      }
     } while (0);
     if ((label | 0) == 31) {
      $65 = FUNCTION_TABLE_ii[HEAP32[4] & 15]($len$0$i$lcssa114) | 0; //@line 1216
      if (($65 | 0) != 0) {
       HEAP8[$65 >> 0] = 91; //@line 1219
       $73 = $65 + 1 | 0; //@line 1220
       HEAP8[$73 >> 0] = 0; //@line 1221
       if (($numentries$0$i46 | 0) > -1) {
        $75 = ($fmt | 0) == 0; //@line 1224
        $i$2$i32 = 0; //@line 1225
        $ptr$0$i31 = $73; //@line 1225
        while (1) {
         $76 = $49 + ($i$2$i32 << 2) | 0; //@line 1227
         _strcpy($ptr$0$i31 | 0, HEAP32[$76 >> 2] | 0) | 0; //@line 1229
         $78 = HEAP32[$76 >> 2] | 0; //@line 1230
         $79 = _strlen($78 | 0) | 0; //@line 1231
         $80 = $ptr$0$i31 + $79 | 0; //@line 1232
         if (($i$2$i32 | 0) == ($numentries$0$i46 | 0)) {
          $85 = $78; //@line 1235
          $ptr$2$i = $80; //@line 1235
         } else {
          $82 = $ptr$0$i31 + ($79 + 1) | 0; //@line 1238
          HEAP8[$80 >> 0] = 44; //@line 1239
          if ($75) {
           $ptr$1$i = $82; //@line 1241
          } else {
           HEAP8[$82 >> 0] = 32; //@line 1245
           $ptr$1$i = $ptr$0$i31 + ($79 + 2) | 0; //@line 1246
          }
          HEAP8[$ptr$1$i >> 0] = 0; //@line 1248
          $85 = HEAP32[$76 >> 2] | 0; //@line 1250
          $ptr$2$i = $ptr$1$i; //@line 1250
         }
         FUNCTION_TABLE_vi[HEAP32[6] & 15]($85); //@line 1253
         $i$2$i32 = $i$2$i32 + 1 | 0; //@line 1254
         if (($i$2$i32 | 0) == ($41 | 0)) {
          $ptr$0$i$lcssa = $ptr$2$i; //@line 1257
          break;
         } else {
          $ptr$0$i31 = $ptr$2$i; //@line 1260
         }
        }
       } else {
        $ptr$0$i$lcssa = $73; //@line 1264
       }
       FUNCTION_TABLE_vi[HEAP32[6] & 15]($49); //@line 1267
       HEAP8[$ptr$0$i$lcssa >> 0] = 93; //@line 1269
       HEAP8[$ptr$0$i$lcssa + 1 >> 0] = 0; //@line 1270
       $$0 = $65; //@line 1271
       STACKTOP = sp; //@line 1272
       return $$0 | 0; //@line 1272
      }
     }
     if (($numentries$0$i46 | 0) > -1) {
      $i$1$i33 = 0; //@line 1277
      do {
       $68 = HEAP32[$49 + ($i$1$i33 << 2) >> 2] | 0; //@line 1280
       if (($68 | 0) != 0) {
        FUNCTION_TABLE_vi[HEAP32[6] & 15]($68); //@line 1284
       }
       $i$1$i33 = $i$1$i33 + 1 | 0; //@line 1286
      } while (($i$1$i33 | 0) != ($41 | 0));
     }
     FUNCTION_TABLE_vi[HEAP32[6] & 15]($49); //@line 1296
     $$0 = 0; //@line 1297
     STACKTOP = sp; //@line 1298
     return $$0 | 0; //@line 1298
    }
   }
   $46 = FUNCTION_TABLE_ii[$45 & 15](3) | 0; //@line 1301
   if (($46 | 0) == 0) {
    $$0 = 0; //@line 1304
    STACKTOP = sp; //@line 1305
    return $$0 | 0; //@line 1305
   }
   HEAP8[$46 + 0 >> 0] = HEAP8[72 >> 0] | 0; //@line 1307
   HEAP8[$46 + 1 >> 0] = HEAP8[73 >> 0] | 0; //@line 1307
   HEAP8[$46 + 2 >> 0] = HEAP8[74 >> 0] | 0; //@line 1307
   $$0 = $46; //@line 1308
   STACKTOP = sp; //@line 1309
   return $$0 | 0; //@line 1309
  }
 case 0:
  {
   $8 = FUNCTION_TABLE_ii[HEAP32[4] & 15](6) | 0; //@line 1314
   if (($8 | 0) == 0) {
    $$0 = 0; //@line 1317
    STACKTOP = sp; //@line 1318
    return $$0 | 0; //@line 1318
   }
   HEAP8[$8 + 0 >> 0] = HEAP8[40 >> 0] | 0; //@line 1320
   HEAP8[$8 + 1 >> 0] = HEAP8[41 >> 0] | 0; //@line 1320
   HEAP8[$8 + 2 >> 0] = HEAP8[42 >> 0] | 0; //@line 1320
   HEAP8[$8 + 3 >> 0] = HEAP8[43 >> 0] | 0; //@line 1320
   HEAP8[$8 + 4 >> 0] = HEAP8[44 >> 0] | 0; //@line 1320
   HEAP8[$8 + 5 >> 0] = HEAP8[45 >> 0] | 0; //@line 1320
   $$0 = $8; //@line 1321
   STACKTOP = sp; //@line 1322
   return $$0 | 0; //@line 1322
  }
 case 3:
  {
   $14 = +HEAPF64[$item + 24 >> 3]; //@line 1327
   $15 = $item + 20 | 0; //@line 1328
   if (+Math_abs(+(+(HEAP32[$15 >> 2] | 0) - $14)) <= 2.220446049250313e-16) {
    if ($14 <= 2147483647.0 & $14 >= -2147483648.0) {
     $24 = FUNCTION_TABLE_ii[HEAP32[4] & 15](21) | 0; //@line 1340
     if (($24 | 0) == 0) {
      $$0 = 0; //@line 1343
      STACKTOP = sp; //@line 1344
      return $$0 | 0; //@line 1344
     }
     HEAP32[$vararg_buffer7 >> 2] = HEAP32[$15 >> 2]; //@line 1347
     _sprintf($24, 80, $vararg_buffer7) | 0; //@line 1348
     $$0 = $24; //@line 1349
     STACKTOP = sp; //@line 1350
     return $$0 | 0; //@line 1350
    }
   }
   $28 = FUNCTION_TABLE_ii[HEAP32[4] & 15](64) | 0; //@line 1354
   if (($28 | 0) == 0) {
    $$0 = 0; //@line 1357
    STACKTOP = sp; //@line 1358
    return $$0 | 0; //@line 1358
   }
   $$pre$i = +Math_abs(+$14); //@line 1364
   if (+Math_abs(+(+Math_floor(+$14) - $14)) <= 2.220446049250313e-16 & $$pre$i < 1.0e+60) {
    HEAPF64[tempDoublePtr >> 3] = $14; //@line 1368
    HEAP32[$vararg_buffer7 >> 2] = HEAP32[tempDoublePtr >> 2]; //@line 1368
    HEAP32[$vararg_buffer7 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2]; //@line 1368
    _sprintf($28, 88, $vararg_buffer7) | 0; //@line 1369
    $$0 = $28; //@line 1370
    STACKTOP = sp; //@line 1371
    return $$0 | 0; //@line 1371
   }
   if ($$pre$i < 1.0e-6 | $$pre$i > 1.0e9) {
    HEAPF64[tempDoublePtr >> 3] = $14; //@line 1377
    HEAP32[$vararg_buffer7 >> 2] = HEAP32[tempDoublePtr >> 2]; //@line 1377
    HEAP32[$vararg_buffer7 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2]; //@line 1377
    _sprintf($28, 96, $vararg_buffer7) | 0; //@line 1378
    $$0 = $28; //@line 1379
    STACKTOP = sp; //@line 1380
    return $$0 | 0; //@line 1380
   } else {
    HEAPF64[tempDoublePtr >> 3] = $14; //@line 1382
    HEAP32[$vararg_buffer7 >> 2] = HEAP32[tempDoublePtr >> 2]; //@line 1382
    HEAP32[$vararg_buffer7 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2]; //@line 1382
    _sprintf($28, 104, $vararg_buffer7) | 0; //@line 1383
    $$0 = $28; //@line 1384
    STACKTOP = sp; //@line 1385
    return $$0 | 0; //@line 1385
   }
   break;
  }
 case 1:
  {
   $11 = FUNCTION_TABLE_ii[HEAP32[4] & 15](5) | 0; //@line 1391
   if (($11 | 0) == 0) {
    $$0 = 0; //@line 1394
    STACKTOP = sp; //@line 1395
    return $$0 | 0; //@line 1395
   }
   HEAP8[$11 + 0 >> 0] = HEAP8[48 >> 0] | 0; //@line 1397
   HEAP8[$11 + 1 >> 0] = HEAP8[49 >> 0] | 0; //@line 1397
   HEAP8[$11 + 2 >> 0] = HEAP8[50 >> 0] | 0; //@line 1397
   HEAP8[$11 + 3 >> 0] = HEAP8[51 >> 0] | 0; //@line 1397
   HEAP8[$11 + 4 >> 0] = HEAP8[52 >> 0] | 0; //@line 1397
   $$0 = $11; //@line 1398
   STACKTOP = sp; //@line 1399
   return $$0 | 0; //@line 1399
  }
 default:
  {
   $$0 = 0; //@line 1403
   STACKTOP = sp; //@line 1404
   return $$0 | 0; //@line 1404
  }
 }
 return 0; //@line 1407
}
function _free($mem) {
 $mem = $mem | 0;
 var $$pre$phi68Z2D = 0, $$pre$phi70Z2D = 0, $$pre$phiZ2D = 0, $$sum2 = 0, $1 = 0, $104 = 0, $113 = 0, $114 = 0, $12 = 0, $122 = 0, $130 = 0, $135 = 0, $136 = 0, $139 = 0, $14 = 0, $141 = 0, $143 = 0, $15 = 0, $158 = 0, $163 = 0, $165 = 0, $168 = 0, $171 = 0, $174 = 0, $177 = 0, $178 = 0, $180 = 0, $181 = 0, $183 = 0, $184 = 0, $186 = 0, $187 = 0, $19 = 0, $193 = 0, $194 = 0, $2 = 0, $203 = 0, $212 = 0, $219 = 0, $22 = 0, $234 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $243 = 0, $244 = 0, $250 = 0, $255 = 0, $256 = 0, $259 = 0, $26 = 0, $261 = 0, $264 = 0, $269 = 0, $275 = 0, $279 = 0, $280 = 0, $287 = 0, $296 = 0, $299 = 0, $304 = 0, $311 = 0, $312 = 0, $313 = 0, $321 = 0, $39 = 0, $44 = 0, $46 = 0, $49 = 0, $5 = 0, $51 = 0, $54 = 0, $57 = 0, $58 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $64 = 0, $66 = 0, $67 = 0, $72 = 0, $73 = 0, $8 = 0, $82 = 0, $9 = 0, $91 = 0, $98 = 0, $F16$0 = 0, $I18$0 = 0, $K19$057 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$056 = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, sp = 0;
 sp = STACKTOP; //@line 7847
 if (($mem | 0) == 0) {
  STACKTOP = sp; //@line 7850
  return;
 }
 $1 = $mem + -8 | 0; //@line 7852
 $2 = HEAP32[1120 >> 2] | 0; //@line 7853
 if ($1 >>> 0 < $2 >>> 0) {
  _abort(); //@line 7856
 }
 $5 = HEAP32[$mem + -4 >> 2] | 0; //@line 7860
 $6 = $5 & 3; //@line 7861
 if (($6 | 0) == 1) {
  _abort(); //@line 7864
 }
 $8 = $5 & -8; //@line 7867
 $9 = $mem + ($8 + -8) | 0; //@line 7869
 do {
  if (($5 & 1 | 0) == 0) {
   $12 = HEAP32[$1 >> 2] | 0; //@line 7874
   if (($6 | 0) == 0) {
    STACKTOP = sp; //@line 7877
    return;
   }
   $$sum2 = -8 - $12 | 0; //@line 7879
   $14 = $mem + $$sum2 | 0; //@line 7880
   $15 = $12 + $8 | 0; //@line 7881
   if ($14 >>> 0 < $2 >>> 0) {
    _abort(); //@line 7884
   }
   if (($14 | 0) == (HEAP32[1124 >> 2] | 0)) {
    $104 = $mem + ($8 + -4) | 0; //@line 7891
    if ((HEAP32[$104 >> 2] & 3 | 0) != 3) {
     $p$0 = $14; //@line 7896
     $psize$0 = $15; //@line 7896
     break;
    }
    HEAP32[1112 >> 2] = $15; //@line 7899
    HEAP32[$104 >> 2] = HEAP32[$104 >> 2] & -2; //@line 7902
    HEAP32[$mem + ($$sum2 + 4) >> 2] = $15 | 1; //@line 7906
    HEAP32[$9 >> 2] = $15; //@line 7907
    STACKTOP = sp; //@line 7908
    return;
   }
   $19 = $12 >>> 3; //@line 7910
   if ($12 >>> 0 < 256) {
    $22 = HEAP32[$mem + ($$sum2 + 8) >> 2] | 0; //@line 7915
    $24 = HEAP32[$mem + ($$sum2 + 12) >> 2] | 0; //@line 7918
    $26 = 1144 + ($19 << 1 << 2) | 0; //@line 7920
    if (($22 | 0) != ($26 | 0)) {
     if ($22 >>> 0 < $2 >>> 0) {
      _abort(); //@line 7925
     }
     if ((HEAP32[$22 + 12 >> 2] | 0) != ($14 | 0)) {
      _abort(); //@line 7932
     }
    }
    if (($24 | 0) == ($22 | 0)) {
     HEAP32[276] = HEAP32[276] & ~(1 << $19); //@line 7942
     $p$0 = $14; //@line 7943
     $psize$0 = $15; //@line 7943
     break;
    }
    if (($24 | 0) == ($26 | 0)) {
     $$pre$phi70Z2D = $24 + 8 | 0; //@line 7949
    } else {
     if ($24 >>> 0 < $2 >>> 0) {
      _abort(); //@line 7953
     }
     $39 = $24 + 8 | 0; //@line 7956
     if ((HEAP32[$39 >> 2] | 0) == ($14 | 0)) {
      $$pre$phi70Z2D = $39; //@line 7960
     } else {
      _abort(); //@line 7962
     }
    }
    HEAP32[$22 + 12 >> 2] = $24; //@line 7967
    HEAP32[$$pre$phi70Z2D >> 2] = $22; //@line 7968
    $p$0 = $14; //@line 7969
    $psize$0 = $15; //@line 7969
    break;
   }
   $44 = HEAP32[$mem + ($$sum2 + 24) >> 2] | 0; //@line 7974
   $46 = HEAP32[$mem + ($$sum2 + 12) >> 2] | 0; //@line 7977
   do {
    if (($46 | 0) == ($14 | 0)) {
     $57 = $mem + ($$sum2 + 20) | 0; //@line 7982
     $58 = HEAP32[$57 >> 2] | 0; //@line 7983
     if (($58 | 0) == 0) {
      $60 = $mem + ($$sum2 + 16) | 0; //@line 7987
      $61 = HEAP32[$60 >> 2] | 0; //@line 7988
      if (($61 | 0) == 0) {
       $R$1 = 0; //@line 7991
       break;
      } else {
       $R$0 = $61; //@line 7994
       $RP$0 = $60; //@line 7994
      }
     } else {
      $R$0 = $58; //@line 7997
      $RP$0 = $57; //@line 7997
     }
     while (1) {
      $63 = $R$0 + 20 | 0; //@line 8000
      $64 = HEAP32[$63 >> 2] | 0; //@line 8001
      if (($64 | 0) != 0) {
       $R$0 = $64; //@line 8004
       $RP$0 = $63; //@line 8004
       continue;
      }
      $66 = $R$0 + 16 | 0; //@line 8007
      $67 = HEAP32[$66 >> 2] | 0; //@line 8008
      if (($67 | 0) == 0) {
       break;
      } else {
       $R$0 = $67; //@line 8013
       $RP$0 = $66; //@line 8013
      }
     }
     if ($RP$0 >>> 0 < $2 >>> 0) {
      _abort(); //@line 8018
     } else {
      HEAP32[$RP$0 >> 2] = 0; //@line 8021
      $R$1 = $R$0; //@line 8022
      break;
     }
    } else {
     $49 = HEAP32[$mem + ($$sum2 + 8) >> 2] | 0; //@line 8028
     if ($49 >>> 0 < $2 >>> 0) {
      _abort(); //@line 8031
     }
     $51 = $49 + 12 | 0; //@line 8034
     if ((HEAP32[$51 >> 2] | 0) != ($14 | 0)) {
      _abort(); //@line 8038
     }
     $54 = $46 + 8 | 0; //@line 8041
     if ((HEAP32[$54 >> 2] | 0) == ($14 | 0)) {
      HEAP32[$51 >> 2] = $46; //@line 8045
      HEAP32[$54 >> 2] = $49; //@line 8046
      $R$1 = $46; //@line 8047
      break;
     } else {
      _abort(); //@line 8050
     }
    }
   } while (0);
   if (($44 | 0) == 0) {
    $p$0 = $14; //@line 8057
    $psize$0 = $15; //@line 8057
   } else {
    $72 = HEAP32[$mem + ($$sum2 + 28) >> 2] | 0; //@line 8061
    $73 = 1408 + ($72 << 2) | 0; //@line 8062
    if (($14 | 0) == (HEAP32[$73 >> 2] | 0)) {
     HEAP32[$73 >> 2] = $R$1; //@line 8066
     if (($R$1 | 0) == 0) {
      HEAP32[1108 >> 2] = HEAP32[1108 >> 2] & ~(1 << $72); //@line 8073
      $p$0 = $14; //@line 8074
      $psize$0 = $15; //@line 8074
      break;
     }
    } else {
     if ($44 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
      _abort(); //@line 8081
     }
     $82 = $44 + 16 | 0; //@line 8084
     if ((HEAP32[$82 >> 2] | 0) == ($14 | 0)) {
      HEAP32[$82 >> 2] = $R$1; //@line 8088
     } else {
      HEAP32[$44 + 20 >> 2] = $R$1; //@line 8091
     }
     if (($R$1 | 0) == 0) {
      $p$0 = $14; //@line 8095
      $psize$0 = $15; //@line 8095
      break;
     }
    }
    if ($R$1 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
     _abort(); //@line 8102
    }
    HEAP32[$R$1 + 24 >> 2] = $44; //@line 8106
    $91 = HEAP32[$mem + ($$sum2 + 16) >> 2] | 0; //@line 8109
    do {
     if (($91 | 0) != 0) {
      if ($91 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
       _abort(); //@line 8116
      } else {
       HEAP32[$R$1 + 16 >> 2] = $91; //@line 8120
       HEAP32[$91 + 24 >> 2] = $R$1; //@line 8122
       break;
      }
     }
    } while (0);
    $98 = HEAP32[$mem + ($$sum2 + 20) >> 2] | 0; //@line 8129
    if (($98 | 0) == 0) {
     $p$0 = $14; //@line 8132
     $psize$0 = $15; //@line 8132
    } else {
     if ($98 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
      _abort(); //@line 8137
     } else {
      HEAP32[$R$1 + 20 >> 2] = $98; //@line 8141
      HEAP32[$98 + 24 >> 2] = $R$1; //@line 8143
      $p$0 = $14; //@line 8144
      $psize$0 = $15; //@line 8144
      break;
     }
    }
   }
  } else {
   $p$0 = $1; //@line 8150
   $psize$0 = $8; //@line 8150
  }
 } while (0);
 if (!($p$0 >>> 0 < $9 >>> 0)) {
  _abort(); //@line 8155
 }
 $113 = $mem + ($8 + -4) | 0; //@line 8159
 $114 = HEAP32[$113 >> 2] | 0; //@line 8160
 if (($114 & 1 | 0) == 0) {
  _abort(); //@line 8164
 }
 if (($114 & 2 | 0) == 0) {
  if (($9 | 0) == (HEAP32[1128 >> 2] | 0)) {
   $122 = (HEAP32[1116 >> 2] | 0) + $psize$0 | 0; //@line 8174
   HEAP32[1116 >> 2] = $122; //@line 8175
   HEAP32[1128 >> 2] = $p$0; //@line 8176
   HEAP32[$p$0 + 4 >> 2] = $122 | 1; //@line 8179
   if (($p$0 | 0) != (HEAP32[1124 >> 2] | 0)) {
    STACKTOP = sp; //@line 8183
    return;
   }
   HEAP32[1124 >> 2] = 0; //@line 8185
   HEAP32[1112 >> 2] = 0; //@line 8186
   STACKTOP = sp; //@line 8187
   return;
  }
  if (($9 | 0) == (HEAP32[1124 >> 2] | 0)) {
   $130 = (HEAP32[1112 >> 2] | 0) + $psize$0 | 0; //@line 8193
   HEAP32[1112 >> 2] = $130; //@line 8194
   HEAP32[1124 >> 2] = $p$0; //@line 8195
   HEAP32[$p$0 + 4 >> 2] = $130 | 1; //@line 8198
   HEAP32[$p$0 + $130 >> 2] = $130; //@line 8200
   STACKTOP = sp; //@line 8201
   return;
  }
  $135 = ($114 & -8) + $psize$0 | 0; //@line 8204
  $136 = $114 >>> 3; //@line 8205
  do {
   if ($114 >>> 0 < 256) {
    $139 = HEAP32[$mem + $8 >> 2] | 0; //@line 8210
    $141 = HEAP32[$mem + ($8 | 4) >> 2] | 0; //@line 8213
    $143 = 1144 + ($136 << 1 << 2) | 0; //@line 8215
    if (($139 | 0) != ($143 | 0)) {
     if ($139 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
      _abort(); //@line 8221
     }
     if ((HEAP32[$139 + 12 >> 2] | 0) != ($9 | 0)) {
      _abort(); //@line 8228
     }
    }
    if (($141 | 0) == ($139 | 0)) {
     HEAP32[276] = HEAP32[276] & ~(1 << $136); //@line 8238
     break;
    }
    if (($141 | 0) == ($143 | 0)) {
     $$pre$phi68Z2D = $141 + 8 | 0; //@line 8244
    } else {
     if ($141 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
      _abort(); //@line 8249
     }
     $158 = $141 + 8 | 0; //@line 8252
     if ((HEAP32[$158 >> 2] | 0) == ($9 | 0)) {
      $$pre$phi68Z2D = $158; //@line 8256
     } else {
      _abort(); //@line 8258
     }
    }
    HEAP32[$139 + 12 >> 2] = $141; //@line 8263
    HEAP32[$$pre$phi68Z2D >> 2] = $139; //@line 8264
   } else {
    $163 = HEAP32[$mem + ($8 + 16) >> 2] | 0; //@line 8268
    $165 = HEAP32[$mem + ($8 | 4) >> 2] | 0; //@line 8271
    do {
     if (($165 | 0) == ($9 | 0)) {
      $177 = $mem + ($8 + 12) | 0; //@line 8276
      $178 = HEAP32[$177 >> 2] | 0; //@line 8277
      if (($178 | 0) == 0) {
       $180 = $mem + ($8 + 8) | 0; //@line 8281
       $181 = HEAP32[$180 >> 2] | 0; //@line 8282
       if (($181 | 0) == 0) {
        $R7$1 = 0; //@line 8285
        break;
       } else {
        $R7$0 = $181; //@line 8288
        $RP9$0 = $180; //@line 8288
       }
      } else {
       $R7$0 = $178; //@line 8291
       $RP9$0 = $177; //@line 8291
      }
      while (1) {
       $183 = $R7$0 + 20 | 0; //@line 8294
       $184 = HEAP32[$183 >> 2] | 0; //@line 8295
       if (($184 | 0) != 0) {
        $R7$0 = $184; //@line 8298
        $RP9$0 = $183; //@line 8298
        continue;
       }
       $186 = $R7$0 + 16 | 0; //@line 8301
       $187 = HEAP32[$186 >> 2] | 0; //@line 8302
       if (($187 | 0) == 0) {
        break;
       } else {
        $R7$0 = $187; //@line 8307
        $RP9$0 = $186; //@line 8307
       }
      }
      if ($RP9$0 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
       _abort(); //@line 8313
      } else {
       HEAP32[$RP9$0 >> 2] = 0; //@line 8316
       $R7$1 = $R7$0; //@line 8317
       break;
      }
     } else {
      $168 = HEAP32[$mem + $8 >> 2] | 0; //@line 8322
      if ($168 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
       _abort(); //@line 8326
      }
      $171 = $168 + 12 | 0; //@line 8329
      if ((HEAP32[$171 >> 2] | 0) != ($9 | 0)) {
       _abort(); //@line 8333
      }
      $174 = $165 + 8 | 0; //@line 8336
      if ((HEAP32[$174 >> 2] | 0) == ($9 | 0)) {
       HEAP32[$171 >> 2] = $165; //@line 8340
       HEAP32[$174 >> 2] = $168; //@line 8341
       $R7$1 = $165; //@line 8342
       break;
      } else {
       _abort(); //@line 8345
      }
     }
    } while (0);
    if (($163 | 0) != 0) {
     $193 = HEAP32[$mem + ($8 + 20) >> 2] | 0; //@line 8354
     $194 = 1408 + ($193 << 2) | 0; //@line 8355
     if (($9 | 0) == (HEAP32[$194 >> 2] | 0)) {
      HEAP32[$194 >> 2] = $R7$1; //@line 8359
      if (($R7$1 | 0) == 0) {
       HEAP32[1108 >> 2] = HEAP32[1108 >> 2] & ~(1 << $193); //@line 8366
       break;
      }
     } else {
      if ($163 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
       _abort(); //@line 8373
      }
      $203 = $163 + 16 | 0; //@line 8376
      if ((HEAP32[$203 >> 2] | 0) == ($9 | 0)) {
       HEAP32[$203 >> 2] = $R7$1; //@line 8380
      } else {
       HEAP32[$163 + 20 >> 2] = $R7$1; //@line 8383
      }
      if (($R7$1 | 0) == 0) {
       break;
      }
     }
     if ($R7$1 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
      _abort(); //@line 8393
     }
     HEAP32[$R7$1 + 24 >> 2] = $163; //@line 8397
     $212 = HEAP32[$mem + ($8 + 8) >> 2] | 0; //@line 8400
     do {
      if (($212 | 0) != 0) {
       if ($212 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
        _abort(); //@line 8407
       } else {
        HEAP32[$R7$1 + 16 >> 2] = $212; //@line 8411
        HEAP32[$212 + 24 >> 2] = $R7$1; //@line 8413
        break;
       }
      }
     } while (0);
     $219 = HEAP32[$mem + ($8 + 12) >> 2] | 0; //@line 8420
     if (($219 | 0) != 0) {
      if ($219 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
       _abort(); //@line 8426
      } else {
       HEAP32[$R7$1 + 20 >> 2] = $219; //@line 8430
       HEAP32[$219 + 24 >> 2] = $R7$1; //@line 8432
       break;
      }
     }
    }
   }
  } while (0);
  HEAP32[$p$0 + 4 >> 2] = $135 | 1; //@line 8441
  HEAP32[$p$0 + $135 >> 2] = $135; //@line 8443
  if (($p$0 | 0) == (HEAP32[1124 >> 2] | 0)) {
   HEAP32[1112 >> 2] = $135; //@line 8447
   STACKTOP = sp; //@line 8448
   return;
  } else {
   $psize$1 = $135; //@line 8450
  }
 } else {
  HEAP32[$113 >> 2] = $114 & -2; //@line 8454
  HEAP32[$p$0 + 4 >> 2] = $psize$0 | 1; //@line 8457
  HEAP32[$p$0 + $psize$0 >> 2] = $psize$0; //@line 8459
  $psize$1 = $psize$0; //@line 8460
 }
 $234 = $psize$1 >>> 3; //@line 8462
 if ($psize$1 >>> 0 < 256) {
  $236 = $234 << 1; //@line 8465
  $237 = 1144 + ($236 << 2) | 0; //@line 8466
  $238 = HEAP32[276] | 0; //@line 8467
  $239 = 1 << $234; //@line 8468
  if (($238 & $239 | 0) == 0) {
   HEAP32[276] = $238 | $239; //@line 8473
   $$pre$phiZ2D = 1144 + ($236 + 2 << 2) | 0; //@line 8476
   $F16$0 = $237; //@line 8476
  } else {
   $243 = 1144 + ($236 + 2 << 2) | 0; //@line 8479
   $244 = HEAP32[$243 >> 2] | 0; //@line 8480
   if ($244 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
    _abort(); //@line 8484
   } else {
    $$pre$phiZ2D = $243; //@line 8487
    $F16$0 = $244; //@line 8487
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $p$0; //@line 8490
  HEAP32[$F16$0 + 12 >> 2] = $p$0; //@line 8492
  HEAP32[$p$0 + 8 >> 2] = $F16$0; //@line 8494
  HEAP32[$p$0 + 12 >> 2] = $237; //@line 8496
  STACKTOP = sp; //@line 8497
  return;
 }
 $250 = $psize$1 >>> 8; //@line 8499
 if (($250 | 0) == 0) {
  $I18$0 = 0; //@line 8502
 } else {
  if ($psize$1 >>> 0 > 16777215) {
   $I18$0 = 31; //@line 8506
  } else {
   $255 = ($250 + 1048320 | 0) >>> 16 & 8; //@line 8510
   $256 = $250 << $255; //@line 8511
   $259 = ($256 + 520192 | 0) >>> 16 & 4; //@line 8514
   $261 = $256 << $259; //@line 8516
   $264 = ($261 + 245760 | 0) >>> 16 & 2; //@line 8519
   $269 = 14 - ($259 | $255 | $264) + ($261 << $264 >>> 15) | 0; //@line 8524
   $I18$0 = $psize$1 >>> ($269 + 7 | 0) & 1 | $269 << 1; //@line 8530
  }
 }
 $275 = 1408 + ($I18$0 << 2) | 0; //@line 8533
 HEAP32[$p$0 + 28 >> 2] = $I18$0; //@line 8536
 HEAP32[$p$0 + 20 >> 2] = 0; //@line 8538
 HEAP32[$p$0 + 16 >> 2] = 0; //@line 8540
 $279 = HEAP32[1108 >> 2] | 0; //@line 8541
 $280 = 1 << $I18$0; //@line 8542
 L199 : do {
  if (($279 & $280 | 0) == 0) {
   HEAP32[1108 >> 2] = $279 | $280; //@line 8548
   HEAP32[$275 >> 2] = $p$0; //@line 8549
   HEAP32[$p$0 + 24 >> 2] = $275; //@line 8551
   HEAP32[$p$0 + 12 >> 2] = $p$0; //@line 8553
   HEAP32[$p$0 + 8 >> 2] = $p$0; //@line 8555
  } else {
   $287 = HEAP32[$275 >> 2] | 0; //@line 8557
   if (($I18$0 | 0) == 31) {
    $296 = 0; //@line 8560
   } else {
    $296 = 25 - ($I18$0 >>> 1) | 0; //@line 8564
   }
   L205 : do {
    if ((HEAP32[$287 + 4 >> 2] & -8 | 0) == ($psize$1 | 0)) {
     $T$0$lcssa = $287; //@line 8572
    } else {
     $K19$057 = $psize$1 << $296; //@line 8575
     $T$056 = $287; //@line 8575
     while (1) {
      $304 = $T$056 + ($K19$057 >>> 31 << 2) + 16 | 0; //@line 8578
      $299 = HEAP32[$304 >> 2] | 0; //@line 8579
      if (($299 | 0) == 0) {
       break;
      }
      if ((HEAP32[$299 + 4 >> 2] & -8 | 0) == ($psize$1 | 0)) {
       $T$0$lcssa = $299; //@line 8590
       break L205;
      } else {
       $K19$057 = $K19$057 << 1; //@line 8593
       $T$056 = $299; //@line 8593
      }
     }
     if ($304 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
      _abort(); //@line 8599
     } else {
      HEAP32[$304 >> 2] = $p$0; //@line 8602
      HEAP32[$p$0 + 24 >> 2] = $T$056; //@line 8604
      HEAP32[$p$0 + 12 >> 2] = $p$0; //@line 8606
      HEAP32[$p$0 + 8 >> 2] = $p$0; //@line 8608
      break L199;
     }
    }
   } while (0);
   $311 = $T$0$lcssa + 8 | 0; //@line 8613
   $312 = HEAP32[$311 >> 2] | 0; //@line 8614
   $313 = HEAP32[1120 >> 2] | 0; //@line 8615
   if ($T$0$lcssa >>> 0 < $313 >>> 0) {
    _abort(); //@line 8618
   }
   if ($312 >>> 0 < $313 >>> 0) {
    _abort(); //@line 8623
   } else {
    HEAP32[$312 + 12 >> 2] = $p$0; //@line 8627
    HEAP32[$311 >> 2] = $p$0; //@line 8628
    HEAP32[$p$0 + 8 >> 2] = $312; //@line 8630
    HEAP32[$p$0 + 12 >> 2] = $T$0$lcssa; //@line 8632
    HEAP32[$p$0 + 24 >> 2] = 0; //@line 8634
    break;
   }
  }
 } while (0);
 $321 = (HEAP32[1136 >> 2] | 0) + -1 | 0; //@line 8640
 HEAP32[1136 >> 2] = $321; //@line 8641
 if (($321 | 0) == 0) {
  $sp$0$in$i = 1560 | 0; //@line 8644
 } else {
  STACKTOP = sp; //@line 8646
  return;
 }
 while (1) {
  $sp$0$i = HEAP32[$sp$0$in$i >> 2] | 0; //@line 8649
  if (($sp$0$i | 0) == 0) {
   break;
  } else {
   $sp$0$in$i = $sp$0$i + 8 | 0; //@line 8655
  }
 }
 HEAP32[1136 >> 2] = -1; //@line 8658
 STACKTOP = sp; //@line 8659
 return;
}
function _parse_value($item, $value) {
 $item = $item | 0;
 $value = $value | 0;
 var $$$i = 0.0, $$0 = 0, $$01$i = 0, $$01$i$i = 0, $$01$i$i1 = 0, $$01$i$pn = 0, $$01$i12$i = 0, $$01$i18$i = 0, $$01$i2$i = 0, $$01$i2$i7 = 0, $$01$i23 = 0, $$01$i23$pn = 0, $$01$i31$i = 0, $$01$i31$i$pn = 0, $$01$i43$i = 0, $$01$i7$i = 0, $$01$i7$i12 = 0, $$01$i7$i12$pn = 0, $$1$i = 0, $$2$i = 0, $$3$i = 0, $$4$i = 0, $$5$i = 0, $$6$ph$i = 0, $$612$i = 0, $$7$i = 0, $$num$i = 0, $106 = 0, $108 = 0, $111 = 0, $115 = 0, $118 = 0, $120 = 0, $124 = 0, $129 = 0, $131 = 0, $133 = 0, $138 = 0, $14 = 0, $140 = 0, $142 = 0, $144 = 0, $148 = 0, $153 = 0, $155 = 0, $157 = 0, $162 = 0, $163 = 0, $164 = 0, $17 = 0, $22 = 0, $25 = 0, $27 = 0, $30 = 0.0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $39 = 0, $41 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $48 = 0, $49 = 0, $52 = 0, $55 = 0, $57 = 0, $59 = 0, $67 = 0.0, $74 = 0, $76 = 0, $79 = 0, $83 = 0, $86 = 0, $88 = 0, $93 = 0, $95 = 0, $97 = 0, $99 = 0, $child$0$i = 0, $child$0$i24 = 0, $n$0$i = 0.0, $n$1$i = 0.0, $n$2$i = 0.0, $n$3$i = 0.0, $n$328$i = 0.0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$129$i = 0.0, $signsubscale$0$ph$i = 0, $signsubscale$1$i = 0, $subscale$013$i = 0, $subscale$1$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 197
 if (($value | 0) == 0) {
  $$0 = 0; //@line 200
  STACKTOP = sp; //@line 201
  return $$0 | 0; //@line 201
 }
 if ((_strncmp($value, 32, 4) | 0) == 0) {
  HEAP32[$item + 12 >> 2] = 2; //@line 207
  $$0 = $value + 4 | 0; //@line 209
  STACKTOP = sp; //@line 210
  return $$0 | 0; //@line 210
 }
 if ((_strncmp($value, 40, 5) | 0) == 0) {
  HEAP32[$item + 12 >> 2] = 0; //@line 216
  $$0 = $value + 5 | 0; //@line 218
  STACKTOP = sp; //@line 219
  return $$0 | 0; //@line 219
 }
 if ((_strncmp($value, 48, 4) | 0) == 0) {
  HEAP32[$item + 12 >> 2] = 1; //@line 225
  HEAP32[$item + 20 >> 2] = 1; //@line 227
  $$0 = $value + 4 | 0; //@line 229
  STACKTOP = sp; //@line 230
  return $$0 | 0; //@line 230
 }
 $14 = HEAP8[$value >> 0] | 0; //@line 232
 if ($14 << 24 >> 24 == 34) {
  $$0 = _parse_string($item, $value) | 0; //@line 235
  STACKTOP = sp; //@line 236
  return $$0 | 0; //@line 236
 } else if (!($14 << 24 >> 24 == 45)) {
  label = 10; //@line 238
 }
 if ((label | 0) == 10) {
  if (!(($14 + -48 << 24 >> 24 & 255) < 10)) {
   if ($14 << 24 >> 24 == 91) {
    HEAP32[$item + 12 >> 2] = 5; //@line 246
    $$01$i$i = $value + 1 | 0; //@line 248
    while (1) {
     $74 = HEAP8[$$01$i$i >> 0] | 0; //@line 250
     $76 = $$01$i$i + 1 | 0; //@line 254
     if (($74 & 255) < 33 & $74 << 24 >> 24 != 0) {
      $$01$i$i = $76; //@line 256
     } else {
      break;
     }
    }
    if ($74 << 24 >> 24 == 93) {
     $$0 = $76; //@line 263
     STACKTOP = sp; //@line 264
     return $$0 | 0; //@line 264
    }
    $79 = FUNCTION_TABLE_ii[HEAP32[4] & 15](40) | 0; //@line 267
    if (($79 | 0) == 0) {
     HEAP32[$item + 8 >> 2] = $79; //@line 271
     $$0 = 0; //@line 272
     STACKTOP = sp; //@line 273
     return $$0 | 0; //@line 273
    }
    dest = $79 + 0 | 0; //@line 275
    stop = dest + 40 | 0; //@line 275
    do {
     HEAP32[dest >> 2] = 0; //@line 275
     dest = dest + 4 | 0; //@line 275
    } while ((dest | 0) < (stop | 0));
    HEAP32[$item + 8 >> 2] = $79; //@line 277
    $$01$i2$i = $$01$i$i; //@line 278
    while (1) {
     $83 = HEAP8[$$01$i2$i >> 0] | 0; //@line 280
     if (($83 & 255) < 33 & $83 << 24 >> 24 != 0) {
      $$01$i2$i = $$01$i2$i + 1 | 0; //@line 286
     } else {
      break;
     }
    }
    $86 = _parse_value($79, $$01$i2$i) | 0; //@line 291
    if (($86 | 0) == 0) {
     $$0 = 0; //@line 294
     STACKTOP = sp; //@line 295
     return $$0 | 0; //@line 295
    } else {
     $$01$i12$i = $86; //@line 297
    }
    while (1) {
     $88 = HEAP8[$$01$i12$i >> 0] | 0; //@line 300
     if (($88 & 255) < 33 & $88 << 24 >> 24 != 0) {
      $$01$i12$i = $$01$i12$i + 1 | 0; //@line 306
     } else {
      break;
     }
    }
    if (($$01$i12$i | 0) == 0) {
     $$0 = 0; //@line 313
     STACKTOP = sp; //@line 314
     return $$0 | 0; //@line 314
    } else {
     $$01$i = $$01$i12$i; //@line 316
     $163 = $88; //@line 316
     $child$0$i = $79; //@line 316
    }
    while (1) {
     if ($163 << 24 >> 24 == 93) {
      label = 41; //@line 320
      break;
     } else if (!($163 << 24 >> 24 == 44)) {
      label = 42; //@line 323
      break;
     }
     $93 = FUNCTION_TABLE_ii[HEAP32[4] & 15](40) | 0; //@line 327
     if (($93 | 0) == 0) {
      $$0 = 0; //@line 330
      label = 75; //@line 331
      break;
     }
     dest = $93 + 0 | 0; //@line 334
     stop = dest + 40 | 0; //@line 334
     do {
      HEAP32[dest >> 2] = 0; //@line 334
      dest = dest + 4 | 0; //@line 334
     } while ((dest | 0) < (stop | 0));
     HEAP32[$child$0$i >> 2] = $93; //@line 335
     HEAP32[$93 + 4 >> 2] = $child$0$i; //@line 337
     $$01$i$pn = $$01$i; //@line 338
     do {
      $$01$i$pn = $$01$i$pn + 1 | 0; //@line 340
      $95 = HEAP8[$$01$i$pn >> 0] | 0; //@line 341
     } while (($95 & 255) < 33 & $95 << 24 >> 24 != 0);
     $97 = _parse_value($93, $$01$i$pn) | 0; //@line 351
     if (($97 | 0) == 0) {
      $$0 = 0; //@line 354
      label = 75; //@line 355
      break;
     } else {
      $$01$i7$i = $97; //@line 358
     }
     while (1) {
      $99 = HEAP8[$$01$i7$i >> 0] | 0; //@line 361
      if (($99 & 255) < 33 & $99 << 24 >> 24 != 0) {
       $$01$i7$i = $$01$i7$i + 1 | 0; //@line 367
      } else {
       break;
      }
     }
     if (($$01$i7$i | 0) == 0) {
      $$0 = 0; //@line 374
      label = 75; //@line 375
      break;
     } else {
      $$01$i = $$01$i7$i; //@line 378
      $163 = $99; //@line 378
      $child$0$i = $93; //@line 378
     }
    }
    if ((label | 0) == 41) {
     $$0 = $$01$i + 1 | 0; //@line 383
     STACKTOP = sp; //@line 384
     return $$0 | 0; //@line 384
    } else if ((label | 0) == 42) {
     HEAP32[2] = $$01$i; //@line 387
     $$0 = 0; //@line 388
     STACKTOP = sp; //@line 389
     return $$0 | 0; //@line 389
    } else if ((label | 0) == 75) {
     STACKTOP = sp; //@line 392
     return $$0 | 0; //@line 392
    }
   } else if ($14 << 24 >> 24 == 123) {
    HEAP32[$item + 12 >> 2] = 6; //@line 396
    $$01$i$i1 = $value + 1 | 0; //@line 398
    while (1) {
     $106 = HEAP8[$$01$i$i1 >> 0] | 0; //@line 400
     $108 = $$01$i$i1 + 1 | 0; //@line 404
     if (($106 & 255) < 33 & $106 << 24 >> 24 != 0) {
      $$01$i$i1 = $108; //@line 406
     } else {
      break;
     }
    }
    if ($106 << 24 >> 24 == 125) {
     $$0 = $108; //@line 413
     STACKTOP = sp; //@line 414
     return $$0 | 0; //@line 414
    }
    $111 = FUNCTION_TABLE_ii[HEAP32[4] & 15](40) | 0; //@line 417
    if (($111 | 0) == 0) {
     HEAP32[$item + 8 >> 2] = $111; //@line 421
     $$0 = 0; //@line 422
     STACKTOP = sp; //@line 423
     return $$0 | 0; //@line 423
    }
    dest = $111 + 0 | 0; //@line 425
    stop = dest + 40 | 0; //@line 425
    do {
     HEAP32[dest >> 2] = 0; //@line 425
     dest = dest + 4 | 0; //@line 425
    } while ((dest | 0) < (stop | 0));
    HEAP32[$item + 8 >> 2] = $111; //@line 427
    $$01$i2$i7 = $$01$i$i1; //@line 428
    while (1) {
     $115 = HEAP8[$$01$i2$i7 >> 0] | 0; //@line 430
     if (($115 & 255) < 33 & $115 << 24 >> 24 != 0) {
      $$01$i2$i7 = $$01$i2$i7 + 1 | 0; //@line 436
     } else {
      break;
     }
    }
    $118 = _parse_string($111, $$01$i2$i7) | 0; //@line 441
    if (($118 | 0) == 0) {
     $$0 = 0; //@line 444
     STACKTOP = sp; //@line 445
     return $$0 | 0; //@line 445
    } else {
     $$01$i7$i12 = $118; //@line 447
    }
    while (1) {
     $120 = HEAP8[$$01$i7$i12 >> 0] | 0; //@line 450
     if (($120 & 255) < 33 & $120 << 24 >> 24 != 0) {
      $$01$i7$i12 = $$01$i7$i12 + 1 | 0; //@line 456
     } else {
      break;
     }
    }
    if (($$01$i7$i12 | 0) == 0) {
     $$0 = 0; //@line 463
     STACKTOP = sp; //@line 464
     return $$0 | 0; //@line 464
    }
    $124 = $111 + 16 | 0; //@line 466
    HEAP32[$111 + 32 >> 2] = HEAP32[$124 >> 2]; //@line 469
    HEAP32[$124 >> 2] = 0; //@line 470
    if ((HEAP8[$$01$i7$i12 >> 0] | 0) == 58) {
     $$01$i7$i12$pn = $$01$i7$i12; //@line 474
    } else {
     HEAP32[2] = $$01$i7$i12; //@line 476
     $$0 = 0; //@line 477
     STACKTOP = sp; //@line 478
     return $$0 | 0; //@line 478
    }
    do {
     $$01$i7$i12$pn = $$01$i7$i12$pn + 1 | 0; //@line 481
     $129 = HEAP8[$$01$i7$i12$pn >> 0] | 0; //@line 482
    } while (($129 & 255) < 33 & $129 << 24 >> 24 != 0);
    $131 = _parse_value($111, $$01$i7$i12$pn) | 0; //@line 492
    if (($131 | 0) == 0) {
     $$0 = 0; //@line 495
     STACKTOP = sp; //@line 496
     return $$0 | 0; //@line 496
    } else {
     $$01$i18$i = $131; //@line 498
    }
    while (1) {
     $133 = HEAP8[$$01$i18$i >> 0] | 0; //@line 501
     if (($133 & 255) < 33 & $133 << 24 >> 24 != 0) {
      $$01$i18$i = $$01$i18$i + 1 | 0; //@line 507
     } else {
      break;
     }
    }
    if (($$01$i18$i | 0) == 0) {
     $$0 = 0; //@line 514
     STACKTOP = sp; //@line 515
     return $$0 | 0; //@line 515
    } else {
     $$01$i23 = $$01$i18$i; //@line 517
     $164 = $133; //@line 517
     $child$0$i24 = $111; //@line 517
    }
    while (1) {
     if ($164 << 24 >> 24 == 125) {
      label = 72; //@line 521
      break;
     } else if (!($164 << 24 >> 24 == 44)) {
      label = 73; //@line 524
      break;
     }
     $138 = FUNCTION_TABLE_ii[HEAP32[4] & 15](40) | 0; //@line 528
     if (($138 | 0) == 0) {
      $$0 = 0; //@line 531
      label = 75; //@line 532
      break;
     }
     dest = $138 + 0 | 0; //@line 535
     stop = dest + 40 | 0; //@line 535
     do {
      HEAP32[dest >> 2] = 0; //@line 535
      dest = dest + 4 | 0; //@line 535
     } while ((dest | 0) < (stop | 0));
     HEAP32[$child$0$i24 >> 2] = $138; //@line 536
     HEAP32[$138 + 4 >> 2] = $child$0$i24; //@line 538
     $$01$i23$pn = $$01$i23; //@line 539
     do {
      $$01$i23$pn = $$01$i23$pn + 1 | 0; //@line 541
      $140 = HEAP8[$$01$i23$pn >> 0] | 0; //@line 542
     } while (($140 & 255) < 33 & $140 << 24 >> 24 != 0);
     $142 = _parse_string($138, $$01$i23$pn) | 0; //@line 552
     if (($142 | 0) == 0) {
      $$0 = 0; //@line 555
      label = 75; //@line 556
      break;
     } else {
      $$01$i31$i = $142; //@line 559
     }
     while (1) {
      $144 = HEAP8[$$01$i31$i >> 0] | 0; //@line 562
      if (($144 & 255) < 33 & $144 << 24 >> 24 != 0) {
       $$01$i31$i = $$01$i31$i + 1 | 0; //@line 568
      } else {
       break;
      }
     }
     if (($$01$i31$i | 0) == 0) {
      $$0 = 0; //@line 575
      label = 75; //@line 576
      break;
     }
     $148 = $138 + 16 | 0; //@line 579
     HEAP32[$138 + 32 >> 2] = HEAP32[$148 >> 2]; //@line 582
     HEAP32[$148 >> 2] = 0; //@line 583
     if ((HEAP8[$$01$i31$i >> 0] | 0) == 58) {
      $$01$i31$i$pn = $$01$i31$i; //@line 587
     } else {
      label = 67; //@line 589
      break;
     }
     do {
      $$01$i31$i$pn = $$01$i31$i$pn + 1 | 0; //@line 593
      $153 = HEAP8[$$01$i31$i$pn >> 0] | 0; //@line 594
     } while (($153 & 255) < 33 & $153 << 24 >> 24 != 0);
     $155 = _parse_value($138, $$01$i31$i$pn) | 0; //@line 604
     if (($155 | 0) == 0) {
      $$0 = 0; //@line 607
      label = 75; //@line 608
      break;
     } else {
      $$01$i43$i = $155; //@line 611
     }
     while (1) {
      $157 = HEAP8[$$01$i43$i >> 0] | 0; //@line 614
      if (($157 & 255) < 33 & $157 << 24 >> 24 != 0) {
       $$01$i43$i = $$01$i43$i + 1 | 0; //@line 620
      } else {
       break;
      }
     }
     if (($$01$i43$i | 0) == 0) {
      $$0 = 0; //@line 627
      label = 75; //@line 628
      break;
     } else {
      $$01$i23 = $$01$i43$i; //@line 631
      $164 = $157; //@line 631
      $child$0$i24 = $138; //@line 631
     }
    }
    if ((label | 0) == 67) {
     HEAP32[2] = $$01$i31$i; //@line 635
     $$0 = 0; //@line 636
     STACKTOP = sp; //@line 637
     return $$0 | 0; //@line 637
    } else if ((label | 0) == 72) {
     $$0 = $$01$i23 + 1 | 0; //@line 641
     STACKTOP = sp; //@line 642
     return $$0 | 0; //@line 642
    } else if ((label | 0) == 73) {
     HEAP32[2] = $$01$i23; //@line 645
     $$0 = 0; //@line 646
     STACKTOP = sp; //@line 647
     return $$0 | 0; //@line 647
    } else if ((label | 0) == 75) {
     STACKTOP = sp; //@line 650
     return $$0 | 0; //@line 650
    }
   } else {
    HEAP32[2] = $value; //@line 653
    $$0 = 0; //@line 654
    STACKTOP = sp; //@line 655
    return $$0 | 0; //@line 655
   }
  }
 }
 $17 = $14 << 24 >> 24 == 45; //@line 659
 $$num$i = $17 ? $value + 1 | 0 : $value; //@line 661
 $$$i = $17 ? -1.0 : 1.0; //@line 662
 $$1$i = (HEAP8[$$num$i >> 0] | 0) == 48 ? $$num$i + 1 | 0 : $$num$i; //@line 666
 $22 = HEAP8[$$1$i >> 0] | 0; //@line 667
 if (($22 + -49 << 24 >> 24 & 255) < 9) {
  $$2$i = $$1$i; //@line 671
  $27 = $22; //@line 671
  $n$0$i = 0.0; //@line 671
  while (1) {
   $25 = $$2$i + 1 | 0; //@line 674
   $30 = $n$0$i * 10.0 + +(($27 & 255) + -48 | 0); //@line 678
   $31 = HEAP8[$25 >> 0] | 0; //@line 679
   if (($31 + -48 << 24 >> 24 & 255) < 10) {
    $$2$i = $25; //@line 683
    $27 = $31; //@line 683
    $n$0$i = $30; //@line 683
   } else {
    $$3$i = $25; //@line 685
    $34 = $31; //@line 685
    $n$1$i = $30; //@line 685
    break;
   }
  }
 } else {
  $$3$i = $$1$i; //@line 690
  $34 = $22; //@line 690
  $n$1$i = 0.0; //@line 690
 }
 if ($34 << 24 >> 24 == 46) {
  $35 = $$3$i + 1 | 0; //@line 694
  $36 = HEAP8[$35 >> 0] | 0; //@line 695
  if (($36 + -48 << 24 >> 24 & 255) < 10) {
   $$4$i = $35; //@line 699
   $41 = $36; //@line 699
   $n$2$i = $n$1$i; //@line 699
   $scale$0$i = 0.0; //@line 699
   while (1) {
    $39 = $$4$i + 1 | 0; //@line 702
    $44 = $n$2$i * 10.0 + +(($41 & 255) + -48 | 0); //@line 706
    $45 = $scale$0$i + -1.0; //@line 707
    $46 = HEAP8[$39 >> 0] | 0; //@line 708
    if (($46 + -48 << 24 >> 24 & 255) < 10) {
     $$4$i = $39; //@line 712
     $41 = $46; //@line 712
     $n$2$i = $44; //@line 712
     $scale$0$i = $45; //@line 712
    } else {
     $$5$i = $39; //@line 714
     $162 = $46; //@line 714
     $n$3$i = $44; //@line 714
     $scale$1$i = $45; //@line 714
     label = 16; //@line 715
     break;
    }
   }
  } else {
   $$7$i = $$3$i; //@line 720
   $n$328$i = $n$1$i; //@line 720
   $scale$129$i = 0.0; //@line 720
   $signsubscale$1$i = 1; //@line 720
   $subscale$1$i = 0; //@line 720
  }
 } else {
  $$5$i = $$3$i; //@line 723
  $162 = $34; //@line 723
  $n$3$i = $n$1$i; //@line 723
  $scale$1$i = 0.0; //@line 723
  label = 16; //@line 724
 }
 if ((label | 0) == 16) {
  if ($162 << 24 >> 24 == 69 | $162 << 24 >> 24 == 101) {
   $48 = $$5$i + 1 | 0; //@line 728
   $49 = HEAP8[$48 >> 0] | 0; //@line 729
   if ($49 << 24 >> 24 == 43) {
    $$6$ph$i = $$5$i + 2 | 0; //@line 732
    $signsubscale$0$ph$i = 1; //@line 732
   } else if ($49 << 24 >> 24 == 45) {
    $$6$ph$i = $$5$i + 2 | 0; //@line 735
    $signsubscale$0$ph$i = -1; //@line 735
   } else {
    $$6$ph$i = $48; //@line 737
    $signsubscale$0$ph$i = 1; //@line 737
   }
   $52 = HEAP8[$$6$ph$i >> 0] | 0; //@line 739
   if (($52 + -48 << 24 >> 24 & 255) < 10) {
    $$612$i = $$6$ph$i; //@line 743
    $55 = $52; //@line 743
    $subscale$013$i = 0; //@line 743
    while (1) {
     $57 = $$612$i + 1 | 0; //@line 747
     $59 = ($55 & 255) + -48 + ($subscale$013$i * 10 | 0) | 0; //@line 749
     $55 = HEAP8[$57 >> 0] | 0; //@line 750
     if (!(($55 + -48 << 24 >> 24 & 255) < 10)) {
      $$7$i = $57; //@line 756
      $n$328$i = $n$3$i; //@line 756
      $scale$129$i = $scale$1$i; //@line 756
      $signsubscale$1$i = $signsubscale$0$ph$i; //@line 756
      $subscale$1$i = $59; //@line 756
      break;
     } else {
      $$612$i = $57; //@line 754
      $subscale$013$i = $59; //@line 754
     }
    }
   } else {
    $$7$i = $$6$ph$i; //@line 761
    $n$328$i = $n$3$i; //@line 761
    $scale$129$i = $scale$1$i; //@line 761
    $signsubscale$1$i = $signsubscale$0$ph$i; //@line 761
    $subscale$1$i = 0; //@line 761
   }
  } else {
   $$7$i = $$5$i; //@line 764
   $n$328$i = $n$3$i; //@line 764
   $scale$129$i = $scale$1$i; //@line 764
   $signsubscale$1$i = 1; //@line 764
   $subscale$1$i = 0; //@line 764
  }
 }
 $67 = $$$i * $n$328$i * +Math_pow(10.0, +($scale$129$i + +(Math_imul($signsubscale$1$i, $subscale$1$i) | 0))); //@line 772
 HEAPF64[$item + 24 >> 3] = $67; //@line 774
 HEAP32[$item + 20 >> 2] = ~~$67; //@line 777
 HEAP32[$item + 12 >> 2] = 3; //@line 779
 $$0 = $$7$i; //@line 780
 STACKTOP = sp; //@line 781
 return $$0 | 0; //@line 781
}
function _dispose_chunk($p, $psize) {
 $p = $p | 0;
 $psize = $psize | 0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$pre$phi63Z2D = 0, $$pre$phi65Z2D = 0, $$pre$phiZ2D = 0, $$sum24 = 0, $$sum27 = 0, $0 = 0, $10 = 0, $100 = 0, $108 = 0, $11 = 0, $110 = 0, $111 = 0, $117 = 0, $125 = 0, $130 = 0, $131 = 0, $134 = 0, $136 = 0, $138 = 0, $15 = 0, $151 = 0, $156 = 0, $158 = 0, $161 = 0, $163 = 0, $166 = 0, $169 = 0, $170 = 0, $172 = 0, $173 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $184 = 0, $185 = 0, $194 = 0, $2 = 0, $20 = 0, $203 = 0, $210 = 0, $22 = 0, $225 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $234 = 0, $235 = 0, $241 = 0, $246 = 0, $247 = 0, $250 = 0, $252 = 0, $255 = 0, $260 = 0, $266 = 0, $270 = 0, $271 = 0, $278 = 0, $287 = 0, $290 = 0, $295 = 0, $302 = 0, $303 = 0, $304 = 0, $35 = 0, $40 = 0, $42 = 0, $45 = 0, $47 = 0, $5 = 0, $50 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $59 = 0, $60 = 0, $62 = 0, $63 = 0, $68 = 0, $69 = 0, $78 = 0, $87 = 0, $9 = 0, $94 = 0, $F16$0 = 0, $I19$0 = 0, $K20$049 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$048 = 0, sp = 0;
 sp = STACKTOP; //@line 9182
 $0 = $p + $psize | 0; //@line 9183
 $2 = HEAP32[$p + 4 >> 2] | 0; //@line 9185
 do {
  if (($2 & 1 | 0) == 0) {
   $5 = HEAP32[$p >> 2] | 0; //@line 9190
   if (($2 & 3 | 0) == 0) {
    STACKTOP = sp; //@line 9194
    return;
   }
   $9 = $p + (0 - $5) | 0; //@line 9197
   $10 = $5 + $psize | 0; //@line 9198
   $11 = HEAP32[1120 >> 2] | 0; //@line 9199
   if ($9 >>> 0 < $11 >>> 0) {
    _abort(); //@line 9202
   }
   if (($9 | 0) == (HEAP32[1124 >> 2] | 0)) {
    $100 = $p + ($psize + 4) | 0; //@line 9209
    if ((HEAP32[$100 >> 2] & 3 | 0) != 3) {
     $$0 = $9; //@line 9214
     $$02 = $10; //@line 9214
     break;
    }
    HEAP32[1112 >> 2] = $10; //@line 9217
    HEAP32[$100 >> 2] = HEAP32[$100 >> 2] & -2; //@line 9220
    HEAP32[$p + (4 - $5) >> 2] = $10 | 1; //@line 9224
    HEAP32[$0 >> 2] = $10; //@line 9225
    STACKTOP = sp; //@line 9226
    return;
   }
   $15 = $5 >>> 3; //@line 9228
   if ($5 >>> 0 < 256) {
    $18 = HEAP32[$p + (8 - $5) >> 2] | 0; //@line 9233
    $20 = HEAP32[$p + (12 - $5) >> 2] | 0; //@line 9236
    $22 = 1144 + ($15 << 1 << 2) | 0; //@line 9238
    if (($18 | 0) != ($22 | 0)) {
     if ($18 >>> 0 < $11 >>> 0) {
      _abort(); //@line 9243
     }
     if ((HEAP32[$18 + 12 >> 2] | 0) != ($9 | 0)) {
      _abort(); //@line 9250
     }
    }
    if (($20 | 0) == ($18 | 0)) {
     HEAP32[276] = HEAP32[276] & ~(1 << $15); //@line 9260
     $$0 = $9; //@line 9261
     $$02 = $10; //@line 9261
     break;
    }
    if (($20 | 0) == ($22 | 0)) {
     $$pre$phi65Z2D = $20 + 8 | 0; //@line 9267
    } else {
     if ($20 >>> 0 < $11 >>> 0) {
      _abort(); //@line 9271
     }
     $35 = $20 + 8 | 0; //@line 9274
     if ((HEAP32[$35 >> 2] | 0) == ($9 | 0)) {
      $$pre$phi65Z2D = $35; //@line 9278
     } else {
      _abort(); //@line 9280
     }
    }
    HEAP32[$18 + 12 >> 2] = $20; //@line 9285
    HEAP32[$$pre$phi65Z2D >> 2] = $18; //@line 9286
    $$0 = $9; //@line 9287
    $$02 = $10; //@line 9287
    break;
   }
   $40 = HEAP32[$p + (24 - $5) >> 2] | 0; //@line 9292
   $42 = HEAP32[$p + (12 - $5) >> 2] | 0; //@line 9295
   do {
    if (($42 | 0) == ($9 | 0)) {
     $$sum24 = 16 - $5 | 0; //@line 9299
     $53 = $p + ($$sum24 + 4) | 0; //@line 9301
     $54 = HEAP32[$53 >> 2] | 0; //@line 9302
     if (($54 | 0) == 0) {
      $56 = $p + $$sum24 | 0; //@line 9305
      $57 = HEAP32[$56 >> 2] | 0; //@line 9306
      if (($57 | 0) == 0) {
       $R$1 = 0; //@line 9309
       break;
      } else {
       $R$0 = $57; //@line 9312
       $RP$0 = $56; //@line 9312
      }
     } else {
      $R$0 = $54; //@line 9315
      $RP$0 = $53; //@line 9315
     }
     while (1) {
      $59 = $R$0 + 20 | 0; //@line 9318
      $60 = HEAP32[$59 >> 2] | 0; //@line 9319
      if (($60 | 0) != 0) {
       $R$0 = $60; //@line 9322
       $RP$0 = $59; //@line 9322
       continue;
      }
      $62 = $R$0 + 16 | 0; //@line 9325
      $63 = HEAP32[$62 >> 2] | 0; //@line 9326
      if (($63 | 0) == 0) {
       break;
      } else {
       $R$0 = $63; //@line 9331
       $RP$0 = $62; //@line 9331
      }
     }
     if ($RP$0 >>> 0 < $11 >>> 0) {
      _abort(); //@line 9336
     } else {
      HEAP32[$RP$0 >> 2] = 0; //@line 9339
      $R$1 = $R$0; //@line 9340
      break;
     }
    } else {
     $45 = HEAP32[$p + (8 - $5) >> 2] | 0; //@line 9346
     if ($45 >>> 0 < $11 >>> 0) {
      _abort(); //@line 9349
     }
     $47 = $45 + 12 | 0; //@line 9352
     if ((HEAP32[$47 >> 2] | 0) != ($9 | 0)) {
      _abort(); //@line 9356
     }
     $50 = $42 + 8 | 0; //@line 9359
     if ((HEAP32[$50 >> 2] | 0) == ($9 | 0)) {
      HEAP32[$47 >> 2] = $42; //@line 9363
      HEAP32[$50 >> 2] = $45; //@line 9364
      $R$1 = $42; //@line 9365
      break;
     } else {
      _abort(); //@line 9368
     }
    }
   } while (0);
   if (($40 | 0) == 0) {
    $$0 = $9; //@line 9375
    $$02 = $10; //@line 9375
   } else {
    $68 = HEAP32[$p + (28 - $5) >> 2] | 0; //@line 9379
    $69 = 1408 + ($68 << 2) | 0; //@line 9380
    if (($9 | 0) == (HEAP32[$69 >> 2] | 0)) {
     HEAP32[$69 >> 2] = $R$1; //@line 9384
     if (($R$1 | 0) == 0) {
      HEAP32[1108 >> 2] = HEAP32[1108 >> 2] & ~(1 << $68); //@line 9391
      $$0 = $9; //@line 9392
      $$02 = $10; //@line 9392
      break;
     }
    } else {
     if ($40 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
      _abort(); //@line 9399
     }
     $78 = $40 + 16 | 0; //@line 9402
     if ((HEAP32[$78 >> 2] | 0) == ($9 | 0)) {
      HEAP32[$78 >> 2] = $R$1; //@line 9406
     } else {
      HEAP32[$40 + 20 >> 2] = $R$1; //@line 9409
     }
     if (($R$1 | 0) == 0) {
      $$0 = $9; //@line 9413
      $$02 = $10; //@line 9413
      break;
     }
    }
    if ($R$1 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
     _abort(); //@line 9420
    }
    HEAP32[$R$1 + 24 >> 2] = $40; //@line 9424
    $$sum27 = 16 - $5 | 0; //@line 9425
    $87 = HEAP32[$p + $$sum27 >> 2] | 0; //@line 9427
    do {
     if (($87 | 0) != 0) {
      if ($87 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
       _abort(); //@line 9434
      } else {
       HEAP32[$R$1 + 16 >> 2] = $87; //@line 9438
       HEAP32[$87 + 24 >> 2] = $R$1; //@line 9440
       break;
      }
     }
    } while (0);
    $94 = HEAP32[$p + ($$sum27 + 4) >> 2] | 0; //@line 9447
    if (($94 | 0) == 0) {
     $$0 = $9; //@line 9450
     $$02 = $10; //@line 9450
    } else {
     if ($94 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
      _abort(); //@line 9455
     } else {
      HEAP32[$R$1 + 20 >> 2] = $94; //@line 9459
      HEAP32[$94 + 24 >> 2] = $R$1; //@line 9461
      $$0 = $9; //@line 9462
      $$02 = $10; //@line 9462
      break;
     }
    }
   }
  } else {
   $$0 = $p; //@line 9468
   $$02 = $psize; //@line 9468
  }
 } while (0);
 $108 = HEAP32[1120 >> 2] | 0; //@line 9471
 if ($0 >>> 0 < $108 >>> 0) {
  _abort(); //@line 9474
 }
 $110 = $p + ($psize + 4) | 0; //@line 9478
 $111 = HEAP32[$110 >> 2] | 0; //@line 9479
 if (($111 & 2 | 0) == 0) {
  if (($0 | 0) == (HEAP32[1128 >> 2] | 0)) {
   $117 = (HEAP32[1116 >> 2] | 0) + $$02 | 0; //@line 9487
   HEAP32[1116 >> 2] = $117; //@line 9488
   HEAP32[1128 >> 2] = $$0; //@line 9489
   HEAP32[$$0 + 4 >> 2] = $117 | 1; //@line 9492
   if (($$0 | 0) != (HEAP32[1124 >> 2] | 0)) {
    STACKTOP = sp; //@line 9496
    return;
   }
   HEAP32[1124 >> 2] = 0; //@line 9498
   HEAP32[1112 >> 2] = 0; //@line 9499
   STACKTOP = sp; //@line 9500
   return;
  }
  if (($0 | 0) == (HEAP32[1124 >> 2] | 0)) {
   $125 = (HEAP32[1112 >> 2] | 0) + $$02 | 0; //@line 9506
   HEAP32[1112 >> 2] = $125; //@line 9507
   HEAP32[1124 >> 2] = $$0; //@line 9508
   HEAP32[$$0 + 4 >> 2] = $125 | 1; //@line 9511
   HEAP32[$$0 + $125 >> 2] = $125; //@line 9513
   STACKTOP = sp; //@line 9514
   return;
  }
  $130 = ($111 & -8) + $$02 | 0; //@line 9517
  $131 = $111 >>> 3; //@line 9518
  do {
   if ($111 >>> 0 < 256) {
    $134 = HEAP32[$p + ($psize + 8) >> 2] | 0; //@line 9524
    $136 = HEAP32[$p + ($psize + 12) >> 2] | 0; //@line 9527
    $138 = 1144 + ($131 << 1 << 2) | 0; //@line 9529
    if (($134 | 0) != ($138 | 0)) {
     if ($134 >>> 0 < $108 >>> 0) {
      _abort(); //@line 9534
     }
     if ((HEAP32[$134 + 12 >> 2] | 0) != ($0 | 0)) {
      _abort(); //@line 9541
     }
    }
    if (($136 | 0) == ($134 | 0)) {
     HEAP32[276] = HEAP32[276] & ~(1 << $131); //@line 9551
     break;
    }
    if (($136 | 0) == ($138 | 0)) {
     $$pre$phi63Z2D = $136 + 8 | 0; //@line 9557
    } else {
     if ($136 >>> 0 < $108 >>> 0) {
      _abort(); //@line 9561
     }
     $151 = $136 + 8 | 0; //@line 9564
     if ((HEAP32[$151 >> 2] | 0) == ($0 | 0)) {
      $$pre$phi63Z2D = $151; //@line 9568
     } else {
      _abort(); //@line 9570
     }
    }
    HEAP32[$134 + 12 >> 2] = $136; //@line 9575
    HEAP32[$$pre$phi63Z2D >> 2] = $134; //@line 9576
   } else {
    $156 = HEAP32[$p + ($psize + 24) >> 2] | 0; //@line 9580
    $158 = HEAP32[$p + ($psize + 12) >> 2] | 0; //@line 9583
    do {
     if (($158 | 0) == ($0 | 0)) {
      $169 = $p + ($psize + 20) | 0; //@line 9588
      $170 = HEAP32[$169 >> 2] | 0; //@line 9589
      if (($170 | 0) == 0) {
       $172 = $p + ($psize + 16) | 0; //@line 9593
       $173 = HEAP32[$172 >> 2] | 0; //@line 9594
       if (($173 | 0) == 0) {
        $R7$1 = 0; //@line 9597
        break;
       } else {
        $R7$0 = $173; //@line 9600
        $RP9$0 = $172; //@line 9600
       }
      } else {
       $R7$0 = $170; //@line 9603
       $RP9$0 = $169; //@line 9603
      }
      while (1) {
       $175 = $R7$0 + 20 | 0; //@line 9606
       $176 = HEAP32[$175 >> 2] | 0; //@line 9607
       if (($176 | 0) != 0) {
        $R7$0 = $176; //@line 9610
        $RP9$0 = $175; //@line 9610
        continue;
       }
       $178 = $R7$0 + 16 | 0; //@line 9613
       $179 = HEAP32[$178 >> 2] | 0; //@line 9614
       if (($179 | 0) == 0) {
        break;
       } else {
        $R7$0 = $179; //@line 9619
        $RP9$0 = $178; //@line 9619
       }
      }
      if ($RP9$0 >>> 0 < $108 >>> 0) {
       _abort(); //@line 9624
      } else {
       HEAP32[$RP9$0 >> 2] = 0; //@line 9627
       $R7$1 = $R7$0; //@line 9628
       break;
      }
     } else {
      $161 = HEAP32[$p + ($psize + 8) >> 2] | 0; //@line 9634
      if ($161 >>> 0 < $108 >>> 0) {
       _abort(); //@line 9637
      }
      $163 = $161 + 12 | 0; //@line 9640
      if ((HEAP32[$163 >> 2] | 0) != ($0 | 0)) {
       _abort(); //@line 9644
      }
      $166 = $158 + 8 | 0; //@line 9647
      if ((HEAP32[$166 >> 2] | 0) == ($0 | 0)) {
       HEAP32[$163 >> 2] = $158; //@line 9651
       HEAP32[$166 >> 2] = $161; //@line 9652
       $R7$1 = $158; //@line 9653
       break;
      } else {
       _abort(); //@line 9656
      }
     }
    } while (0);
    if (($156 | 0) != 0) {
     $184 = HEAP32[$p + ($psize + 28) >> 2] | 0; //@line 9665
     $185 = 1408 + ($184 << 2) | 0; //@line 9666
     if (($0 | 0) == (HEAP32[$185 >> 2] | 0)) {
      HEAP32[$185 >> 2] = $R7$1; //@line 9670
      if (($R7$1 | 0) == 0) {
       HEAP32[1108 >> 2] = HEAP32[1108 >> 2] & ~(1 << $184); //@line 9677
       break;
      }
     } else {
      if ($156 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
       _abort(); //@line 9684
      }
      $194 = $156 + 16 | 0; //@line 9687
      if ((HEAP32[$194 >> 2] | 0) == ($0 | 0)) {
       HEAP32[$194 >> 2] = $R7$1; //@line 9691
      } else {
       HEAP32[$156 + 20 >> 2] = $R7$1; //@line 9694
      }
      if (($R7$1 | 0) == 0) {
       break;
      }
     }
     if ($R7$1 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
      _abort(); //@line 9704
     }
     HEAP32[$R7$1 + 24 >> 2] = $156; //@line 9708
     $203 = HEAP32[$p + ($psize + 16) >> 2] | 0; //@line 9711
     do {
      if (($203 | 0) != 0) {
       if ($203 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
        _abort(); //@line 9718
       } else {
        HEAP32[$R7$1 + 16 >> 2] = $203; //@line 9722
        HEAP32[$203 + 24 >> 2] = $R7$1; //@line 9724
        break;
       }
      }
     } while (0);
     $210 = HEAP32[$p + ($psize + 20) >> 2] | 0; //@line 9731
     if (($210 | 0) != 0) {
      if ($210 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
       _abort(); //@line 9737
      } else {
       HEAP32[$R7$1 + 20 >> 2] = $210; //@line 9741
       HEAP32[$210 + 24 >> 2] = $R7$1; //@line 9743
       break;
      }
     }
    }
   }
  } while (0);
  HEAP32[$$0 + 4 >> 2] = $130 | 1; //@line 9752
  HEAP32[$$0 + $130 >> 2] = $130; //@line 9754
  if (($$0 | 0) == (HEAP32[1124 >> 2] | 0)) {
   HEAP32[1112 >> 2] = $130; //@line 9758
   STACKTOP = sp; //@line 9759
   return;
  } else {
   $$1 = $130; //@line 9761
  }
 } else {
  HEAP32[$110 >> 2] = $111 & -2; //@line 9765
  HEAP32[$$0 + 4 >> 2] = $$02 | 1; //@line 9768
  HEAP32[$$0 + $$02 >> 2] = $$02; //@line 9770
  $$1 = $$02; //@line 9771
 }
 $225 = $$1 >>> 3; //@line 9773
 if ($$1 >>> 0 < 256) {
  $227 = $225 << 1; //@line 9776
  $228 = 1144 + ($227 << 2) | 0; //@line 9777
  $229 = HEAP32[276] | 0; //@line 9778
  $230 = 1 << $225; //@line 9779
  if (($229 & $230 | 0) == 0) {
   HEAP32[276] = $229 | $230; //@line 9784
   $$pre$phiZ2D = 1144 + ($227 + 2 << 2) | 0; //@line 9787
   $F16$0 = $228; //@line 9787
  } else {
   $234 = 1144 + ($227 + 2 << 2) | 0; //@line 9790
   $235 = HEAP32[$234 >> 2] | 0; //@line 9791
   if ($235 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
    _abort(); //@line 9795
   } else {
    $$pre$phiZ2D = $234; //@line 9798
    $F16$0 = $235; //@line 9798
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$0; //@line 9801
  HEAP32[$F16$0 + 12 >> 2] = $$0; //@line 9803
  HEAP32[$$0 + 8 >> 2] = $F16$0; //@line 9805
  HEAP32[$$0 + 12 >> 2] = $228; //@line 9807
  STACKTOP = sp; //@line 9808
  return;
 }
 $241 = $$1 >>> 8; //@line 9810
 if (($241 | 0) == 0) {
  $I19$0 = 0; //@line 9813
 } else {
  if ($$1 >>> 0 > 16777215) {
   $I19$0 = 31; //@line 9817
  } else {
   $246 = ($241 + 1048320 | 0) >>> 16 & 8; //@line 9821
   $247 = $241 << $246; //@line 9822
   $250 = ($247 + 520192 | 0) >>> 16 & 4; //@line 9825
   $252 = $247 << $250; //@line 9827
   $255 = ($252 + 245760 | 0) >>> 16 & 2; //@line 9830
   $260 = 14 - ($250 | $246 | $255) + ($252 << $255 >>> 15) | 0; //@line 9835
   $I19$0 = $$1 >>> ($260 + 7 | 0) & 1 | $260 << 1; //@line 9841
  }
 }
 $266 = 1408 + ($I19$0 << 2) | 0; //@line 9844
 HEAP32[$$0 + 28 >> 2] = $I19$0; //@line 9847
 HEAP32[$$0 + 20 >> 2] = 0; //@line 9849
 HEAP32[$$0 + 16 >> 2] = 0; //@line 9851
 $270 = HEAP32[1108 >> 2] | 0; //@line 9852
 $271 = 1 << $I19$0; //@line 9853
 if (($270 & $271 | 0) == 0) {
  HEAP32[1108 >> 2] = $270 | $271; //@line 9858
  HEAP32[$266 >> 2] = $$0; //@line 9859
  HEAP32[$$0 + 24 >> 2] = $266; //@line 9861
  HEAP32[$$0 + 12 >> 2] = $$0; //@line 9863
  HEAP32[$$0 + 8 >> 2] = $$0; //@line 9865
  STACKTOP = sp; //@line 9866
  return;
 }
 $278 = HEAP32[$266 >> 2] | 0; //@line 9868
 if (($I19$0 | 0) == 31) {
  $287 = 0; //@line 9871
 } else {
  $287 = 25 - ($I19$0 >>> 1) | 0; //@line 9875
 }
 L194 : do {
  if ((HEAP32[$278 + 4 >> 2] & -8 | 0) == ($$1 | 0)) {
   $T$0$lcssa = $278; //@line 9883
  } else {
   $K20$049 = $$1 << $287; //@line 9886
   $T$048 = $278; //@line 9886
   while (1) {
    $295 = $T$048 + ($K20$049 >>> 31 << 2) + 16 | 0; //@line 9889
    $290 = HEAP32[$295 >> 2] | 0; //@line 9890
    if (($290 | 0) == 0) {
     break;
    }
    if ((HEAP32[$290 + 4 >> 2] & -8 | 0) == ($$1 | 0)) {
     $T$0$lcssa = $290; //@line 9901
     break L194;
    } else {
     $K20$049 = $K20$049 << 1; //@line 9904
     $T$048 = $290; //@line 9904
    }
   }
   if ($295 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
    _abort(); //@line 9910
   }
   HEAP32[$295 >> 2] = $$0; //@line 9913
   HEAP32[$$0 + 24 >> 2] = $T$048; //@line 9915
   HEAP32[$$0 + 12 >> 2] = $$0; //@line 9917
   HEAP32[$$0 + 8 >> 2] = $$0; //@line 9919
   STACKTOP = sp; //@line 9920
   return;
  }
 } while (0);
 $302 = $T$0$lcssa + 8 | 0; //@line 9923
 $303 = HEAP32[$302 >> 2] | 0; //@line 9924
 $304 = HEAP32[1120 >> 2] | 0; //@line 9925
 if ($T$0$lcssa >>> 0 < $304 >>> 0) {
  _abort(); //@line 9928
 }
 if ($303 >>> 0 < $304 >>> 0) {
  _abort(); //@line 9933
 }
 HEAP32[$303 + 12 >> 2] = $$0; //@line 9937
 HEAP32[$302 >> 2] = $$0; //@line 9938
 HEAP32[$$0 + 8 >> 2] = $303; //@line 9940
 HEAP32[$$0 + 12 >> 2] = $T$0$lcssa; //@line 9942
 HEAP32[$$0 + 24 >> 2] = 0; //@line 9944
 STACKTOP = sp; //@line 9945
 return;
}
function _ot_xform($agg$result, $op1, $op2) {
 $agg$result = $agg$result | 0;
 $op1 = $op1 | 0;
 $op2 = $op2 | 0;
 var $10 = 0, $101 = 0, $103 = 0, $105 = 0, $108 = 0, $11 = 0, $111 = 0, $112 = 0, $117 = 0, $118 = 0, $12 = 0, $120 = 0, $123 = 0, $124 = 0, $126 = 0, $128 = 0, $13 = 0, $131 = 0, $137 = 0, $138 = 0, $14 = 0, $140 = 0, $144 = 0, $15 = 0, $2 = 0, $21 = 0, $25 = 0, $26 = 0, $28 = 0, $30 = 0, $35 = 0, $38 = 0, $39 = 0, $41 = 0, $43 = 0, $49 = 0, $5 = 0, $50 = 0, $55 = 0, $56 = 0, $58 = 0, $61 = 0, $62 = 0, $64 = 0, $66 = 0, $69 = 0, $7 = 0, $75 = 0, $76 = 0, $78 = 0, $81 = 0, $82 = 0, $83 = 0, $85 = 0, $87 = 0, $9 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $99 = 0, $op1_comp$0 = 0, $op1_iter = 0, $op1_next$0$off0$be = 0, $op1_next$0$off046 = 0, $op2_comp$0 = 0, $op2_iter = 0, $op2_next$0$off0$be = 0, $op2_next$0$off047 = 0, $s1$s2$i$i = 0, $s1$s2$i$i$i = 0, $s1$s2$i$i43 = 0, $s1$s2$i$i44 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5057
 STACKTOP = STACKTOP + 32 | 0; //@line 5058
 $op1_iter = sp + 16 | 0; //@line 5059
 $op2_iter = sp; //@line 5060
 $2 = _ot_new_op(HEAP32[$op1 >> 2] | 0, $op2 + 4 | 0) | 0; //@line 5063
 $5 = _ot_new_op(HEAP32[$op2 >> 2] | 0, $op1 + 4 | 0) | 0; //@line 5066
 $7 = HEAP32[$op1 + 56 >> 2] | 0; //@line 5068
 $9 = HEAP32[$op2 + 56 >> 2] | 0; //@line 5070
 _ot_iter_init($op1_iter, $op1); //@line 5071
 _ot_iter_init($op2_iter, $op2); //@line 5072
 $10 = _ot_iter_next($op1_iter) | 0; //@line 5073
 $11 = _ot_iter_next($op2_iter) | 0; //@line 5074
 L1 : do {
  if ($10 | $11) {
   $12 = $op1_iter + 4 | 0; //@line 5078
   $13 = $op2_iter + 4 | 0; //@line 5079
   $14 = $op2_iter + 8 | 0; //@line 5080
   $15 = $op1_iter + 8 | 0; //@line 5081
   $op1_next$0$off046 = $10; //@line 5082
   $op2_next$0$off047 = $11; //@line 5082
   L3 : while (1) {
    if ($op1_next$0$off046) {
     $op1_comp$0 = $7 + ((HEAP32[$12 >> 2] | 0) * 36 | 0) | 0; //@line 5087
    } else {
     $op1_comp$0 = 0; //@line 5089
    }
    if ($op2_next$0$off047) {
     $op2_comp$0 = $9 + ((HEAP32[$13 >> 2] | 0) * 36 | 0) | 0; //@line 5094
    } else {
     $op2_comp$0 = 0; //@line 5096
    }
    $21 = ($op2_comp$0 | 0) == 0; //@line 5099
    do {
     if (($op1_comp$0 | 0) == 0) {
      if ($21) {
       $op1_next$0$off0$be = $op1_next$0$off046; //@line 5103
       $op2_next$0$off0$be = $op2_next$0$off047; //@line 5103
      } else {
       if ((HEAP32[$op2_comp$0 >> 2] | 0) != 1) {
        label = 11; //@line 5108
        break L3;
       }
       $25 = HEAP32[$op2_comp$0 + 4 >> 2] | 0; //@line 5112
       $26 = HEAP32[$14 >> 2] | 0; //@line 5113
       $28 = (_strlen($25 | 0) | 0) - $26 | 0; //@line 5115
       _ot_skip($2, $28); //@line 5116
       $30 = _malloc($28 + 1 | 0) | 0; //@line 5118
       _memcpy($30 | 0, $25 + $26 | 0, $28 | 0) | 0; //@line 5120
       HEAP8[$30 + $28 >> 0] = 0; //@line 5122
       _ot_insert($5, $30); //@line 5123
       _free($30); //@line 5124
       $op1_next$0$off0$be = $op1_next$0$off046; //@line 5126
       $op2_next$0$off0$be = _ot_iter_skip($op2_iter, $28) | 0; //@line 5126
      }
     } else {
      $35 = HEAP32[$op1_comp$0 >> 2] | 0; //@line 5129
      if ($21) {
       if (($35 | 0) != 1) {
        label = 16; //@line 5133
        break L3;
       }
       $38 = HEAP32[$op1_comp$0 + 4 >> 2] | 0; //@line 5137
       $39 = HEAP32[$15 >> 2] | 0; //@line 5138
       $41 = (_strlen($38 | 0) | 0) - $39 | 0; //@line 5140
       _ot_skip($5, $41); //@line 5141
       $43 = _malloc($41 + 1 | 0) | 0; //@line 5143
       _memcpy($43 | 0, $38 + $39 | 0, $41 | 0) | 0; //@line 5145
       HEAP8[$43 + $41 >> 0] = 0; //@line 5147
       _ot_insert($2, $43); //@line 5148
       _free($43); //@line 5149
       $op1_next$0$off0$be = _ot_iter_skip($op1_iter, $41) | 0; //@line 5151
       $op2_next$0$off0$be = $op2_next$0$off047; //@line 5151
       break;
      }
      if (($35 | 0) == 2) {
       $111 = HEAP32[$op1_comp$0 + 4 >> 2] | 0; //@line 5156
       $112 = HEAP32[$op2_comp$0 >> 2] | 0; //@line 5157
       if (($112 | 0) == 0) {
        $117 = (HEAP32[$op2_comp$0 + 4 >> 2] | 0) - (HEAP32[$14 >> 2] | 0) | 0; //@line 5163
        $118 = $111 - (HEAP32[$15 >> 2] | 0) | 0; //@line 5164
        $s1$s2$i$i$i = $117 >>> 0 < $118 >>> 0 ? $117 : $118; //@line 5166
        _ot_delete($2, $s1$s2$i$i$i); //@line 5167
        $120 = _ot_iter_skip($op1_iter, $s1$s2$i$i$i) | 0; //@line 5168
        $op1_next$0$off0$be = $120; //@line 5170
        $op2_next$0$off0$be = _ot_iter_skip($op2_iter, $s1$s2$i$i$i) | 0; //@line 5170
        break;
       } else if (($112 | 0) == 1) {
        $123 = HEAP32[$op2_comp$0 + 4 >> 2] | 0; //@line 5174
        $124 = HEAP32[$14 >> 2] | 0; //@line 5175
        $126 = (_strlen($123 | 0) | 0) - $124 | 0; //@line 5177
        _ot_skip($2, $126); //@line 5178
        $128 = _malloc($126 + 1 | 0) | 0; //@line 5180
        _memcpy($128 | 0, $123 + $124 | 0, $126 | 0) | 0; //@line 5182
        HEAP8[$128 + $126 >> 0] = 0; //@line 5184
        _ot_insert($5, $128); //@line 5185
        _free($128); //@line 5186
        $131 = _ot_iter_skip($op1_iter, 0) | 0; //@line 5187
        $op1_next$0$off0$be = $131; //@line 5189
        $op2_next$0$off0$be = _ot_iter_skip($op2_iter, $126) | 0; //@line 5189
        break;
       } else if (($112 | 0) == 2) {
        $137 = $111 - (HEAP32[$15 >> 2] | 0) | 0; //@line 5196
        $138 = (HEAP32[$op2_comp$0 + 4 >> 2] | 0) - (HEAP32[$14 >> 2] | 0) | 0; //@line 5197
        $s1$s2$i$i44 = $137 >>> 0 < $138 >>> 0 ? $137 : $138; //@line 5199
        $140 = _ot_iter_skip($op1_iter, $s1$s2$i$i44) | 0; //@line 5200
        $op1_next$0$off0$be = $140; //@line 5202
        $op2_next$0$off0$be = _ot_iter_skip($op2_iter, $s1$s2$i$i44) | 0; //@line 5202
        break;
       } else {
        $op1_next$0$off0$be = $op1_next$0$off046; //@line 5205
        $op2_next$0$off0$be = $op2_next$0$off047; //@line 5205
        break;
       }
      } else if (($35 | 0) == 1) {
       $81 = HEAP32[$op1_comp$0 + 4 >> 2] | 0; //@line 5210
       $82 = HEAP32[$op2_comp$0 >> 2] | 0; //@line 5211
       if (($82 | 0) == 2) {
        $101 = HEAP32[$15 >> 2] | 0; //@line 5213
        $103 = (_strlen($81 | 0) | 0) - $101 | 0; //@line 5215
        _ot_skip($5, $103); //@line 5216
        $105 = _malloc($103 + 1 | 0) | 0; //@line 5218
        _memcpy($105 | 0, $81 + $101 | 0, $103 | 0) | 0; //@line 5220
        HEAP8[$105 + $103 >> 0] = 0; //@line 5222
        _ot_insert($2, $105); //@line 5223
        _free($105); //@line 5224
        $108 = _ot_iter_skip($op1_iter, $103) | 0; //@line 5225
        $op1_next$0$off0$be = $108; //@line 5227
        $op2_next$0$off0$be = _ot_iter_skip($op2_iter, 0) | 0; //@line 5227
        break;
       } else if (($82 | 0) == 0) {
        $83 = HEAP32[$15 >> 2] | 0; //@line 5230
        $85 = (_strlen($81 | 0) | 0) - $83 | 0; //@line 5232
        _ot_skip($5, $85); //@line 5233
        $87 = _malloc($85 + 1 | 0) | 0; //@line 5235
        _memcpy($87 | 0, $81 + $83 | 0, $85 | 0) | 0; //@line 5237
        HEAP8[$87 + $85 >> 0] = 0; //@line 5239
        _ot_insert($2, $87); //@line 5240
        _free($87); //@line 5241
        $90 = _ot_iter_skip($op1_iter, $85) | 0; //@line 5242
        $op1_next$0$off0$be = $90; //@line 5244
        $op2_next$0$off0$be = _ot_iter_skip($op2_iter, 0) | 0; //@line 5244
        break;
       } else if (($82 | 0) == 1) {
        $92 = HEAP32[$15 >> 2] | 0; //@line 5247
        $94 = (_strlen($81 | 0) | 0) - $92 | 0; //@line 5249
        _ot_skip($5, $94); //@line 5250
        $96 = _malloc($94 + 1 | 0) | 0; //@line 5252
        _memcpy($96 | 0, $81 + $92 | 0, $94 | 0) | 0; //@line 5254
        HEAP8[$96 + $94 >> 0] = 0; //@line 5256
        _ot_insert($2, $96); //@line 5257
        _free($96); //@line 5258
        $99 = _ot_iter_skip($op1_iter, $94) | 0; //@line 5259
        $op1_next$0$off0$be = $99; //@line 5261
        $op2_next$0$off0$be = _ot_iter_skip($op2_iter, 0) | 0; //@line 5261
        break;
       } else {
        $op1_next$0$off0$be = $op1_next$0$off046; //@line 5264
        $op2_next$0$off0$be = $op2_next$0$off047; //@line 5264
        break;
       }
      } else if (($35 | 0) == 0) {
       $49 = HEAP32[$op1_comp$0 + 4 >> 2] | 0; //@line 5269
       $50 = HEAP32[$op2_comp$0 >> 2] | 0; //@line 5270
       if (($50 | 0) == 1) {
        $61 = HEAP32[$op2_comp$0 + 4 >> 2] | 0; //@line 5273
        $62 = HEAP32[$14 >> 2] | 0; //@line 5274
        $64 = (_strlen($61 | 0) | 0) - $62 | 0; //@line 5276
        _ot_skip($2, $64); //@line 5277
        $66 = _malloc($64 + 1 | 0) | 0; //@line 5279
        _memcpy($66 | 0, $61 + $62 | 0, $64 | 0) | 0; //@line 5281
        HEAP8[$66 + $64 >> 0] = 0; //@line 5283
        _ot_insert($5, $66); //@line 5284
        _free($66); //@line 5285
        $69 = _ot_iter_skip($op1_iter, 0) | 0; //@line 5286
        $op1_next$0$off0$be = $69; //@line 5288
        $op2_next$0$off0$be = _ot_iter_skip($op2_iter, $64) | 0; //@line 5288
        break;
       } else if (($50 | 0) == 2) {
        $75 = $49 - (HEAP32[$15 >> 2] | 0) | 0; //@line 5295
        $76 = (HEAP32[$op2_comp$0 + 4 >> 2] | 0) - (HEAP32[$14 >> 2] | 0) | 0; //@line 5296
        $s1$s2$i$i43 = $75 >>> 0 < $76 >>> 0 ? $75 : $76; //@line 5298
        _ot_delete($5, $s1$s2$i$i43); //@line 5299
        $78 = _ot_iter_skip($op1_iter, $s1$s2$i$i43) | 0; //@line 5300
        $op1_next$0$off0$be = $78; //@line 5302
        $op2_next$0$off0$be = _ot_iter_skip($op2_iter, $s1$s2$i$i43) | 0; //@line 5302
        break;
       } else if (($50 | 0) == 0) {
        $55 = $49 - (HEAP32[$15 >> 2] | 0) | 0; //@line 5309
        $56 = (HEAP32[$op2_comp$0 + 4 >> 2] | 0) - (HEAP32[$14 >> 2] | 0) | 0; //@line 5310
        $s1$s2$i$i = $55 >>> 0 < $56 >>> 0 ? $55 : $56; //@line 5312
        _ot_skip($2, $s1$s2$i$i); //@line 5313
        _ot_skip($5, $s1$s2$i$i); //@line 5314
        $58 = _ot_iter_skip($op1_iter, $s1$s2$i$i) | 0; //@line 5315
        $op1_next$0$off0$be = $58; //@line 5317
        $op2_next$0$off0$be = _ot_iter_skip($op2_iter, $s1$s2$i$i) | 0; //@line 5317
        break;
       } else {
        $op1_next$0$off0$be = $op1_next$0$off046; //@line 5320
        $op2_next$0$off0$be = $op2_next$0$off047; //@line 5320
        break;
       }
      } else {
       $op1_next$0$off0$be = $op1_next$0$off046; //@line 5324
       $op2_next$0$off0$be = $op2_next$0$off047; //@line 5324
       break;
      }
     }
    } while (0);
    if ($op1_next$0$off0$be | $op2_next$0$off0$be) {
     $op1_next$0$off046 = $op1_next$0$off0$be; //@line 5331
     $op2_next$0$off047 = $op2_next$0$off0$be; //@line 5331
    } else {
     break L1;
    }
   }
   if ((label | 0) == 11) {
    _ot_free_op($2); //@line 5337
    _ot_free_op($5); //@line 5338
    HEAP32[$agg$result >> 2] = 0; //@line 5339
    HEAP32[$agg$result + 4 >> 2] = 0; //@line 5341
    STACKTOP = sp; //@line 5342
    return;
   } else if ((label | 0) == 16) {
    _ot_free_op($2); //@line 5345
    _ot_free_op($5); //@line 5346
    HEAP32[$agg$result >> 2] = 0; //@line 5347
    HEAP32[$agg$result + 4 >> 2] = 0; //@line 5349
    STACKTOP = sp; //@line 5350
    return;
   }
  }
 } while (0);
 $144 = $agg$result; //@line 5356
 HEAP32[$144 >> 2] = $2; //@line 5358
 HEAP32[$144 + 4 >> 2] = $5; //@line 5361
 STACKTOP = sp; //@line 5362
 return;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0; //@line 13859
 $n_sroa_1_4_extract_shift$0 = $a$1; //@line 13860
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0; //@line 13861
 $d_sroa_0_0_extract_trunc = $b$0; //@line 13862
 $d_sroa_1_4_extract_shift$0 = $b$1; //@line 13863
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0; //@line 13864
 if (($n_sroa_1_4_extract_trunc | 0) == 0) {
  $4 = ($rem | 0) != 0; //@line 13866
  if (($d_sroa_1_4_extract_trunc | 0) == 0) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 13869
    HEAP32[$rem + 4 >> 2] = 0; //@line 13870
   }
   $_0$1 = 0; //@line 13872
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 13873
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 13874
  } else {
   if (!$4) {
    $_0$1 = 0; //@line 13877
    $_0$0 = 0; //@line 13878
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 13879
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 13881
   HEAP32[$rem + 4 >> 2] = $a$1 & 0; //@line 13882
   $_0$1 = 0; //@line 13883
   $_0$0 = 0; //@line 13884
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 13885
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0; //@line 13888
 do {
  if (($d_sroa_0_0_extract_trunc | 0) == 0) {
   if ($17) {
    if (($rem | 0) != 0) {
     HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 13893
     HEAP32[$rem + 4 >> 2] = 0; //@line 13894
    }
    $_0$1 = 0; //@line 13896
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 13897
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 13898
   }
   if (($n_sroa_0_0_extract_trunc | 0) == 0) {
    if (($rem | 0) != 0) {
     HEAP32[$rem >> 2] = 0; //@line 13902
     HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0); //@line 13903
    }
    $_0$1 = 0; //@line 13905
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0; //@line 13906
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 13907
   }
   $37 = $d_sroa_1_4_extract_trunc - 1 | 0; //@line 13909
   if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
    if (($rem | 0) != 0) {
     HEAP32[$rem >> 2] = $a$0 | 0; //@line 13912
     HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0; //@line 13913
    }
    $_0$1 = 0; //@line 13915
    $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0); //@line 13916
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 13917
   }
   $51 = (_llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0) - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 13920
   if ($51 >>> 0 <= 30) {
    $57 = $51 + 1 | 0; //@line 13922
    $58 = 31 - $51 | 0; //@line 13923
    $sr_1_ph = $57; //@line 13924
    $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0); //@line 13925
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0); //@line 13926
    $q_sroa_0_1_ph = 0; //@line 13927
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58; //@line 13928
    break;
   }
   if (($rem | 0) == 0) {
    $_0$1 = 0; //@line 13932
    $_0$0 = 0; //@line 13933
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 13934
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 13936
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 13937
   $_0$1 = 0; //@line 13938
   $_0$0 = 0; //@line 13939
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 13940
  } else {
   if (!$17) {
    $119 = (_llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0) - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 13944
    if ($119 >>> 0 <= 31) {
     $125 = $119 + 1 | 0; //@line 13946
     $126 = 31 - $119 | 0; //@line 13947
     $130 = $119 - 31 >> 31; //@line 13948
     $sr_1_ph = $125; //@line 13949
     $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126; //@line 13950
     $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130; //@line 13951
     $q_sroa_0_1_ph = 0; //@line 13952
     $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126; //@line 13953
     break;
    }
    if (($rem | 0) == 0) {
     $_0$1 = 0; //@line 13957
     $_0$0 = 0; //@line 13958
     return (tempRet0 = $_0$1, $_0$0) | 0; //@line 13959
    }
    HEAP32[$rem >> 2] = $a$0 | 0; //@line 13961
    HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 13962
    $_0$1 = 0; //@line 13963
    $_0$0 = 0; //@line 13964
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 13965
   }
   $66 = $d_sroa_0_0_extract_trunc - 1 | 0; //@line 13967
   if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
    $88 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 13970
    $89 = 64 - $88 | 0; //@line 13971
    $91 = 32 - $88 | 0; //@line 13972
    $92 = $91 >> 31; //@line 13973
    $95 = $88 - 32 | 0; //@line 13974
    $105 = $95 >> 31; //@line 13975
    $sr_1_ph = $88; //@line 13976
    $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105; //@line 13977
    $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0); //@line 13978
    $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92; //@line 13979
    $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31; //@line 13980
    break;
   }
   if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc; //@line 13984
    HEAP32[$rem + 4 >> 2] = 0; //@line 13985
   }
   if (($d_sroa_0_0_extract_trunc | 0) == 1) {
    $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 13988
    $_0$0 = $a$0 | 0 | 0; //@line 13989
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 13990
   } else {
    $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0; //@line 13992
    $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0; //@line 13993
    $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0; //@line 13994
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 13995
   }
  }
 } while (0);
 if (($sr_1_ph | 0) == 0) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph; //@line 14000
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph; //@line 14001
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph; //@line 14002
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph; //@line 14003
  $carry_0_lcssa$1 = 0; //@line 14004
  $carry_0_lcssa$0 = 0; //@line 14005
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0; //@line 14007
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0; //@line 14008
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0; //@line 14009
  $137$1 = tempRet0; //@line 14010
  $q_sroa_1_1198 = $q_sroa_1_1_ph; //@line 14011
  $q_sroa_0_1199 = $q_sroa_0_1_ph; //@line 14012
  $r_sroa_1_1200 = $r_sroa_1_1_ph; //@line 14013
  $r_sroa_0_1201 = $r_sroa_0_1_ph; //@line 14014
  $sr_1202 = $sr_1_ph; //@line 14015
  $carry_0203 = 0; //@line 14016
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1; //@line 14018
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1; //@line 14019
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0; //@line 14020
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0; //@line 14021
   _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0; //@line 14022
   $150$1 = tempRet0; //@line 14023
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1; //@line 14024
   $carry_0203 = $151$0 & 1; //@line 14025
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0; //@line 14027
   $r_sroa_1_1200 = tempRet0; //@line 14028
   $sr_1202 = $sr_1202 - 1 | 0; //@line 14029
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198; //@line 14041
  $q_sroa_0_1_lcssa = $q_sroa_0_1199; //@line 14042
  $r_sroa_1_1_lcssa = $r_sroa_1_1200; //@line 14043
  $r_sroa_0_1_lcssa = $r_sroa_0_1201; //@line 14044
  $carry_0_lcssa$1 = 0; //@line 14045
  $carry_0_lcssa$0 = $carry_0203; //@line 14046
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa; //@line 14048
 $q_sroa_0_0_insert_ext75$1 = 0; //@line 14049
 if (($rem | 0) != 0) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa; //@line 14052
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa; //@line 14053
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1; //@line 14055
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0; //@line 14056
 return (tempRet0 = $_0$1, $_0$0) | 0; //@line 14057
}
function _ot_compose($op1, $op2) {
 $op1 = $op1 | 0;
 $op2 = $op2 | 0;
 var $$0 = 0, $10 = 0, $100 = 0, $102 = 0, $103 = 0, $105 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $25 = 0, $28 = 0, $31 = 0, $32 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $51 = 0, $54 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $66 = 0, $67 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $73 = 0, $74 = 0, $77 = 0, $8 = 0, $80 = 0, $83 = 0, $84 = 0, $85 = 0, $87 = 0, $89 = 0, $9 = 0, $92 = 0, $95 = 0, $98 = 0, $99 = 0, $op1_comp$0 = 0, $op1_iter = 0, $op1_next$0$off0$be = 0, $op1_next$0$off028 = 0, $op2_comp$0 = 0, $op2_iter = 0, $op2_next$0$off0$be = 0, $op2_next$0$off027 = 0, $parent = 0, $s1$s2$i$i = 0, $s1$s2$i$i21 = 0, $s1$s2$i$i22 = 0, $s1$s2$i$i23 = 0, $s1$s2$i$i24 = 0, $s1$s2$i$i25 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 2600
 STACKTOP = STACKTOP + 64 | 0; //@line 2601
 $parent = sp + 32 | 0; //@line 2602
 $op1_iter = sp + 16 | 0; //@line 2603
 $op2_iter = sp; //@line 2604
 dest = $parent + 0 | 0; //@line 2606
 src = $op1 + 4 | 0; //@line 2606
 stop = dest + 20 | 0; //@line 2606
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 2606
  dest = dest + 1 | 0; //@line 2606
  src = src + 1 | 0; //@line 2606
 } while ((dest | 0) < (stop | 0));
 $2 = _ot_new_op(HEAP32[$op1 >> 2] | 0, $parent) | 0; //@line 2608
 $4 = HEAP32[$op1 + 56 >> 2] | 0; //@line 2610
 $6 = HEAP32[$op2 + 56 >> 2] | 0; //@line 2612
 _ot_iter_init($op1_iter, $op1); //@line 2613
 _ot_iter_init($op2_iter, $op2); //@line 2614
 $7 = _ot_iter_next($op1_iter) | 0; //@line 2615
 $8 = _ot_iter_next($op2_iter) | 0; //@line 2616
 if (!($7 | $8)) {
  $$0 = $2; //@line 2619
  STACKTOP = sp; //@line 2620
  return $$0 | 0; //@line 2620
 }
 $9 = $op1_iter + 4 | 0; //@line 2622
 $10 = $op2_iter + 4 | 0; //@line 2623
 $11 = $op1_iter + 8 | 0; //@line 2624
 $12 = $op2_iter + 8 | 0; //@line 2625
 $op1_next$0$off028 = $7; //@line 2626
 $op2_next$0$off027 = $8; //@line 2626
 L4 : while (1) {
  if ($op1_next$0$off028) {
   $op1_comp$0 = $4 + ((HEAP32[$9 >> 2] | 0) * 36 | 0) | 0; //@line 2631
  } else {
   $op1_comp$0 = 0; //@line 2633
  }
  if ($op2_next$0$off027) {
   $op2_comp$0 = $6 + ((HEAP32[$10 >> 2] | 0) * 36 | 0) | 0; //@line 2638
  } else {
   $op2_comp$0 = 0; //@line 2640
  }
  $18 = ($op2_comp$0 | 0) == 0; //@line 2643
  do {
   if (($op1_comp$0 | 0) == 0) {
    if ($18) {
     $op1_next$0$off0$be = $op1_next$0$off028; //@line 2647
     $op2_next$0$off0$be = $op2_next$0$off027; //@line 2647
    } else {
     $19 = HEAP32[$op2_comp$0 >> 2] | 0; //@line 2649
     if (($19 | 0) == 5 | ($19 | 0) == 4 | ($19 | 0) == 3) {
      $op1_next$0$off0$be = $op1_next$0$off028; //@line 2651
      $op2_next$0$off0$be = $op2_next$0$off027; //@line 2651
      break;
     } else if (($19 | 0) != 1) {
      label = 11; //@line 2654
      break L4;
     }
     $20 = $op2_comp$0 + 4 | 0; //@line 2657
     _ot_insert($2, HEAP32[$20 >> 2] | 0); //@line 2659
     $op1_next$0$off0$be = $op1_next$0$off028; //@line 2663
     $op2_next$0$off0$be = _ot_iter_skip($op2_iter, _strlen(HEAP32[$20 >> 2] | 0) | 0) | 0; //@line 2663
    }
   } else {
    $25 = HEAP32[$op1_comp$0 >> 2] | 0; //@line 2666
    if ($18) {
     if (($25 | 0) != 2) {
      label = 16; //@line 2670
      break L4;
     }
     $28 = HEAP32[$op1_comp$0 + 4 >> 2] | 0; //@line 2674
     _ot_delete($2, $28); //@line 2675
     $op1_next$0$off0$be = _ot_iter_skip($op1_iter, $28) | 0; //@line 2677
     $op2_next$0$off0$be = $op2_next$0$off027; //@line 2677
     break;
    }
    if (($25 | 0) == 0) {
     $31 = HEAP32[$op1_comp$0 + 4 >> 2] | 0; //@line 2682
     $32 = HEAP32[$op2_comp$0 >> 2] | 0; //@line 2683
     if (($32 | 0) == 0) {
      $37 = $31 - (HEAP32[$11 >> 2] | 0) | 0; //@line 2689
      $38 = (HEAP32[$op2_comp$0 + 4 >> 2] | 0) - (HEAP32[$12 >> 2] | 0) | 0; //@line 2690
      $s1$s2$i$i = $37 >>> 0 < $38 >>> 0 ? $37 : $38; //@line 2692
      _ot_skip($2, $s1$s2$i$i); //@line 2693
      $40 = _ot_iter_skip($op1_iter, $s1$s2$i$i) | 0; //@line 2694
      $op1_next$0$off0$be = $40; //@line 2696
      $op2_next$0$off0$be = _ot_iter_skip($op2_iter, $s1$s2$i$i) | 0; //@line 2696
      break;
     } else if (($32 | 0) == 2) {
      $60 = $31 - (HEAP32[$11 >> 2] | 0) | 0; //@line 2703
      $61 = (HEAP32[$op2_comp$0 + 4 >> 2] | 0) - (HEAP32[$12 >> 2] | 0) | 0; //@line 2704
      $s1$s2$i$i22 = $60 >>> 0 < $61 >>> 0 ? $60 : $61; //@line 2706
      _ot_delete($2, $s1$s2$i$i22); //@line 2707
      $63 = _ot_iter_skip($op1_iter, $s1$s2$i$i22) | 0; //@line 2708
      $op1_next$0$off0$be = $63; //@line 2710
      $op2_next$0$off0$be = _ot_iter_skip($op2_iter, $s1$s2$i$i22) | 0; //@line 2710
      break;
     } else if (($32 | 0) == 1) {
      $43 = HEAP32[$op2_comp$0 + 4 >> 2] | 0; //@line 2714
      $44 = HEAP32[$11 >> 2] | 0; //@line 2715
      $45 = HEAP32[$12 >> 2] | 0; //@line 2716
      $47 = (_strlen($43 | 0) | 0) - $45 | 0; //@line 2718
      $48 = $31 - $44 | 0; //@line 2719
      $s1$s2$i$i21 = $48 >>> 0 < $47 >>> 0 ? $48 : $47; //@line 2721
      $51 = _malloc($s1$s2$i$i21 + 1 | 0) | 0; //@line 2723
      _memcpy($51 | 0, $43 + $45 | 0, $s1$s2$i$i21 | 0) | 0; //@line 2725
      HEAP8[$51 + $s1$s2$i$i21 >> 0] = 0; //@line 2727
      _ot_insert($2, $51); //@line 2728
      _free($51); //@line 2729
      $54 = _ot_iter_skip($op1_iter, 0) | 0; //@line 2730
      $op1_next$0$off0$be = $54; //@line 2732
      $op2_next$0$off0$be = _ot_iter_skip($op2_iter, $s1$s2$i$i21) | 0; //@line 2732
      break;
     } else {
      $op1_next$0$off0$be = $op1_next$0$off028; //@line 2735
      $op2_next$0$off0$be = $op2_next$0$off027; //@line 2735
      break;
     }
    } else if (($25 | 0) == 1) {
     $66 = HEAP32[$op1_comp$0 + 4 >> 2] | 0; //@line 2740
     $67 = HEAP32[$op2_comp$0 >> 2] | 0; //@line 2741
     if (($67 | 0) == 1) {
      $83 = HEAP32[$op2_comp$0 + 4 >> 2] | 0; //@line 2744
      $84 = HEAP32[$11 >> 2] | 0; //@line 2745
      $85 = HEAP32[$12 >> 2] | 0; //@line 2746
      $87 = (_strlen($66 | 0) | 0) - $84 | 0; //@line 2748
      $89 = (_strlen($83 | 0) | 0) - $85 | 0; //@line 2750
      $s1$s2$i$i24 = $87 >>> 0 < $89 >>> 0 ? $87 : $89; //@line 2752
      $92 = _malloc($s1$s2$i$i24 + 1 | 0) | 0; //@line 2754
      _memcpy($92 | 0, $83 + $85 | 0, $s1$s2$i$i24 | 0) | 0; //@line 2756
      HEAP8[$92 + $s1$s2$i$i24 >> 0] = 0; //@line 2758
      _ot_insert($2, $92); //@line 2759
      _free($92); //@line 2760
      $95 = _ot_iter_skip($op1_iter, 0) | 0; //@line 2761
      $op1_next$0$off0$be = $95; //@line 2763
      $op2_next$0$off0$be = _ot_iter_skip($op2_iter, $s1$s2$i$i24) | 0; //@line 2763
      break;
     } else if (($67 | 0) == 2) {
      $98 = HEAP32[$op2_comp$0 + 4 >> 2] | 0; //@line 2767
      $99 = HEAP32[$11 >> 2] | 0; //@line 2768
      $100 = HEAP32[$12 >> 2] | 0; //@line 2769
      $102 = (_strlen($66 | 0) | 0) - $99 | 0; //@line 2771
      $103 = $98 - $100 | 0; //@line 2772
      $s1$s2$i$i25 = $102 >>> 0 < $103 >>> 0 ? $102 : $103; //@line 2774
      $105 = _ot_iter_skip($op1_iter, $s1$s2$i$i25) | 0; //@line 2775
      $op1_next$0$off0$be = $105; //@line 2777
      $op2_next$0$off0$be = _ot_iter_skip($op2_iter, $s1$s2$i$i25) | 0; //@line 2777
      break;
     } else if (($67 | 0) == 0) {
      $69 = HEAP32[$op2_comp$0 + 4 >> 2] | 0; //@line 2781
      $70 = HEAP32[$11 >> 2] | 0; //@line 2782
      $71 = HEAP32[$12 >> 2] | 0; //@line 2783
      $73 = (_strlen($66 | 0) | 0) - $70 | 0; //@line 2785
      $74 = $69 - $71 | 0; //@line 2786
      $s1$s2$i$i23 = $74 >>> 0 < $73 >>> 0 ? $74 : $73; //@line 2788
      $77 = _malloc($s1$s2$i$i23 + 1 | 0) | 0; //@line 2790
      _memcpy($77 | 0, $66 + $70 | 0, $s1$s2$i$i23 | 0) | 0; //@line 2792
      HEAP8[$77 + $s1$s2$i$i23 >> 0] = 0; //@line 2794
      _ot_insert($2, $77); //@line 2795
      _free($77); //@line 2796
      $80 = _ot_iter_skip($op1_iter, $s1$s2$i$i23) | 0; //@line 2797
      $op1_next$0$off0$be = $80; //@line 2799
      $op2_next$0$off0$be = _ot_iter_skip($op2_iter, $s1$s2$i$i23) | 0; //@line 2799
      break;
     } else {
      $op1_next$0$off0$be = $op1_next$0$off028; //@line 2802
      $op2_next$0$off0$be = $op2_next$0$off027; //@line 2802
      break;
     }
    } else if (($25 | 0) == 2) {
     $110 = (HEAP32[$op1_comp$0 + 4 >> 2] | 0) - (HEAP32[$11 >> 2] | 0) | 0; //@line 2809
     _ot_delete($2, $110); //@line 2810
     $111 = _ot_iter_skip($op1_iter, $110) | 0; //@line 2811
     $op1_next$0$off0$be = $111; //@line 2813
     $op2_next$0$off0$be = _ot_iter_skip($op2_iter, 0) | 0; //@line 2813
     break;
    } else {
     $op1_next$0$off0$be = $op1_next$0$off028; //@line 2816
     $op2_next$0$off0$be = $op2_next$0$off027; //@line 2816
     break;
    }
   }
  } while (0);
  if ($op1_next$0$off0$be | $op2_next$0$off0$be) {
   $op1_next$0$off028 = $op1_next$0$off0$be; //@line 2823
   $op2_next$0$off027 = $op2_next$0$off0$be; //@line 2823
  } else {
   $$0 = $2; //@line 2825
   label = 27; //@line 2826
   break;
  }
 }
 if ((label | 0) == 11) {
  _ot_free_op($2); //@line 2831
  $$0 = 0; //@line 2832
  STACKTOP = sp; //@line 2833
  return $$0 | 0; //@line 2833
 } else if ((label | 0) == 16) {
  _ot_free_op($2); //@line 2836
  $$0 = 0; //@line 2837
  STACKTOP = sp; //@line 2838
  return $$0 | 0; //@line 2838
 } else if ((label | 0) == 27) {
  STACKTOP = sp; //@line 2841
  return $$0 | 0; //@line 2841
 }
 return 0; //@line 2843
}
function _sha1_compress($md, $buf) {
 $md = $md | 0;
 $buf = $buf | 0;
 var $0 = 0, $111 = 0, $114 = 0, $127 = 0, $130 = 0, $143 = 0, $146 = 0, $158 = 0, $161 = 0, $173 = 0, $176 = 0, $188 = 0, $191 = 0, $203 = 0, $206 = 0, $21 = 0, $22 = 0, $223 = 0, $226 = 0, $23 = 0, $24 = 0, $240 = 0, $243 = 0, $25 = 0, $257 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $306 = 0, $309 = 0, $321 = 0, $324 = 0, $336 = 0, $339 = 0, $351 = 0, $354 = 0, $366 = 0, $369 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $45 = 0, $63 = 0, $66 = 0, $79 = 0, $82 = 0, $95 = 0, $98 = 0, $W = 0, $a$048 = 0, $a$134 = 0, $a$220 = 0, $a$3$lcssa = 0, $a$39 = 0, $b$043 = 0, $b$129 = 0, $b$215 = 0, $b$3$lcssa = 0, $b$34 = 0, $c$044 = 0, $c$130 = 0, $c$216 = 0, $c$3$lcssa = 0, $c$35 = 0, $d$045 = 0, $d$131 = 0, $d$217 = 0, $d$3$lcssa = 0, $d$36 = 0, $e$046 = 0, $e$132 = 0, $e$218 = 0, $e$3$lcssa = 0, $e$37 = 0, $i$050 = 0, $i$149 = 0, $i$247 = 0, $i$333 = 0, $i$419 = 0, $i$58 = 0, sp = 0, $i$419$looptemp = 0;
 sp = STACKTOP; //@line 4477
 STACKTOP = STACKTOP + 320 | 0; //@line 4478
 $W = sp; //@line 4479
 $i$050 = 0; //@line 4480
 do {
  $0 = $i$050 << 2; //@line 4482
  HEAP32[$W + ($i$050 << 2) >> 2] = (HEAPU8[$buf + ($0 | 1) >> 0] | 0) << 16 | (HEAPU8[$buf + $0 >> 0] | 0) << 24 | (HEAPU8[$buf + ($0 | 2) >> 0] | 0) << 8 | (HEAPU8[$buf + ($0 | 3) >> 0] | 0); //@line 4505
  $i$050 = $i$050 + 1 | 0; //@line 4506
 } while (($i$050 | 0) != 16);
 $21 = $md + 8 | 0; //@line 4514
 $22 = HEAP32[$21 >> 2] | 0; //@line 4515
 $23 = $md + 12 | 0; //@line 4516
 $24 = HEAP32[$23 >> 2] | 0; //@line 4517
 $25 = $md + 16 | 0; //@line 4518
 $26 = HEAP32[$25 >> 2] | 0; //@line 4519
 $27 = $md + 20 | 0; //@line 4520
 $28 = HEAP32[$27 >> 2] | 0; //@line 4521
 $29 = $md + 24 | 0; //@line 4522
 $30 = HEAP32[$29 >> 2] | 0; //@line 4523
 $i$149 = 16; //@line 4524
 do {
  $45 = HEAP32[$W + ($i$149 + -8 << 2) >> 2] ^ HEAP32[$W + ($i$149 + -3 << 2) >> 2] ^ HEAP32[$W + ($i$149 + -14 << 2) >> 2] ^ HEAP32[$W + ($i$149 + -16 << 2) >> 2]; //@line 4540
  HEAP32[$W + ($i$149 << 2) >> 2] = $45 << 1 | $45 >>> 31; //@line 4545
  $i$149 = $i$149 + 1 | 0; //@line 4546
 } while (($i$149 | 0) != 80);
 $a$048 = $22; //@line 4549
 $b$043 = $24; //@line 4549
 $c$044 = $26; //@line 4549
 $d$045 = $28; //@line 4549
 $e$046 = $30; //@line 4549
 $i$247 = 0; //@line 4549
 while (1) {
  $63 = $e$046 + 1518500249 + (($d$045 ^ $c$044) & $b$043 ^ $d$045) + ($a$048 << 5 | $a$048 >>> 27) + (HEAP32[$W + ($i$247 << 2) >> 2] | 0) | 0; //@line 4568
  $66 = $b$043 << 30 | $b$043 >>> 2; //@line 4571
  $79 = $d$045 + 1518500249 + ($a$048 & ($66 ^ $c$044) ^ $c$044) + (HEAP32[$W + ($i$247 + 1 << 2) >> 2] | 0) + ($63 << 5 | $63 >>> 27) | 0; //@line 4584
  $82 = $a$048 << 30 | $a$048 >>> 2; //@line 4587
  $95 = $c$044 + 1518500249 + (HEAP32[$W + ($i$247 + 2 << 2) >> 2] | 0) + ($63 & ($82 ^ $66) ^ $66) + ($79 << 5 | $79 >>> 27) | 0; //@line 4600
  $98 = $63 << 30 | $63 >>> 2; //@line 4603
  $111 = $66 + 1518500249 + (HEAP32[$W + ($i$247 + 3 << 2) >> 2] | 0) + ($79 & ($98 ^ $82) ^ $82) + ($95 << 5 | $95 >>> 27) | 0; //@line 4616
  $114 = $79 << 30 | $79 >>> 2; //@line 4619
  $127 = $82 + 1518500249 + (HEAP32[$W + ($i$247 + 4 << 2) >> 2] | 0) + ($95 & ($114 ^ $98) ^ $98) + ($111 << 5 | $111 >>> 27) | 0; //@line 4632
  $i$247 = $i$247 + 5 | 0; //@line 4626
  $130 = $95 << 30 | $95 >>> 2; //@line 4635
  if (!($i$247 >>> 0 < 20)) {
   $a$134 = $127; //@line 4640
   $b$129 = $111; //@line 4640
   $c$130 = $130; //@line 4640
   $d$131 = $114; //@line 4640
   $e$132 = $98; //@line 4640
   $i$333 = 20; //@line 4640
   break;
  } else {
   $a$048 = $127; //@line 4638
   $b$043 = $111; //@line 4638
   $c$044 = $130; //@line 4638
   $d$045 = $114; //@line 4638
   $e$046 = $98; //@line 4638
  }
 }
 while (1) {
  $143 = ($c$130 ^ $b$129 ^ $d$131) + 1859775393 + $e$132 + ($a$134 << 5 | $a$134 >>> 27) + (HEAP32[$W + ($i$333 << 2) >> 2] | 0) | 0; //@line 4656
  $146 = $b$129 << 30 | $b$129 >>> 2; //@line 4659
  $158 = $d$131 + 1859775393 + ($146 ^ $c$130 ^ $a$134) + (HEAP32[$W + ($i$333 + 1 << 2) >> 2] | 0) + ($143 << 5 | $143 >>> 27) | 0; //@line 4671
  $161 = $a$134 << 30 | $a$134 >>> 2; //@line 4674
  $173 = $c$130 + 1859775393 + ($161 ^ $146 ^ $143) + (HEAP32[$W + ($i$333 + 2 << 2) >> 2] | 0) + ($158 << 5 | $158 >>> 27) | 0; //@line 4686
  $176 = $143 << 30 | $143 >>> 2; //@line 4689
  $188 = $146 + 1859775393 + (HEAP32[$W + ($i$333 + 3 << 2) >> 2] | 0) + ($176 ^ $161 ^ $158) + ($173 << 5 | $173 >>> 27) | 0; //@line 4701
  $191 = $158 << 30 | $158 >>> 2; //@line 4704
  $203 = $161 + 1859775393 + (HEAP32[$W + ($i$333 + 4 << 2) >> 2] | 0) + ($191 ^ $176 ^ $173) + ($188 << 5 | $188 >>> 27) | 0; //@line 4716
  $i$333 = $i$333 + 5 | 0; //@line 4710
  $206 = $173 << 30 | $173 >>> 2; //@line 4719
  if (!($i$333 >>> 0 < 40)) {
   $a$220 = $203; //@line 4724
   $b$215 = $188; //@line 4724
   $c$216 = $206; //@line 4724
   $d$217 = $191; //@line 4724
   $e$218 = $176; //@line 4724
   $i$419 = 40; //@line 4724
   break;
  } else {
   $a$134 = $203; //@line 4722
   $b$129 = $188; //@line 4722
   $c$130 = $206; //@line 4722
   $d$131 = $191; //@line 4722
   $e$132 = $176; //@line 4722
  }
 }
 do {
  $223 = $e$218 + -1894007588 + ($d$217 & ($c$216 | $b$215) | $c$216 & $b$215) + ($a$220 << 5 | $a$220 >>> 27) + (HEAP32[$W + ($i$419 << 2) >> 2] | 0) | 0; //@line 4742
  $226 = $b$215 << 30 | $b$215 >>> 2; //@line 4745
  $240 = $d$217 + -1894007588 + (($a$220 | $226) & $c$216 | $a$220 & $226) + (HEAP32[$W + ($i$419 + 1 << 2) >> 2] | 0) + ($223 << 5 | $223 >>> 27) | 0; //@line 4759
  $243 = $a$220 << 30 | $a$220 >>> 2; //@line 4762
  $257 = $c$216 + -1894007588 + (HEAP32[$W + ($i$419 + 2 << 2) >> 2] | 0) + (($223 | $243) & $226 | $223 & $243) + ($240 << 5 | $240 >>> 27) | 0; //@line 4776
  $e$218 = $223 << 30 | $223 >>> 2; //@line 4779
  $b$215 = $226 + -1894007588 + (HEAP32[$W + ($i$419 + 3 << 2) >> 2] | 0) + (($240 | $e$218) & $243 | $240 & $e$218) + ($257 << 5 | $257 >>> 27) | 0; //@line 4793
  $d$217 = $240 << 30 | $240 >>> 2; //@line 4796
  $i$419$looptemp = $i$419;
  $i$419 = $i$419 + 5 | 0; //@line 4804
  $a$220 = $243 + -1894007588 + (HEAP32[$W + ($i$419$looptemp + 4 << 2) >> 2] | 0) + (($257 | $d$217) & $e$218 | $257 & $d$217) + ($b$215 << 5 | $b$215 >>> 27) | 0; //@line 4810
  $c$216 = $257 << 30 | $257 >>> 2; //@line 4813
 } while ($i$419 >>> 0 < 60);
 if ($i$419 >>> 0 < 80) {
  $a$39 = $a$220; //@line 4823
  $b$34 = $b$215; //@line 4823
  $c$35 = $c$216; //@line 4823
  $d$36 = $d$217; //@line 4823
  $e$37 = $e$218; //@line 4823
  $i$58 = $i$419; //@line 4823
 } else {
  $a$3$lcssa = $a$220; //@line 4825
  $b$3$lcssa = $b$215; //@line 4825
  $c$3$lcssa = $c$216; //@line 4825
  $d$3$lcssa = $d$217; //@line 4825
  $e$3$lcssa = $e$218; //@line 4825
  $371 = $22 + $a$3$lcssa | 0; //@line 4826
  HEAP32[$21 >> 2] = $371; //@line 4827
  $372 = $24 + $b$3$lcssa | 0; //@line 4828
  HEAP32[$23 >> 2] = $372; //@line 4829
  $373 = $26 + $c$3$lcssa | 0; //@line 4830
  HEAP32[$25 >> 2] = $373; //@line 4831
  $374 = $28 + $d$3$lcssa | 0; //@line 4832
  HEAP32[$27 >> 2] = $374; //@line 4833
  $375 = $30 + $e$3$lcssa | 0; //@line 4834
  HEAP32[$29 >> 2] = $375; //@line 4835
  STACKTOP = sp; //@line 4836
  return;
 }
 while (1) {
  $306 = ($c$35 ^ $b$34 ^ $d$36) + -899497514 + $e$37 + ($a$39 << 5 | $a$39 >>> 27) + (HEAP32[$W + ($i$58 << 2) >> 2] | 0) | 0; //@line 4850
  $309 = $b$34 << 30 | $b$34 >>> 2; //@line 4853
  $321 = $d$36 + -899497514 + ($309 ^ $c$35 ^ $a$39) + (HEAP32[$W + ($i$58 + 1 << 2) >> 2] | 0) + ($306 << 5 | $306 >>> 27) | 0; //@line 4865
  $324 = $a$39 << 30 | $a$39 >>> 2; //@line 4868
  $336 = $c$35 + -899497514 + ($324 ^ $309 ^ $306) + (HEAP32[$W + ($i$58 + 2 << 2) >> 2] | 0) + ($321 << 5 | $321 >>> 27) | 0; //@line 4880
  $339 = $306 << 30 | $306 >>> 2; //@line 4883
  $351 = $309 + -899497514 + (HEAP32[$W + ($i$58 + 3 << 2) >> 2] | 0) + ($339 ^ $324 ^ $321) + ($336 << 5 | $336 >>> 27) | 0; //@line 4895
  $354 = $321 << 30 | $321 >>> 2; //@line 4898
  $366 = $324 + -899497514 + (HEAP32[$W + ($i$58 + 4 << 2) >> 2] | 0) + ($354 ^ $339 ^ $336) + ($351 << 5 | $351 >>> 27) | 0; //@line 4910
  $i$58 = $i$58 + 5 | 0; //@line 4904
  $369 = $336 << 30 | $336 >>> 2; //@line 4913
  if (!($i$58 >>> 0 < 80)) {
   $a$3$lcssa = $366; //@line 4918
   $b$3$lcssa = $351; //@line 4918
   $c$3$lcssa = $369; //@line 4918
   $d$3$lcssa = $354; //@line 4918
   $e$3$lcssa = $339; //@line 4918
   break;
  } else {
   $a$39 = $366; //@line 4916
   $b$34 = $351; //@line 4916
   $c$35 = $369; //@line 4916
   $d$36 = $354; //@line 4916
   $e$37 = $339; //@line 4916
  }
 }
 $371 = $22 + $a$3$lcssa | 0; //@line 4922
 HEAP32[$21 >> 2] = $371; //@line 4923
 $372 = $24 + $b$3$lcssa | 0; //@line 4924
 HEAP32[$23 >> 2] = $372; //@line 4925
 $373 = $26 + $c$3$lcssa | 0; //@line 4926
 HEAP32[$25 >> 2] = $373; //@line 4927
 $374 = $28 + $d$3$lcssa | 0; //@line 4928
 HEAP32[$27 >> 2] = $374; //@line 4929
 $375 = $30 + $e$3$lcssa | 0; //@line 4930
 HEAP32[$29 >> 2] = $375; //@line 4931
 STACKTOP = sp; //@line 4932
 return;
}
function _try_realloc_chunk($p, $nb) {
 $p = $p | 0;
 $nb = $nb | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $103 = 0, $105 = 0, $108 = 0, $111 = 0, $112 = 0, $114 = 0, $115 = 0, $117 = 0, $118 = 0, $120 = 0, $121 = 0, $126 = 0, $127 = 0, $136 = 0, $145 = 0, $152 = 0, $163 = 0, $173 = 0, $2 = 0, $22 = 0, $3 = 0, $35 = 0, $37 = 0, $4 = 0, $47 = 0, $49 = 0, $58 = 0, $6 = 0, $64 = 0, $70 = 0, $72 = 0, $73 = 0, $76 = 0, $78 = 0, $80 = 0, $9 = 0, $93 = 0, $98 = 0, $R$0 = 0, $R$1 = 0, $RP$0 = 0, $newp$0 = 0, $storemerge = 0, $storemerge21 = 0, sp = 0;
 sp = STACKTOP; //@line 8732
 $0 = $p + 4 | 0; //@line 8733
 $1 = HEAP32[$0 >> 2] | 0; //@line 8734
 $2 = $1 & -8; //@line 8735
 $3 = $p + $2 | 0; //@line 8736
 $4 = HEAP32[1120 >> 2] | 0; //@line 8737
 if ($p >>> 0 < $4 >>> 0) {
  _abort(); //@line 8740
 }
 $6 = $1 & 3; //@line 8743
 if (!(($6 | 0) != 1 & $p >>> 0 < $3 >>> 0)) {
  _abort(); //@line 8748
 }
 $9 = $p + ($2 | 4) | 0; //@line 8752
 $10 = HEAP32[$9 >> 2] | 0; //@line 8753
 if (($10 & 1 | 0) == 0) {
  _abort(); //@line 8757
 }
 if (($6 | 0) == 0) {
  if ($nb >>> 0 < 256) {
   $newp$0 = 0; //@line 8764
   STACKTOP = sp; //@line 8765
   return $newp$0 | 0; //@line 8765
  }
  if (!($2 >>> 0 < ($nb + 4 | 0) >>> 0)) {
   if (!(($2 - $nb | 0) >>> 0 > HEAP32[1584 >> 2] << 1 >>> 0)) {
    $newp$0 = $p; //@line 8775
    STACKTOP = sp; //@line 8776
    return $newp$0 | 0; //@line 8776
   }
  }
  $newp$0 = 0; //@line 8779
  STACKTOP = sp; //@line 8780
  return $newp$0 | 0; //@line 8780
 }
 if (!($2 >>> 0 < $nb >>> 0)) {
  $22 = $2 - $nb | 0; //@line 8784
  if (!($22 >>> 0 > 15)) {
   $newp$0 = $p; //@line 8787
   STACKTOP = sp; //@line 8788
   return $newp$0 | 0; //@line 8788
  }
  HEAP32[$0 >> 2] = $1 & 1 | $nb | 2; //@line 8794
  HEAP32[$p + ($nb + 4) >> 2] = $22 | 3; //@line 8798
  HEAP32[$9 >> 2] = HEAP32[$9 >> 2] | 1; //@line 8801
  _dispose_chunk($p + $nb | 0, $22); //@line 8802
  $newp$0 = $p; //@line 8803
  STACKTOP = sp; //@line 8804
  return $newp$0 | 0; //@line 8804
 }
 if (($3 | 0) == (HEAP32[1128 >> 2] | 0)) {
  $35 = (HEAP32[1116 >> 2] | 0) + $2 | 0; //@line 8810
  if (!($35 >>> 0 > $nb >>> 0)) {
   $newp$0 = 0; //@line 8813
   STACKTOP = sp; //@line 8814
   return $newp$0 | 0; //@line 8814
  }
  $37 = $35 - $nb | 0; //@line 8816
  HEAP32[$0 >> 2] = $1 & 1 | $nb | 2; //@line 8821
  HEAP32[$p + ($nb + 4) >> 2] = $37 | 1; //@line 8825
  HEAP32[1128 >> 2] = $p + $nb; //@line 8826
  HEAP32[1116 >> 2] = $37; //@line 8827
  $newp$0 = $p; //@line 8828
  STACKTOP = sp; //@line 8829
  return $newp$0 | 0; //@line 8829
 }
 if (($3 | 0) == (HEAP32[1124 >> 2] | 0)) {
  $47 = (HEAP32[1112 >> 2] | 0) + $2 | 0; //@line 8835
  if ($47 >>> 0 < $nb >>> 0) {
   $newp$0 = 0; //@line 8838
   STACKTOP = sp; //@line 8839
   return $newp$0 | 0; //@line 8839
  }
  $49 = $47 - $nb | 0; //@line 8841
  if ($49 >>> 0 > 15) {
   HEAP32[$0 >> 2] = $1 & 1 | $nb | 2; //@line 8849
   HEAP32[$p + ($nb + 4) >> 2] = $49 | 1; //@line 8853
   HEAP32[$p + $47 >> 2] = $49; //@line 8854
   $58 = $p + ($47 + 4) | 0; //@line 8856
   HEAP32[$58 >> 2] = HEAP32[$58 >> 2] & -2; //@line 8859
   $storemerge = $p + $nb | 0; //@line 8860
   $storemerge21 = $49; //@line 8860
  } else {
   HEAP32[$0 >> 2] = $1 & 1 | $47 | 2; //@line 8865
   $64 = $p + ($47 + 4) | 0; //@line 8867
   HEAP32[$64 >> 2] = HEAP32[$64 >> 2] | 1; //@line 8870
   $storemerge = 0; //@line 8871
   $storemerge21 = 0; //@line 8871
  }
  HEAP32[1112 >> 2] = $storemerge21; //@line 8873
  HEAP32[1124 >> 2] = $storemerge; //@line 8874
  $newp$0 = $p; //@line 8875
  STACKTOP = sp; //@line 8876
  return $newp$0 | 0; //@line 8876
 }
 if (($10 & 2 | 0) != 0) {
  $newp$0 = 0; //@line 8881
  STACKTOP = sp; //@line 8882
  return $newp$0 | 0; //@line 8882
 }
 $70 = ($10 & -8) + $2 | 0; //@line 8885
 if ($70 >>> 0 < $nb >>> 0) {
  $newp$0 = 0; //@line 8888
  STACKTOP = sp; //@line 8889
  return $newp$0 | 0; //@line 8889
 }
 $72 = $70 - $nb | 0; //@line 8891
 $73 = $10 >>> 3; //@line 8892
 do {
  if ($10 >>> 0 < 256) {
   $76 = HEAP32[$p + ($2 + 8) >> 2] | 0; //@line 8898
   $78 = HEAP32[$p + ($2 + 12) >> 2] | 0; //@line 8901
   $80 = 1144 + ($73 << 1 << 2) | 0; //@line 8903
   if (($76 | 0) != ($80 | 0)) {
    if ($76 >>> 0 < $4 >>> 0) {
     _abort(); //@line 8908
    }
    if ((HEAP32[$76 + 12 >> 2] | 0) != ($3 | 0)) {
     _abort(); //@line 8915
    }
   }
   if (($78 | 0) == ($76 | 0)) {
    HEAP32[276] = HEAP32[276] & ~(1 << $73); //@line 8925
    break;
   }
   if (($78 | 0) == ($80 | 0)) {
    $$pre$phiZ2D = $78 + 8 | 0; //@line 8931
   } else {
    if ($78 >>> 0 < $4 >>> 0) {
     _abort(); //@line 8935
    }
    $93 = $78 + 8 | 0; //@line 8938
    if ((HEAP32[$93 >> 2] | 0) == ($3 | 0)) {
     $$pre$phiZ2D = $93; //@line 8942
    } else {
     _abort(); //@line 8944
    }
   }
   HEAP32[$76 + 12 >> 2] = $78; //@line 8949
   HEAP32[$$pre$phiZ2D >> 2] = $76; //@line 8950
  } else {
   $98 = HEAP32[$p + ($2 + 24) >> 2] | 0; //@line 8954
   $100 = HEAP32[$p + ($2 + 12) >> 2] | 0; //@line 8957
   do {
    if (($100 | 0) == ($3 | 0)) {
     $111 = $p + ($2 + 20) | 0; //@line 8962
     $112 = HEAP32[$111 >> 2] | 0; //@line 8963
     if (($112 | 0) == 0) {
      $114 = $p + ($2 + 16) | 0; //@line 8967
      $115 = HEAP32[$114 >> 2] | 0; //@line 8968
      if (($115 | 0) == 0) {
       $R$1 = 0; //@line 8971
       break;
      } else {
       $R$0 = $115; //@line 8974
       $RP$0 = $114; //@line 8974
      }
     } else {
      $R$0 = $112; //@line 8977
      $RP$0 = $111; //@line 8977
     }
     while (1) {
      $117 = $R$0 + 20 | 0; //@line 8980
      $118 = HEAP32[$117 >> 2] | 0; //@line 8981
      if (($118 | 0) != 0) {
       $R$0 = $118; //@line 8984
       $RP$0 = $117; //@line 8984
       continue;
      }
      $120 = $R$0 + 16 | 0; //@line 8987
      $121 = HEAP32[$120 >> 2] | 0; //@line 8988
      if (($121 | 0) == 0) {
       break;
      } else {
       $R$0 = $121; //@line 8993
       $RP$0 = $120; //@line 8993
      }
     }
     if ($RP$0 >>> 0 < $4 >>> 0) {
      _abort(); //@line 8998
     } else {
      HEAP32[$RP$0 >> 2] = 0; //@line 9001
      $R$1 = $R$0; //@line 9002
      break;
     }
    } else {
     $103 = HEAP32[$p + ($2 + 8) >> 2] | 0; //@line 9008
     if ($103 >>> 0 < $4 >>> 0) {
      _abort(); //@line 9011
     }
     $105 = $103 + 12 | 0; //@line 9014
     if ((HEAP32[$105 >> 2] | 0) != ($3 | 0)) {
      _abort(); //@line 9018
     }
     $108 = $100 + 8 | 0; //@line 9021
     if ((HEAP32[$108 >> 2] | 0) == ($3 | 0)) {
      HEAP32[$105 >> 2] = $100; //@line 9025
      HEAP32[$108 >> 2] = $103; //@line 9026
      $R$1 = $100; //@line 9027
      break;
     } else {
      _abort(); //@line 9030
     }
    }
   } while (0);
   if (($98 | 0) != 0) {
    $126 = HEAP32[$p + ($2 + 28) >> 2] | 0; //@line 9039
    $127 = 1408 + ($126 << 2) | 0; //@line 9040
    if (($3 | 0) == (HEAP32[$127 >> 2] | 0)) {
     HEAP32[$127 >> 2] = $R$1; //@line 9044
     if (($R$1 | 0) == 0) {
      HEAP32[1108 >> 2] = HEAP32[1108 >> 2] & ~(1 << $126); //@line 9051
      break;
     }
    } else {
     if ($98 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
      _abort(); //@line 9058
     }
     $136 = $98 + 16 | 0; //@line 9061
     if ((HEAP32[$136 >> 2] | 0) == ($3 | 0)) {
      HEAP32[$136 >> 2] = $R$1; //@line 9065
     } else {
      HEAP32[$98 + 20 >> 2] = $R$1; //@line 9068
     }
     if (($R$1 | 0) == 0) {
      break;
     }
    }
    if ($R$1 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
     _abort(); //@line 9078
    }
    HEAP32[$R$1 + 24 >> 2] = $98; //@line 9082
    $145 = HEAP32[$p + ($2 + 16) >> 2] | 0; //@line 9085
    do {
     if (($145 | 0) != 0) {
      if ($145 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
       _abort(); //@line 9092
      } else {
       HEAP32[$R$1 + 16 >> 2] = $145; //@line 9096
       HEAP32[$145 + 24 >> 2] = $R$1; //@line 9098
       break;
      }
     }
    } while (0);
    $152 = HEAP32[$p + ($2 + 20) >> 2] | 0; //@line 9105
    if (($152 | 0) != 0) {
     if ($152 >>> 0 < (HEAP32[1120 >> 2] | 0) >>> 0) {
      _abort(); //@line 9111
     } else {
      HEAP32[$R$1 + 20 >> 2] = $152; //@line 9115
      HEAP32[$152 + 24 >> 2] = $R$1; //@line 9117
      break;
     }
    }
   }
  }
 } while (0);
 if ($72 >>> 0 < 16) {
  HEAP32[$0 >> 2] = $70 | HEAP32[$0 >> 2] & 1 | 2; //@line 9130
  $163 = $p + ($70 | 4) | 0; //@line 9132
  HEAP32[$163 >> 2] = HEAP32[$163 >> 2] | 1; //@line 9135
  $newp$0 = $p; //@line 9136
  STACKTOP = sp; //@line 9137
  return $newp$0 | 0; //@line 9137
 } else {
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] & 1 | $nb | 2; //@line 9144
  HEAP32[$p + ($nb + 4) >> 2] = $72 | 3; //@line 9148
  $173 = $p + ($70 | 4) | 0; //@line 9150
  HEAP32[$173 >> 2] = HEAP32[$173 >> 2] | 1; //@line 9153
  _dispose_chunk($p + $nb | 0, $72); //@line 9154
  $newp$0 = $p; //@line 9155
  STACKTOP = sp; //@line 9156
  return $newp$0 | 0; //@line 9156
 }
 return 0; //@line 9158
}
function _parse_string($item, $str) {
 $item = $item | 0;
 $str = $str | 0;
 var $$0 = 0, $$12 = 0, $$ptr$1 = 0, $0 = 0, $10 = 0, $12 = 0, $14 = 0, $22 = 0, $23 = 0, $3 = 0, $34 = 0, $35 = 0, $46 = 0, $51 = 0, $56 = 0, $61 = 0, $8 = 0, $len$0 = 0, $len$213 = 0, $len$214 = 0, $ptr$0 = 0, $ptr$1 = 0, $ptr$2 = 0, $ptr$3 = 0, $ptr2$0 = 0, $ptr2$1 = 0, $ptr2$2 = 0, $ptr2$3 = 0, $ptr2$5 = 0, $uc$0 = 0, $uc$1 = 0, $uc$2 = 0, $uc$3 = 0, sp = 0;
 sp = STACKTOP; //@line 1916
 $0 = $str + 1 | 0; //@line 1917
 if ((HEAP8[$str >> 0] | 0) == 34) {
  $len$0 = 1; //@line 1921
  $ptr$0 = $0; //@line 1921
 } else {
  HEAP32[2] = $str; //@line 1923
  $$0 = 0; //@line 1924
  STACKTOP = sp; //@line 1925
  return $$0 | 0; //@line 1925
 }
 while (1) {
  $3 = HEAP8[$ptr$0 >> 0] | 0; //@line 1928
  if ($3 << 24 >> 24 == 0 | $3 << 24 >> 24 == 34) {
   break;
  }
  $len$0 = $len$0 + 1 | 0; //@line 1937
  $ptr$0 = $3 << 24 >> 24 == 92 ? $ptr$0 + 2 | 0 : $ptr$0 + 1 | 0; //@line 1937
 }
 $8 = FUNCTION_TABLE_ii[HEAP32[4] & 15]($len$0) | 0; //@line 1940
 if (($8 | 0) == 0) {
  $$0 = 0; //@line 1943
  STACKTOP = sp; //@line 1944
  return $$0 | 0; //@line 1944
 } else {
  $ptr$1 = $0; //@line 1946
  $ptr2$0 = $8; //@line 1946
 }
 while (1) {
  $10 = HEAP8[$ptr$1 >> 0] | 0; //@line 1949
  if ($10 << 24 >> 24 == 0 | $10 << 24 >> 24 == 34) {
   break;
  }
  $12 = $ptr$1 + 1 | 0; //@line 1954
  if (!($10 << 24 >> 24 == 92)) {
   HEAP8[$ptr2$0 >> 0] = $10; //@line 1957
   $ptr$1 = $12; //@line 1958
   $ptr2$0 = $ptr2$0 + 1 | 0; //@line 1958
   continue;
  }
  $14 = HEAP8[$12 >> 0] | 0; //@line 1961
  L16 : do {
   switch ($14 & 255 | 0) {
   case 117:
    {
     $22 = _parse_hex4($ptr$1 + 2 | 0) | 0; //@line 1967
     $23 = $ptr$1 + 5 | 0; //@line 1968
     if (($22 + -56320 | 0) >>> 0 < 1024 | ($22 | 0) == 0) {
      $ptr$3 = $23; //@line 1974
      $ptr2$5 = $ptr2$0; //@line 1974
     } else {
      if (($22 + -55296 | 0) >>> 0 < 1024) {
       if ((HEAP8[$ptr$1 + 6 >> 0] | 0) != 92) {
        $ptr$3 = $23; //@line 1983
        $ptr2$5 = $ptr2$0; //@line 1983
        break L16;
       }
       if ((HEAP8[$ptr$1 + 7 >> 0] | 0) != 117) {
        $ptr$3 = $23; //@line 1990
        $ptr2$5 = $ptr2$0; //@line 1990
        break L16;
       }
       $34 = _parse_hex4($ptr$1 + 8 | 0) | 0; //@line 1994
       $35 = $ptr$1 + 11 | 0; //@line 1995
       if (($34 + -56320 | 0) >>> 0 > 1023) {
        $ptr$3 = $35; //@line 1999
        $ptr2$5 = $ptr2$0; //@line 1999
        break L16;
       }
       $ptr$2 = $35; //@line 2007
       $uc$0 = ($34 & 1023 | $22 << 10 & 1047552) + 65536 | 0; //@line 2007
      } else {
       $ptr$2 = $23; //@line 2009
       $uc$0 = $22; //@line 2009
      }
      if ($uc$0 >>> 0 < 128) {
       $len$213 = 1; //@line 2014
       $ptr2$3 = $ptr2$0 + 1 | 0; //@line 2014
       $uc$3 = $uc$0; //@line 2014
      } else {
       if ($uc$0 >>> 0 < 2048) {
        $len$214 = 2; //@line 2019
        $ptr2$2 = $ptr2$0 + 2 | 0; //@line 2019
        $uc$2 = $uc$0; //@line 2019
       } else {
        $46 = $uc$0 >>> 0 < 65536; //@line 2021
        $$12 = $46 ? 3 : 4; //@line 2022
        if ($46) {
         $ptr2$1 = $ptr2$0 + $$12 | 0; //@line 2025
         $uc$1 = $uc$0; //@line 2025
        } else {
         $51 = $ptr2$0 + ($$12 + -1) | 0; //@line 2031
         HEAP8[$51 >> 0] = $uc$0 & 63 | 128; //@line 2032
         $ptr2$1 = $51; //@line 2034
         $uc$1 = $uc$0 >>> 6; //@line 2034
        }
        $56 = $ptr2$1 + -1 | 0; //@line 2039
        HEAP8[$56 >> 0] = $uc$1 & 63 | 128; //@line 2040
        $len$214 = $$12; //@line 2042
        $ptr2$2 = $56; //@line 2042
        $uc$2 = $uc$1 >>> 6; //@line 2042
       }
       $61 = $ptr2$2 + -1 | 0; //@line 2047
       HEAP8[$61 >> 0] = $uc$2 & 63 | 128; //@line 2048
       $len$213 = $len$214; //@line 2050
       $ptr2$3 = $61; //@line 2050
       $uc$3 = $uc$2 >>> 6; //@line 2050
      }
      HEAP8[$ptr2$3 + -1 >> 0] = HEAPU8[112 + $len$213 >> 0] | $uc$3; //@line 2058
      $ptr$3 = $ptr$2; //@line 2061
      $ptr2$5 = $ptr2$3 + ($len$213 + -1) | 0; //@line 2061
     }
     break;
    }
   case 114:
    {
     HEAP8[$ptr2$0 >> 0] = 13; //@line 2067
     $ptr$3 = $12; //@line 2068
     $ptr2$5 = $ptr2$0 + 1 | 0; //@line 2068
     break;
    }
   case 102:
    {
     HEAP8[$ptr2$0 >> 0] = 12; //@line 2073
     $ptr$3 = $12; //@line 2074
     $ptr2$5 = $ptr2$0 + 1 | 0; //@line 2074
     break;
    }
   case 98:
    {
     HEAP8[$ptr2$0 >> 0] = 8; //@line 2079
     $ptr$3 = $12; //@line 2080
     $ptr2$5 = $ptr2$0 + 1 | 0; //@line 2080
     break;
    }
   case 116:
    {
     HEAP8[$ptr2$0 >> 0] = 9; //@line 2085
     $ptr$3 = $12; //@line 2086
     $ptr2$5 = $ptr2$0 + 1 | 0; //@line 2086
     break;
    }
   case 110:
    {
     HEAP8[$ptr2$0 >> 0] = 10; //@line 2091
     $ptr$3 = $12; //@line 2092
     $ptr2$5 = $ptr2$0 + 1 | 0; //@line 2092
     break;
    }
   default:
    {
     HEAP8[$ptr2$0 >> 0] = $14; //@line 2097
     $ptr$3 = $12; //@line 2098
     $ptr2$5 = $ptr2$0 + 1 | 0; //@line 2098
    }
   }
  } while (0);
  $ptr$1 = $ptr$3 + 1 | 0; //@line 2103
  $ptr2$0 = $ptr2$5; //@line 2103
 }
 HEAP8[$ptr2$0 >> 0] = 0; //@line 2105
 $$ptr$1 = (HEAP8[$ptr$1 >> 0] | 0) == 34 ? $ptr$1 + 1 | 0 : $ptr$1; //@line 2109
 HEAP32[$item + 16 >> 2] = $8; //@line 2111
 HEAP32[$item + 12 >> 2] = 4; //@line 2113
 $$0 = $$ptr$1; //@line 2114
 STACKTOP = sp; //@line 2115
 return $$0 | 0; //@line 2115
}
function _print_string_ptr($str) {
 $str = $str | 0;
 var $$0 = 0, $1 = 0, $13 = 0, $16 = 0, $21 = 0, $23 = 0, $24 = 0, $27 = 0, $30 = 0, $31 = 0, $33 = 0, $5 = 0, $7 = 0, $9 = 0, $len$05 = 0, $len$1 = 0, $len$2 = 0, $ptr$04 = 0, $ptr$1$be = 0, $ptr$12 = 0, $ptr2$0$be = 0, $ptr2$0$lcssa = 0, $ptr2$03 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 1738
 STACKTOP = STACKTOP + 16 | 0; //@line 1739
 $vararg_buffer = sp; //@line 1740
 if (($str | 0) == 0) {
  $5 = FUNCTION_TABLE_ii[HEAP32[4] & 15](1) | 0; //@line 1744
  if (($5 | 0) == 0) {
   $$0 = 0; //@line 1747
   STACKTOP = sp; //@line 1748
   return $$0 | 0; //@line 1748
  }
  HEAP8[$5 >> 0] = 0; //@line 1750
  $$0 = $5; //@line 1751
  STACKTOP = sp; //@line 1752
  return $$0 | 0; //@line 1752
 }
 $1 = HEAP8[$str >> 0] | 0; //@line 1754
 L8 : do {
  if ($1 << 24 >> 24 == 0) {
   $len$2 = 0; //@line 1758
  } else {
   $13 = $1; //@line 1761
   $9 = $1 & 255; //@line 1761
   $len$05 = 0; //@line 1761
   $ptr$04 = $str; //@line 1761
   while (1) {
    $7 = $len$05 + 1 | 0; //@line 1763
    if (($7 | 0) == 0) {
     $len$2 = 0; //@line 1766
     break L8;
    }
    if ((_memchr(56, $9, 8) | 0) == 0) {
     $len$1 = ($13 & 255) < 32 ? $len$05 + 6 | 0 : $7; //@line 1775
    } else {
     $len$1 = $len$05 + 2 | 0; //@line 1778
    }
    $ptr$04 = $ptr$04 + 1 | 0; //@line 1780
    $16 = HEAP8[$ptr$04 >> 0] | 0; //@line 1781
    if ($16 << 24 >> 24 == 0) {
     $len$2 = $len$1; //@line 1785
     break;
    } else {
     $13 = $16; //@line 1788
     $9 = $16 & 255; //@line 1788
     $len$05 = $len$1; //@line 1788
    }
   }
  }
 } while (0);
 $21 = FUNCTION_TABLE_ii[HEAP32[4] & 15]($len$2 + 3 | 0) | 0; //@line 1795
 if (($21 | 0) == 0) {
  $$0 = 0; //@line 1798
  STACKTOP = sp; //@line 1799
  return $$0 | 0; //@line 1799
 }
 $23 = $21 + 1 | 0; //@line 1801
 HEAP8[$21 >> 0] = 34; //@line 1802
 $24 = HEAP8[$str >> 0] | 0; //@line 1803
 if ($24 << 24 >> 24 == 0) {
  $ptr2$0$lcssa = $23; //@line 1806
 } else {
  $27 = $24; //@line 1808
  $ptr$12 = $str; //@line 1808
  $ptr2$03 = $23; //@line 1808
  while (1) {
   if (($27 & 255) < 32) {
    label = 16; //@line 1812
   } else {
    if ($27 << 24 >> 24 == 34 | $27 << 24 >> 24 == 92) {
     label = 16; //@line 1815
    } else {
     HEAP8[$ptr2$03 >> 0] = $27; //@line 1819
     $ptr$1$be = $ptr$12 + 1 | 0; //@line 1820
     $ptr2$0$be = $ptr2$03 + 1 | 0; //@line 1820
    }
   }
   L27 : do {
    if ((label | 0) == 16) {
     label = 0; //@line 1825
     $30 = $ptr2$03 + 1 | 0; //@line 1826
     HEAP8[$ptr2$03 >> 0] = 92; //@line 1827
     $31 = $ptr$12 + 1 | 0; //@line 1828
     $33 = HEAPU8[$ptr$12 >> 0] | 0; //@line 1830
     switch ($33 | 0) {
     case 34:
      {
       HEAP8[$30 >> 0] = 34; //@line 1834
       $ptr$1$be = $31; //@line 1835
       $ptr2$0$be = $ptr2$03 + 2 | 0; //@line 1835
       break L27;
       break;
      }
     case 13:
      {
       HEAP8[$30 >> 0] = 114; //@line 1841
       $ptr$1$be = $31; //@line 1842
       $ptr2$0$be = $ptr2$03 + 2 | 0; //@line 1842
       break L27;
       break;
      }
     case 9:
      {
       HEAP8[$30 >> 0] = 116; //@line 1848
       $ptr$1$be = $31; //@line 1849
       $ptr2$0$be = $ptr2$03 + 2 | 0; //@line 1849
       break L27;
       break;
      }
     case 12:
      {
       HEAP8[$30 >> 0] = 102; //@line 1855
       $ptr$1$be = $31; //@line 1856
       $ptr2$0$be = $ptr2$03 + 2 | 0; //@line 1856
       break L27;
       break;
      }
     case 10:
      {
       HEAP8[$30 >> 0] = 110; //@line 1862
       $ptr$1$be = $31; //@line 1863
       $ptr2$0$be = $ptr2$03 + 2 | 0; //@line 1863
       break L27;
       break;
      }
     case 92:
      {
       HEAP8[$30 >> 0] = 92; //@line 1869
       $ptr$1$be = $31; //@line 1870
       $ptr2$0$be = $ptr2$03 + 2 | 0; //@line 1870
       break L27;
       break;
      }
     case 8:
      {
       HEAP8[$30 >> 0] = 98; //@line 1876
       $ptr$1$be = $31; //@line 1877
       $ptr2$0$be = $ptr2$03 + 2 | 0; //@line 1877
       break L27;
       break;
      }
     default:
      {
       HEAP32[$vararg_buffer >> 2] = $33; //@line 1882
       _sprintf($30, 64, $vararg_buffer) | 0; //@line 1883
       $ptr$1$be = $31; //@line 1885
       $ptr2$0$be = $ptr2$03 + 6 | 0; //@line 1885
       break L27;
      }
     }
    }
   } while (0);
   $27 = HEAP8[$ptr$1$be >> 0] | 0; //@line 1891
   if ($27 << 24 >> 24 == 0) {
    $ptr2$0$lcssa = $ptr2$0$be; //@line 1894
    break;
   } else {
    $ptr$12 = $ptr$1$be; //@line 1897
    $ptr2$03 = $ptr2$0$be; //@line 1897
   }
  }
 }
 HEAP8[$ptr2$0$lcssa >> 0] = 34; //@line 1902
 HEAP8[$ptr2$0$lcssa + 1 >> 0] = 0; //@line 1903
 $$0 = $21; //@line 1904
 STACKTOP = sp; //@line 1905
 return $$0 | 0; //@line 1905
}
function _ot_client_receive($client, $op) {
 $client = $client | 0;
 $op = $op | 0;
 var $$ph = 0, $$pre$i3 = 0, $$pre2$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $13 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $29 = 0, $31 = 0, $36 = 0, $37 = 0, $39 = 0, $40 = 0, $42 = 0, $8 = 0, $apply = 0, $client$idx1 = 0, $hex = 0, $vararg_buffer10 = 0, sp = 0;
 sp = STACKTOP; //@line 2288
 STACKTOP = STACKTOP + 64 | 0; //@line 2289
 $vararg_buffer10 = sp; //@line 2290
 $hex = sp + 12 | 0; //@line 2291
 $apply = sp + 8 | 0; //@line 2292
 $0 = HEAP32[_stderr >> 2] | 0; //@line 2293
 HEAP32[$vararg_buffer10 >> 2] = $op; //@line 2294
 _fprintf($0 | 0, 120, $vararg_buffer10 | 0) | 0; //@line 2295
 $1 = _ot_new_op(0, 144) | 0; //@line 2296
 $2 = _ot_decode($1, $op) | 0; //@line 2297
 if (($2 | 0) != 0) {
  HEAP32[$vararg_buffer10 >> 2] = $2; //@line 2300
  _fprintf($0 | 0, 152, $vararg_buffer10 | 0) | 0; //@line 2301
  _ot_free_op($1); //@line 2302
  STACKTOP = sp; //@line 2303
  return;
 }
 if ((HEAP32[$1 >> 2] | 0) == (HEAP32[$client + 12 >> 2] | 0)) {
  $8 = $1 + 24 | 0; //@line 2310
  _atohex($hex, $8, 20) | 0; //@line 2311
  HEAP32[$vararg_buffer10 >> 2] = $hex; //@line 2312
  _fprintf($0 | 0, 200, $vararg_buffer10 | 0) | 0; //@line 2313
  HEAP8[$client + 16 >> 0] = 0; //@line 2315
  _send_buffer($client, $8); //@line 2316
  _ot_free_op($1); //@line 2317
  STACKTOP = sp; //@line 2318
  return;
 }
 $client$idx1 = $client + 4 | 0; //@line 2320
 FUNCTION_TABLE_iii[HEAP32[$client$idx1 >> 2] & 15](3, 0) | 0; //@line 2322
 $10 = $client + 20 | 0; //@line 2323
 $11 = HEAP32[$10 >> 2] | 0; //@line 2324
 do {
  if (($11 | 0) == 0) {
   $$ph = $1; //@line 2328
  } else {
   _ot_xform($vararg_buffer10, $1, $11); //@line 2330
   $13 = HEAP32[$vararg_buffer10 >> 2] | 0; //@line 2331
   if (($13 | 0) != 0) {
    $15 = $vararg_buffer10 + 4 | 0; //@line 2334
    $16 = HEAP32[$15 >> 2] | 0; //@line 2335
    if (($16 | 0) != 0) {
     $18 = HEAP32[$10 >> 2] | 0; //@line 2338
     $$pre2$i = $client + 24 | 0; //@line 2340
     if (($18 | 0) == 0) {
      $22 = $16; //@line 2342
      $42 = $13; //@line 2342
     } else {
      if ((HEAP8[$$pre2$i >> 0] | 0) == 0) {
       _free($18); //@line 2347
      } else {
       _ot_free_op($18); //@line 2349
       HEAP8[$$pre2$i >> 0] = 0; //@line 2350
      }
      HEAP32[$10 >> 2] = 0; //@line 2352
      $22 = HEAP32[$15 >> 2] | 0; //@line 2355
      $42 = HEAP32[$vararg_buffer10 >> 2] | 0; //@line 2355
     }
     HEAP32[$10 >> 2] = $22; //@line 2357
     HEAP8[$$pre2$i >> 0] = 1; //@line 2358
     _ot_free_op($1); //@line 2359
     $$ph = $42; //@line 2360
     break;
    }
   }
   HEAP32[$vararg_buffer10 >> 2] = 9; //@line 2364
   _fprintf($0 | 0, 232, $vararg_buffer10 | 0) | 0; //@line 2365
   _ot_free_op($1); //@line 2366
   STACKTOP = sp; //@line 2367
   return;
  }
 } while (0);
 $23 = $client + 28 | 0; //@line 2370
 $24 = HEAP32[$23 >> 2] | 0; //@line 2371
 do {
  if (($24 | 0) == 0) {
   HEAP32[$apply >> 2] = $$ph; //@line 2375
  } else {
   _ot_xform($vararg_buffer10, $24, $$ph); //@line 2377
   if ((HEAP32[$vararg_buffer10 >> 2] | 0) != 0) {
    $29 = HEAP32[$vararg_buffer10 + 4 >> 2] | 0; //@line 2382
    if (($29 | 0) != 0) {
     HEAP32[$apply >> 2] = $29; //@line 2385
     $31 = HEAP32[$23 >> 2] | 0; //@line 2386
     $$pre$i3 = $client + 32 | 0; //@line 2388
     if (($31 | 0) != 0) {
      if ((HEAP8[$$pre$i3 >> 0] | 0) == 0) {
       _free($31); //@line 2393
      } else {
       _ot_free_op($31); //@line 2395
       HEAP8[$$pre$i3 >> 0] = 0; //@line 2396
      }
      HEAP32[$23 >> 2] = 0; //@line 2398
     }
     _ot_free_op($$ph); //@line 2400
     HEAP32[$23 >> 2] = HEAP32[$vararg_buffer10 >> 2]; //@line 2402
     HEAP8[$$pre$i3 >> 0] = 1; //@line 2403
     break;
    }
   }
   HEAP32[$vararg_buffer10 >> 2] = 9; //@line 2407
   _fprintf($0 | 0, 296, $vararg_buffer10 | 0) | 0; //@line 2408
   _ot_free_op($$ph); //@line 2409
   STACKTOP = sp; //@line 2410
   return;
  }
 } while (0);
 $36 = $client + 8 | 0; //@line 2413
 $37 = HEAP32[$36 >> 2] | 0; //@line 2414
 if (($37 | 0) == 0) {
  $39 = _ot_new_doc() | 0; //@line 2417
  HEAP32[$36 >> 2] = $39; //@line 2418
  $40 = $39; //@line 2419
 } else {
  $40 = $37; //@line 2421
 }
 _ot_doc_append($40, $apply) | 0; //@line 2423
 FUNCTION_TABLE_iii[HEAP32[$client$idx1 >> 2] & 15](2, HEAP32[$apply >> 2] | 0) | 0; //@line 2426
 STACKTOP = sp; //@line 2427
 return;
}
function _sha1_done($md, $out) {
 $md = $md | 0;
 $out = $out | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $112 = 0, $12 = 0, $128 = 0, $17 = 0, $19 = 0, $23 = 0, $28 = 0, $31 = 0, $33 = 0, $36 = 0, $37 = 0, $4 = 0, $41 = 0, $45 = 0, $51 = 0, $55 = 0, $59 = 0, $65 = 0, $80 = 0, $96 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4232
 $0 = $md + 28 | 0; //@line 4233
 $1 = HEAP32[$0 >> 2] | 0; //@line 4234
 if ($1 >>> 0 > 63) {
  $$0 = 1; //@line 4237
  STACKTOP = sp; //@line 4238
  return $$0 | 0; //@line 4238
 }
 $4 = $md; //@line 4241
 $10 = _i64Add(HEAP32[$4 >> 2] | 0, HEAP32[$4 + 4 >> 2] | 0, $1 << 3 | 0, 0) | 0; //@line 4247
 $12 = $md; //@line 4249
 HEAP32[$12 >> 2] = $10; //@line 4251
 HEAP32[$12 + 4 >> 2] = tempRet0; //@line 4254
 HEAP32[$0 >> 2] = $1 + 1; //@line 4256
 $17 = $md + 32 | 0; //@line 4257
 HEAP8[$md + $1 + 32 >> 0] = -128; //@line 4259
 $19 = HEAP32[$0 >> 2] | 0; //@line 4260
 if ($19 >>> 0 > 56) {
  if ($19 >>> 0 < 64) {
   $23 = $19; //@line 4265
   do {
    HEAP32[$0 >> 2] = $23 + 1; //@line 4268
    HEAP8[$md + $23 + 32 >> 0] = 0; //@line 4270
    $23 = HEAP32[$0 >> 2] | 0; //@line 4271
   } while ($23 >>> 0 < 64);
  }
  _sha1_compress($md, $17); //@line 4280
  HEAP32[$0 >> 2] = 0; //@line 4281
  $28 = 0; //@line 4282
  label = 7; //@line 4283
 } else {
  if ($19 >>> 0 < 56) {
   $28 = $19; //@line 4287
   label = 7; //@line 4288
  }
 }
 if ((label | 0) == 7) {
  while (1) {
   label = 0; //@line 4293
   HEAP32[$0 >> 2] = $28 + 1; //@line 4295
   HEAP8[$md + $28 + 32 >> 0] = 0; //@line 4297
   $28 = HEAP32[$0 >> 2] | 0; //@line 4298
   if (!($28 >>> 0 < 56)) {
    break;
   } else {
    label = 7; //@line 4302
   }
  }
 }
 $31 = $md; //@line 4308
 $33 = HEAP32[$31 >> 2] | 0; //@line 4310
 $36 = HEAP32[$31 + 4 >> 2] | 0; //@line 4313
 $37 = _bitshift64Lshr($33 | 0, $36 | 0, 56) | 0; //@line 4314
 HEAP8[$md + 88 >> 0] = $37; //@line 4318
 $41 = _bitshift64Lshr($33 | 0, $36 | 0, 48) | 0; //@line 4319
 HEAP8[$md + 89 >> 0] = $41; //@line 4323
 $45 = _bitshift64Lshr($33 | 0, $36 | 0, 40) | 0; //@line 4324
 HEAP8[$md + 90 >> 0] = $45; //@line 4328
 HEAP8[$md + 91 >> 0] = $36; //@line 4331
 $51 = _bitshift64Lshr($33 | 0, $36 | 0, 24) | 0; //@line 4332
 HEAP8[$md + 92 >> 0] = $51; //@line 4336
 $55 = _bitshift64Lshr($33 | 0, $36 | 0, 16) | 0; //@line 4337
 HEAP8[$md + 93 >> 0] = $55; //@line 4341
 $59 = _bitshift64Lshr($33 | 0, $36 | 0, 8) | 0; //@line 4342
 HEAP8[$md + 94 >> 0] = $59; //@line 4346
 HEAP8[$md + 95 >> 0] = $33; //@line 4349
 _sha1_compress($md, $17); //@line 4350
 $65 = $md + 8 | 0; //@line 4351
 HEAP8[$out >> 0] = (HEAP32[$65 >> 2] | 0) >>> 24; //@line 4355
 HEAP8[$out + 1 >> 0] = (HEAP32[$65 >> 2] | 0) >>> 16; //@line 4360
 HEAP8[$out + 2 >> 0] = (HEAP32[$65 >> 2] | 0) >>> 8; //@line 4365
 HEAP8[$out + 3 >> 0] = HEAP32[$65 >> 2]; //@line 4369
 $80 = $md + 12 | 0; //@line 4370
 HEAP8[$out + 4 >> 0] = (HEAP32[$80 >> 2] | 0) >>> 24; //@line 4375
 HEAP8[$out + 5 >> 0] = (HEAP32[$80 >> 2] | 0) >>> 16; //@line 4380
 HEAP8[$out + 6 >> 0] = (HEAP32[$80 >> 2] | 0) >>> 8; //@line 4385
 HEAP8[$out + 7 >> 0] = HEAP32[$80 >> 2]; //@line 4389
 $96 = $md + 16 | 0; //@line 4390
 HEAP8[$out + 8 >> 0] = (HEAP32[$96 >> 2] | 0) >>> 24; //@line 4395
 HEAP8[$out + 9 >> 0] = (HEAP32[$96 >> 2] | 0) >>> 16; //@line 4400
 HEAP8[$out + 10 >> 0] = (HEAP32[$96 >> 2] | 0) >>> 8; //@line 4405
 HEAP8[$out + 11 >> 0] = HEAP32[$96 >> 2]; //@line 4409
 $112 = $md + 20 | 0; //@line 4410
 HEAP8[$out + 12 >> 0] = (HEAP32[$112 >> 2] | 0) >>> 24; //@line 4415
 HEAP8[$out + 13 >> 0] = (HEAP32[$112 >> 2] | 0) >>> 16; //@line 4420
 HEAP8[$out + 14 >> 0] = (HEAP32[$112 >> 2] | 0) >>> 8; //@line 4425
 HEAP8[$out + 15 >> 0] = HEAP32[$112 >> 2]; //@line 4429
 $128 = $md + 24 | 0; //@line 4430
 HEAP8[$out + 16 >> 0] = (HEAP32[$128 >> 2] | 0) >>> 24; //@line 4435
 HEAP8[$out + 17 >> 0] = (HEAP32[$128 >> 2] | 0) >>> 16; //@line 4440
 HEAP8[$out + 18 >> 0] = (HEAP32[$128 >> 2] | 0) >>> 8; //@line 4445
 HEAP8[$out + 19 >> 0] = HEAP32[$128 >> 2]; //@line 4449
 $$0 = 0; //@line 4450
 STACKTOP = sp; //@line 4451
 return $$0 | 0; //@line 4451
}
function _ot_server_receive($server, $op) {
 $server = $server | 0;
 $op = $op | 0;
 var $$0$i1 = 0, $0 = 0, $1 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $30 = 0, $32 = 0, $4 = 0, $40 = 0, $5 = 0, $7 = 0, $8 = 0, $doc$0 = 0, $i$01$i = 0, $p$i = 0, $vararg_buffer15 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 4044
 STACKTOP = STACKTOP + 16 | 0; //@line 4045
 $vararg_buffer15 = sp; //@line 4046
 $p$i = sp + 8 | 0; //@line 4047
 $0 = HEAP32[_stderr >> 2] | 0; //@line 4048
 HEAP32[$vararg_buffer15 >> 2] = $op; //@line 4049
 _fprintf($0 | 0, 728, $vararg_buffer15 | 0) | 0; //@line 4050
 $1 = _ot_new_op(0, 752) | 0; //@line 4051
 if ((_ot_decode($1, $op) | 0) != 0) {
  HEAP32[$vararg_buffer15 >> 2] = $op; //@line 4055
  _fprintf($0 | 0, 760, $vararg_buffer15 | 0) | 0; //@line 4056
  _ot_free_op($1); //@line 4057
  STACKTOP = sp; //@line 4058
  return;
 }
 $4 = $server + 8 | 0; //@line 4060
 $5 = HEAP32[$4 >> 2] | 0; //@line 4061
 L5 : do {
  if (($5 | 0) == 0) {
   $7 = _ot_new_doc() | 0; //@line 4065
   HEAP32[$4 >> 2] = $7; //@line 4066
   _append_op($server, $1); //@line 4067
   $doc$0 = $7; //@line 4068
  } else {
   $8 = $1 + 4 | 0; //@line 4070
   L8 : do {
    if ((_memcmp((HEAP32[$5 + 16 >> 2] | 0) + 24 | 0, $8, 20) | 0) != 0) {
     L10 : do {
      if ((HEAP32[$5 >> 2] | 0) == 0) {
       $i$01$i = 0; //@line 4082
       while (1) {
        if ((HEAP8[$1 + $i$01$i + 4 >> 0] | 0) != 0) {
         break L10;
        }
        $i$01$i = $i$01$i + 1 | 0; //@line 4087
        if (($i$01$i | 0) >= 20) {
         break L8;
        }
       }
      }
     } while (0);
     $21 = _ot_encode($1) | 0; //@line 4100
     $22 = _ot_doc_compose_after($5, $8) | 0; //@line 4101
     do {
      if (($22 | 0) == 0) {
       HEAP32[$vararg_buffer15 >> 2] = $21; //@line 4105
       _fprintf($0 | 0, 824, $vararg_buffer15 | 0) | 0; //@line 4106
       _free($21); //@line 4107
       $$0$i1 = 0; //@line 4108
      } else {
       $24 = _ot_encode($22) | 0; //@line 4110
       HEAP32[$vararg_buffer15 >> 2] = $24; //@line 4111
       HEAP32[$vararg_buffer15 + 4 >> 2] = $21; //@line 4113
       _fprintf($0 | 0, 880, $vararg_buffer15 | 0) | 0; //@line 4114
       _free($24); //@line 4115
       _ot_xform($p$i, $22, $1); //@line 4116
       $25 = HEAP32[$p$i >> 2] | 0; //@line 4117
       if (($25 | 0) != 0) {
        $27 = $p$i + 4 | 0; //@line 4120
        if ((HEAP32[$27 >> 2] | 0) != 0) {
         $30 = _ot_encode($25) | 0; //@line 4124
         $32 = _ot_encode(HEAP32[$27 >> 2] | 0) | 0; //@line 4126
         HEAP32[$vararg_buffer15 >> 2] = $30; //@line 4127
         HEAP32[$vararg_buffer15 + 4 >> 2] = $32; //@line 4129
         _fprintf($0 | 0, 944, $vararg_buffer15 | 0) | 0; //@line 4130
         _free($21); //@line 4131
         _free($30); //@line 4132
         _free($32); //@line 4133
         _ot_free_op(HEAP32[$p$i >> 2] | 0); //@line 4135
         dest = (HEAP32[$27 >> 2] | 0) + 4 | 0; //@line 4139
         src = $22 + 24 | 0; //@line 4139
         stop = dest + 20 | 0; //@line 4139
         do {
          HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 4139
          dest = dest + 1 | 0; //@line 4139
          src = src + 1 | 0; //@line 4139
         } while ((dest | 0) < (stop | 0));
         _ot_free_op($22); //@line 4140
         $$0$i1 = HEAP32[$27 >> 2] | 0; //@line 4142
         break;
        }
       }
       _fwrite(912, 25, 1, $0 | 0) | 0; //@line 4146
       _free($21); //@line 4147
       _ot_free_op($22); //@line 4148
       $$0$i1 = 0; //@line 4149
      }
     } while (0);
     _ot_free_op($1); //@line 4152
     _append_op($server, $$0$i1); //@line 4153
     $doc$0 = $5; //@line 4154
     break L5;
    }
   } while (0);
   _append_op($server, $1); //@line 4158
   $doc$0 = $5; //@line 4159
  }
 } while (0);
 $40 = _ot_encode(HEAP32[$doc$0 + 16 >> 2] | 0) | 0; //@line 4164
 HEAP32[$vararg_buffer15 >> 2] = $40; //@line 4165
 _fprintf($0 | 0, 792, $vararg_buffer15 | 0) | 0; //@line 4166
 _free($40); //@line 4167
 STACKTOP = sp; //@line 4168
 return;
}
function _decode_cjson_op($json, $op) {
 $json = $json | 0;
 $op = $op | 0;
 var $$0 = 0, $0 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $21 = 0, $24 = 0, $27 = 0, $34 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $44 = 0, $51 = 0, $6 = 0, $8 = 0, $i$01 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 3754
 $0 = _cJSON_GetObjectItem($json, 432) | 0; //@line 3755
 if (($0 | 0) == 0) {
  $$0 = 2; //@line 3758
  STACKTOP = sp; //@line 3759
  return $$0 | 0; //@line 3759
 }
 HEAP32[$op >> 2] = HEAP32[$0 + 20 >> 2]; //@line 3763
 $4 = _cJSON_GetObjectItem($json, 448) | 0; //@line 3764
 if (($4 | 0) == 0) {
  $$0 = 1; //@line 3767
  STACKTOP = sp; //@line 3768
  return $$0 | 0; //@line 3768
 }
 $6 = $op + 4 | 0; //@line 3770
 dest = $6 + 0 | 0; //@line 3771
 stop = dest + 20 | 0; //@line 3771
 do {
  HEAP8[dest >> 0] = 0; //@line 3771
  dest = dest + 1 | 0; //@line 3771
 } while ((dest | 0) < (stop | 0));
 $8 = HEAP32[$4 + 16 >> 2] | 0; //@line 3773
 _hextoa($6, 20, $8, _strlen($8 | 0) | 0) | 0; //@line 3775
 $10 = _cJSON_GetObjectItem($json, 456) | 0; //@line 3776
 if (($10 | 0) == 0) {
  $$0 = 5; //@line 3779
  STACKTOP = sp; //@line 3780
  return $$0 | 0; //@line 3780
 }
 $12 = $op + 24 | 0; //@line 3782
 dest = $12 + 0 | 0; //@line 3783
 stop = dest + 20 | 0; //@line 3783
 do {
  HEAP8[dest >> 0] = 0; //@line 3783
  dest = dest + 1 | 0; //@line 3783
 } while ((dest | 0) < (stop | 0));
 $14 = HEAP32[$10 + 16 >> 2] | 0; //@line 3785
 _hextoa($12, 20, $14, _strlen($14 | 0) | 0) | 0; //@line 3787
 $16 = _cJSON_GetObjectItem($json, 464) | 0; //@line 3788
 if (($16 | 0) == 0) {
  $$0 = 3; //@line 3791
  STACKTOP = sp; //@line 3792
  return $$0 | 0; //@line 3792
 }
 $18 = _cJSON_GetArraySize($16) | 0; //@line 3794
 if (($18 | 0) <= 0) {
  $$0 = 0; //@line 3797
  STACKTOP = sp; //@line 3798
  return $$0 | 0; //@line 3798
 }
 $20 = $op + 44 | 0; //@line 3800
 $i$01 = 0; //@line 3801
 L16 : while (1) {
  $21 = _cJSON_GetArrayItem($16, $i$01) | 0; //@line 3803
  $24 = HEAP32[(_cJSON_GetObjectItem($21, 480) | 0) + 16 >> 2] | 0; //@line 3806
  do {
   if ((_memcmp($24, 488, 4) | 0) == 0) {
    $27 = _array_append($20) | 0; //@line 3811
    HEAP32[$27 >> 2] = 0; //@line 3812
    HEAP32[$27 + 4 >> 2] = HEAP32[(_cJSON_GetObjectItem($21, 496) | 0) + 20 >> 2]; //@line 3817
   } else {
    if ((_memcmp($24, 504, 6) | 0) == 0) {
     $34 = _array_append($20) | 0; //@line 3822
     HEAP32[$34 >> 2] = 1; //@line 3823
     $37 = HEAP32[(_cJSON_GetObjectItem($21, 512) | 0) + 16 >> 2] | 0; //@line 3826
     $39 = (_strlen($37 | 0) | 0) + 1 | 0; //@line 3828
     $40 = _malloc($39) | 0; //@line 3829
     HEAP32[$34 + 4 >> 2] = $40; //@line 3831
     _memcpy($40 | 0, $37 | 0, $39 | 0) | 0; //@line 3832
     break;
    }
    if ((_memcmp($24, 520, 6) | 0) == 0) {
     $44 = _array_append($20) | 0; //@line 3838
     HEAP32[$44 >> 2] = 2; //@line 3839
     HEAP32[$44 + 4 >> 2] = HEAP32[(_cJSON_GetObjectItem($21, 496) | 0) + 20 >> 2]; //@line 3844
     break;
    }
    if ((_memcmp($24, 528, 11) | 0) == 0) {
     $51 = _array_append($20) | 0; //@line 3850
     HEAP32[$51 >> 2] = 3; //@line 3851
     HEAP32[$51 + 4 >> 2] = HEAP32[(_cJSON_GetObjectItem($21, 544) | 0) + 16 >> 2]; //@line 3856
     break;
    }
    if ((_memcmp($24, 552, 12) | 0) == 0) {
     HEAP32[(_array_append($20) | 0) >> 2] = 4; //@line 3863
     break;
    }
    if ((_memcmp($24, 568, 18) | 0) != 0) {
     $$0 = 4; //@line 3869
     label = 20; //@line 3870
     break L16;
    }
    HEAP32[(_array_append($20) | 0) >> 2] = 5; //@line 3874
   }
  } while (0);
  $i$01 = $i$01 + 1 | 0; //@line 3877
  if (($i$01 | 0) >= ($18 | 0)) {
   $$0 = 0; //@line 3882
   label = 20; //@line 3883
   break;
  }
 }
 if ((label | 0) == 20) {
  STACKTOP = sp; //@line 3888
  return $$0 | 0; //@line 3888
 }
 return 0; //@line 3890
}
function _memchr($src, $c, $n) {
 $src = $src | 0;
 $c = $c | 0;
 $n = $n | 0;
 var $$0$lcssa = 0, $$0$lcssa34 = 0, $$013 = 0, $$1$lcssa = 0, $$17 = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $13 = 0, $15 = 0, $17 = 0, $20 = 0, $26 = 0, $27 = 0, $32 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0, $s$0$lcssa = 0, $s$0$lcssa33 = 0, $s$014 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13391
 $0 = $c & 255; //@line 13392
 $4 = ($n | 0) == 0; //@line 13396
 L1 : do {
  if (($src & 3 | 0) == 0 | $4) {
   $$0$lcssa = $n; //@line 13400
   $$lcssa = $4; //@line 13400
   $s$0$lcssa = $src; //@line 13400
   label = 5; //@line 13401
  } else {
   $5 = $c & 255; //@line 13403
   $$013 = $n; //@line 13404
   $s$014 = $src; //@line 13404
   while (1) {
    if ((HEAP8[$s$014 >> 0] | 0) == $5 << 24 >> 24) {
     $$0$lcssa34 = $$013; //@line 13409
     $s$0$lcssa33 = $s$014; //@line 13409
     label = 6; //@line 13410
     break L1;
    }
    $8 = $s$014 + 1 | 0; //@line 13413
    $9 = $$013 + -1 | 0; //@line 13414
    $13 = ($9 | 0) == 0; //@line 13418
    if (($8 & 3 | 0) == 0 | $13) {
     $$0$lcssa = $9; //@line 13421
     $$lcssa = $13; //@line 13421
     $s$0$lcssa = $8; //@line 13421
     label = 5; //@line 13422
     break;
    } else {
     $$013 = $9; //@line 13425
     $s$014 = $8; //@line 13425
    }
   }
  }
 } while (0);
 if ((label | 0) == 5) {
  if ($$lcssa) {
   $$3 = 0; //@line 13432
   $s$2 = $s$0$lcssa; //@line 13432
  } else {
   $$0$lcssa34 = $$0$lcssa; //@line 13434
   $s$0$lcssa33 = $s$0$lcssa; //@line 13434
   label = 6; //@line 13435
  }
 }
 L8 : do {
  if ((label | 0) == 6) {
   $15 = $c & 255; //@line 13441
   if ((HEAP8[$s$0$lcssa33 >> 0] | 0) == $15 << 24 >> 24) {
    $$3 = $$0$lcssa34; //@line 13444
    $s$2 = $s$0$lcssa33; //@line 13444
   } else {
    $17 = Math_imul($0, 16843009) | 0; //@line 13446
    L11 : do {
     if ($$0$lcssa34 >>> 0 > 3) {
      $$17 = $$0$lcssa34; //@line 13450
      $w$08 = $s$0$lcssa33; //@line 13450
      while (1) {
       $20 = HEAP32[$w$08 >> 2] ^ $17; //@line 13453
       if ((($20 & -2139062144 ^ -2139062144) & $20 + -16843009 | 0) != 0) {
        $$1$lcssa = $$17; //@line 13460
        $w$0$lcssa = $w$08; //@line 13460
        break L11;
       }
       $26 = $w$08 + 4 | 0; //@line 13463
       $27 = $$17 + -4 | 0; //@line 13464
       if ($27 >>> 0 > 3) {
        $$17 = $27; //@line 13467
        $w$08 = $26; //@line 13467
       } else {
        $$1$lcssa = $27; //@line 13469
        $w$0$lcssa = $26; //@line 13469
        break;
       }
      }
     } else {
      $$1$lcssa = $$0$lcssa34; //@line 13474
      $w$0$lcssa = $s$0$lcssa33; //@line 13474
     }
    } while (0);
    if (($$1$lcssa | 0) == 0) {
     $$3 = 0; //@line 13479
     $s$2 = $w$0$lcssa; //@line 13479
    } else {
     $$24 = $$1$lcssa; //@line 13481
     $s$15 = $w$0$lcssa; //@line 13481
     while (1) {
      if ((HEAP8[$s$15 >> 0] | 0) == $15 << 24 >> 24) {
       $$3 = $$24; //@line 13486
       $s$2 = $s$15; //@line 13486
       break L8;
      }
      $32 = $s$15 + 1 | 0; //@line 13489
      $$24 = $$24 + -1 | 0; //@line 13490
      if (($$24 | 0) == 0) {
       $$3 = 0; //@line 13493
       $s$2 = $32; //@line 13493
       break;
      } else {
       $s$15 = $32; //@line 13496
      }
     }
    }
   }
  }
 } while (0);
 STACKTOP = sp; //@line 13505
 return (($$3 | 0) != 0 ? $s$2 : 0) | 0; //@line 13505
}
function _ot_dup_op($op) {
 $op = $op | 0;
 var $0 = 0, $1 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $19 = 0, $22 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $35 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $44 = 0, $45 = 0, $7 = 0, $i$01 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 3288
 $0 = _malloc(60) | 0; //@line 3289
 dest = $0 + 0 | 0; //@line 3290
 src = $op + 0 | 0; //@line 3290
 stop = dest + 60 | 0; //@line 3290
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 3290
  dest = dest + 4 | 0; //@line 3290
  src = src + 4 | 0; //@line 3290
 } while ((dest | 0) < (stop | 0));
 $1 = $0 + 44 | 0; //@line 3291
 _array_init($1, 36); //@line 3292
 $3 = HEAP32[$op + 56 >> 2] | 0; //@line 3294
 $4 = $op + 44 | 0; //@line 3295
 if ((HEAP32[$4 >> 2] | 0) == 0) {
  STACKTOP = sp; //@line 3299
  return $0 | 0; //@line 3299
 }
 $7 = $0 + 56 | 0; //@line 3301
 $i$01 = 0; //@line 3302
 do {
  L6 : do {
   switch (HEAP32[$3 + ($i$01 * 36 | 0) >> 2] | 0) {
   case 1:
    {
     _ot_insert($0, HEAP32[$3 + ($i$01 * 36 | 0) + 4 >> 2] | 0); //@line 3311
     break;
    }
   case 4:
    {
     HEAP32[(_array_append($1) | 0) >> 2] = 4; //@line 3316
     break;
    }
   case 3:
    {
     $41 = HEAP32[$3 + ($i$01 * 36 | 0) + 4 >> 2] | 0; //@line 3321
     $42 = _array_append($1) | 0; //@line 3322
     HEAP32[$42 >> 2] = 3; //@line 3323
     $44 = (_strlen($41 | 0) | 0) + 1 | 0; //@line 3325
     $45 = _malloc($44) | 0; //@line 3326
     HEAP32[$42 + 4 >> 2] = $45; //@line 3328
     _memcpy($45 | 0, $41 | 0, $44 | 0) | 0; //@line 3329
     break;
    }
   case 2:
    {
     $27 = HEAP32[$3 + ($i$01 * 36 | 0) + 4 >> 2] | 0; //@line 3334
     $28 = HEAP32[$7 >> 2] | 0; //@line 3335
     $29 = HEAP32[$1 >> 2] | 0; //@line 3336
     $30 = $29 + -1 | 0; //@line 3337
     if (($29 | 0) != 0) {
      if ((HEAP32[$28 + ($30 * 36 | 0) >> 2] | 0) == 2) {
       $35 = $28 + ($30 * 36 | 0) + 4 | 0; //@line 3344
       HEAP32[$35 >> 2] = (HEAP32[$35 >> 2] | 0) + $27; //@line 3347
       break L6;
      }
     }
     $38 = _array_append($1) | 0; //@line 3351
     HEAP32[$38 >> 2] = 2; //@line 3352
     HEAP32[$38 + 4 >> 2] = $27; //@line 3354
     break;
    }
   case 0:
    {
     $11 = HEAP32[$3 + ($i$01 * 36 | 0) + 4 >> 2] | 0; //@line 3359
     $12 = HEAP32[$7 >> 2] | 0; //@line 3360
     $13 = HEAP32[$1 >> 2] | 0; //@line 3361
     $14 = $13 + -1 | 0; //@line 3362
     if (($13 | 0) != 0) {
      if ((HEAP32[$12 + ($14 * 36 | 0) >> 2] | 0) == 0) {
       $19 = $12 + ($14 * 36 | 0) + 4 | 0; //@line 3369
       HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + $11; //@line 3372
       break L6;
      }
     }
     $22 = _array_append($1) | 0; //@line 3376
     HEAP32[$22 >> 2] = 0; //@line 3377
     HEAP32[$22 + 4 >> 2] = $11; //@line 3379
     break;
    }
   default:
    {}
   }
  } while (0);
  $i$01 = $i$01 + 1 | 0; //@line 3386
 } while ($i$01 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0);
 STACKTOP = sp; //@line 3395
 return $0 | 0; //@line 3395
}
function _cjson_op($op) {
 $op = $op | 0;
 var $1 = 0, $2 = 0, $3 = 0, $33 = 0, $7 = 0, $8 = 0, $hash = 0, $i$01 = 0, $parent = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 3922
 STACKTOP = STACKTOP + 96 | 0; //@line 3923
 $parent = sp + 41 | 0; //@line 3924
 $hash = sp; //@line 3925
 $1 = HEAP32[$op + 56 >> 2] | 0; //@line 3927
 $2 = _cJSON_CreateArray() | 0; //@line 3928
 $3 = $op + 44 | 0; //@line 3929
 L1 : do {
  if ((HEAP32[$3 >> 2] | 0) != 0) {
   $i$01 = 0; //@line 3934
   while (1) {
    $7 = HEAP32[$1 + ($i$01 * 36 | 0) >> 2] | 0; //@line 3937
    $8 = _cJSON_CreateObject() | 0; //@line 3938
    switch ($7 | 0) {
    case 0:
     {
      _cJSON_AddItemToObject($8, 592, _cJSON_CreateString(600) | 0); //@line 3942
      _cJSON_AddItemToObject($8, 608, _cJSON_CreateNumber(+((HEAP32[$1 + ($i$01 * 36 | 0) + 4 >> 2] | 0) >>> 0)) | 0); //@line 3947
      break;
     }
    case 3:
     {
      _cJSON_AddItemToObject($8, 592, _cJSON_CreateString(640) | 0); //@line 3952
      _cJSON_AddItemToObject($8, 656, _cJSON_CreateString(HEAP32[$1 + ($i$01 * 36 | 0) + 4 >> 2] | 0) | 0); //@line 3956
      break;
     }
    case 2:
     {
      _cJSON_AddItemToObject($8, 592, _cJSON_CreateString(632) | 0); //@line 3961
      _cJSON_AddItemToObject($8, 608, _cJSON_CreateNumber(+((HEAP32[$1 + ($i$01 * 36 | 0) + 4 >> 2] | 0) >>> 0)) | 0); //@line 3966
      break;
     }
    case 1:
     {
      _cJSON_AddItemToObject($8, 592, _cJSON_CreateString(616) | 0); //@line 3971
      _cJSON_AddItemToObject($8, 624, _cJSON_CreateString(HEAP32[$1 + ($i$01 * 36 | 0) + 4 >> 2] | 0) | 0); //@line 3975
      break;
     }
    case 4:
     {
      _cJSON_AddItemToObject($8, 592, _cJSON_CreateString(664) | 0); //@line 3980
      break;
     }
    default:
     {}
    }
    _cJSON_AddItemToArray($2, $8); //@line 3986
    $i$01 = $i$01 + 1 | 0; //@line 3987
    if (!($i$01 >>> 0 < (HEAP32[$3 >> 2] | 0) >>> 0)) {
     break L1;
    }
   }
  }
 } while (0);
 dest = $parent + 0 | 0; //@line 3998
 stop = dest + 41 | 0; //@line 3998
 do {
  HEAP8[dest >> 0] = 0; //@line 3998
  dest = dest + 1 | 0; //@line 3998
 } while ((dest | 0) < (stop | 0));
 _atohex($parent, $op + 4 | 0, 20) | 0; //@line 4000
 dest = $hash + 0 | 0; //@line 4001
 stop = dest + 41 | 0; //@line 4001
 do {
  HEAP8[dest >> 0] = 0; //@line 4001
  dest = dest + 1 | 0; //@line 4001
 } while ((dest | 0) < (stop | 0));
 _atohex($hash, $op + 24 | 0, 20) | 0; //@line 4003
 $33 = _cJSON_CreateObject() | 0; //@line 4004
 _cJSON_AddItemToObject($33, 680, _cJSON_CreateNumber(+((HEAP32[$op >> 2] | 0) >>> 0)) | 0); //@line 4008
 _cJSON_AddItemToObject($33, 696, _cJSON_CreateString($parent) | 0); //@line 4010
 _cJSON_AddItemToObject($33, 704, _cJSON_CreateString($hash) | 0); //@line 4012
 _cJSON_AddItemToObject($33, 712, $2); //@line 4013
 STACKTOP = sp; //@line 4014
 return $33 | 0; //@line 4014
}
function _hash_op($op) {
 $op = $op | 0;
 var $$01$$i = 0, $$01$be$i = 0, $$014$i = 0, $$02$be$i = 0, $$023$i = 0, $$1 = 0, $0 = 0, $1 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $24 = 0, $26 = 0, $32 = 0, $36 = 0, $37 = 0, $38 = 0, $41 = 0, $47 = 0, $49 = 0, $7 = 0, $8 = 0, $md = 0, sp = 0;
 sp = STACKTOP; //@line 4940
 STACKTOP = STACKTOP + 96 | 0; //@line 4941
 $md = sp; //@line 4942
 $0 = _ot_snapshot($op) | 0; //@line 4943
 $1 = ($0 | 0) == 0; //@line 4944
 $$1 = $1 ? 1096 : $0; //@line 4945
 HEAP32[$md + 8 >> 2] = 1732584193; //@line 4947
 HEAP32[$md + 12 >> 2] = -271733879; //@line 4949
 HEAP32[$md + 16 >> 2] = -1732584194; //@line 4951
 HEAP32[$md + 20 >> 2] = 271733878; //@line 4953
 HEAP32[$md + 24 >> 2] = -1009589776; //@line 4955
 $7 = $md + 28 | 0; //@line 4956
 HEAP32[$7 >> 2] = 0; //@line 4957
 $8 = $md; //@line 4958
 HEAP32[$8 >> 2] = 0; //@line 4960
 HEAP32[$8 + 4 >> 2] = 0; //@line 4963
 $12 = _strlen($$1 | 0) | 0; //@line 4964
 L1 : do {
  if (($12 | 0) != 0) {
   $14 = $md + 32 | 0; //@line 4968
   $$014$i = $12; //@line 4969
   $$023$i = $$1; //@line 4969
   $16 = 0; //@line 4969
   while (1) {
    if (($16 | 0) == 0 & $$014$i >>> 0 > 63) {
     _sha1_compress($md, $$023$i); //@line 4975
     $18 = $md; //@line 4976
     $24 = _i64Add(HEAP32[$18 >> 2] | 0, HEAP32[$18 + 4 >> 2] | 0, 512, 0) | 0; //@line 4982
     $26 = $md; //@line 4984
     HEAP32[$26 >> 2] = $24; //@line 4986
     HEAP32[$26 + 4 >> 2] = tempRet0; //@line 4989
     $$01$be$i = $$014$i + -64 | 0; //@line 4992
     $$02$be$i = $$023$i + 64 | 0; //@line 4992
    } else {
     $32 = 64 - $16 | 0; //@line 4994
     $$01$$i = $$014$i >>> 0 < $32 >>> 0 ? $$014$i : $32; //@line 4996
     _memcpy($md + $16 + 32 | 0, $$023$i | 0, $$01$$i | 0) | 0; //@line 4998
     $36 = (HEAP32[$7 >> 2] | 0) + $$01$$i | 0; //@line 5000
     HEAP32[$7 >> 2] = $36; //@line 5001
     $37 = $$023$i + $$01$$i | 0; //@line 5002
     $38 = $$014$i - $$01$$i | 0; //@line 5003
     if (($36 | 0) == 64) {
      _sha1_compress($md, $14); //@line 5006
      $41 = $md; //@line 5007
      $47 = _i64Add(HEAP32[$41 >> 2] | 0, HEAP32[$41 + 4 >> 2] | 0, 512, 0) | 0; //@line 5013
      $49 = $md; //@line 5015
      HEAP32[$49 >> 2] = $47; //@line 5017
      HEAP32[$49 + 4 >> 2] = tempRet0; //@line 5020
      HEAP32[$7 >> 2] = 0; //@line 5021
      $$01$be$i = $38; //@line 5022
      $$02$be$i = $37; //@line 5022
     } else {
      $$01$be$i = $38; //@line 5024
      $$02$be$i = $37; //@line 5024
     }
    }
    if (($$01$be$i | 0) == 0) {
     break L1;
    }
    $$014$i = $$01$be$i; //@line 5032
    $$023$i = $$02$be$i; //@line 5032
    $16 = HEAP32[$7 >> 2] | 0; //@line 5032
   }
  }
 } while (0);
 _sha1_done($md, $op + 24 | 0) | 0; //@line 5037
 if ($1) {
  STACKTOP = sp; //@line 5039
  return;
 }
 _free($$1); //@line 5041
 STACKTOP = sp; //@line 5042
 return;
}
function _ot_doc_append($doc, $op) {
 $doc = $doc | 0;
 $op = $op | 0;
 var $$0 = 0, $0 = 0, $10 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $25 = 0, $zero = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 2859
 STACKTOP = STACKTOP + 32 | 0; //@line 2860
 $zero = sp; //@line 2861
 $0 = _array_append($doc) | 0; //@line 2862
 dest = $0 + 0 | 0; //@line 2864
 src = (HEAP32[$op >> 2] | 0) + 0 | 0; //@line 2864
 stop = dest + 60 | 0; //@line 2864
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 2864
  dest = dest + 4 | 0; //@line 2864
  src = src + 4 | 0; //@line 2864
 } while ((dest | 0) < (stop | 0));
 $2 = HEAP32[$doc >> 2] | 0; //@line 2865
 if ($2 >>> 0 > 1) {
  dest = $0 + 4 | 0; //@line 2873
  src = (HEAP32[$doc + 12 >> 2] | 0) + (($2 + -2 | 0) * 60 | 0) + 24 | 0; //@line 2873
  stop = dest + 20 | 0; //@line 2873
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 2873
   dest = dest + 1 | 0; //@line 2873
   src = src + 1 | 0; //@line 2873
  } while ((dest | 0) < (stop | 0));
 } else {
  dest = $zero + 0 | 0; //@line 2875
  stop = dest + 20 | 0; //@line 2875
  do {
   HEAP8[dest >> 0] = 0; //@line 2875
   dest = dest + 1 | 0; //@line 2875
  } while ((dest | 0) < (stop | 0));
  dest = $0 + 4 | 0; //@line 2877
  src = $zero + 0 | 0; //@line 2877
  stop = dest + 20 | 0; //@line 2877
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 2877
   dest = dest + 1 | 0; //@line 2877
   src = src + 1 | 0; //@line 2877
  } while ((dest | 0) < (stop | 0));
 }
 $10 = HEAP32[$doc >> 2] | 0; //@line 2879
 if ($10 >>> 0 < 3) {
  $13 = HEAP32[$doc + 12 >> 2] | 0; //@line 2883
  HEAP32[$doc + 16 >> 2] = $13; //@line 2885
  if ($10 >>> 0 > 1) {
   $17 = $13; //@line 2888
   label = 7; //@line 2889
  }
 } else {
  $17 = HEAP32[$doc + 16 >> 2] | 0; //@line 2894
  label = 7; //@line 2895
 }
 if ((label | 0) == 7) {
  $16 = $doc + 16 | 0; //@line 2898
  $18 = _ot_compose($17, $0) | 0; //@line 2899
  $20 = HEAP32[$doc >> 2] | 0; //@line 2901
  if (($18 | 0) == 0) {
   HEAP32[$doc >> 2] = $20 + -1; //@line 2904
   $$0 = 8; //@line 2905
   STACKTOP = sp; //@line 2906
   return $$0 | 0; //@line 2906
  }
  if ($20 >>> 0 > 2) {
   _ot_free_op(HEAP32[$16 >> 2] | 0); //@line 2911
  }
  HEAP32[$16 >> 2] = $18; //@line 2913
 }
 _free(HEAP32[$op >> 2] | 0); //@line 2916
 HEAP32[$op >> 2] = $0; //@line 2917
 $25 = $doc + 16 | 0; //@line 2918
 _hash_op(HEAP32[$25 >> 2] | 0); //@line 2920
 dest = $0 + 24 | 0; //@line 2924
 src = (HEAP32[$25 >> 2] | 0) + 24 | 0; //@line 2924
 stop = dest + 20 | 0; //@line 2924
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 2924
  dest = dest + 1 | 0; //@line 2924
  src = src + 1 | 0; //@line 2924
 } while ((dest | 0) < (stop | 0));
 $$0 = 0; //@line 2925
 STACKTOP = sp; //@line 2926
 return $$0 | 0; //@line 2926
}
function _ot_client_apply($client, $op) {
 $client = $client | 0;
 $op = $op | 0;
 var $$0 = 0, $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer1 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 2512
 STACKTOP = STACKTOP + 16 | 0; //@line 2513
 $vararg_buffer1 = sp; //@line 2514
 HEAP32[HEAP32[$op >> 2] >> 2] = HEAP32[$client + 12 >> 2]; //@line 2518
 $3 = $client + 8 | 0; //@line 2519
 $4 = HEAP32[$3 >> 2] | 0; //@line 2520
 if (($4 | 0) == 0) {
  $6 = _ot_new_doc() | 0; //@line 2523
  HEAP32[$3 >> 2] = $6; //@line 2524
  $7 = $6; //@line 2525
 } else {
  $7 = $4; //@line 2527
 }
 $8 = _ot_doc_append($7, $op) | 0; //@line 2529
 if (($8 | 0) != 0) {
  $$0 = $8; //@line 2532
  STACKTOP = sp; //@line 2533
  return $$0 | 0; //@line 2533
 }
 $10 = HEAP32[$op >> 2] | 0; //@line 2535
 $11 = $client + 28 | 0; //@line 2536
 $12 = HEAP32[$11 >> 2] | 0; //@line 2537
 if (($12 | 0) == 0) {
  $14 = _malloc(60) | 0; //@line 2540
  HEAP32[$11 >> 2] = $14; //@line 2541
  dest = $14 + 0 | 0; //@line 2542
  src = $10 + 0 | 0; //@line 2542
  stop = dest + 60 | 0; //@line 2542
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 2542
   dest = dest + 4 | 0; //@line 2542
   src = src + 4 | 0; //@line 2542
  } while ((dest | 0) < (stop | 0));
  HEAP8[$client + 32 >> 0] = 0; //@line 2544
 } else {
  $16 = _ot_compose($12, $10) | 0; //@line 2546
  if (($16 | 0) == 0) {
   $24 = _ot_encode($10) | 0; //@line 2549
   $25 = HEAP32[_stderr >> 2] | 0; //@line 2550
   HEAP32[$vararg_buffer1 >> 2] = $24; //@line 2551
   _fprintf($25 | 0, 352, $vararg_buffer1 | 0) | 0; //@line 2552
   _free($24); //@line 2553
   $$0 = 7; //@line 2554
   STACKTOP = sp; //@line 2555
   return $$0 | 0; //@line 2555
  }
  $18 = HEAP32[$11 >> 2] | 0; //@line 2557
  $$pre$i = $client + 32 | 0; //@line 2559
  if (($18 | 0) != 0) {
   if ((HEAP8[$$pre$i >> 0] | 0) == 0) {
    _free($18); //@line 2564
   } else {
    _ot_free_op($18); //@line 2566
    HEAP8[$$pre$i >> 0] = 0; //@line 2567
   }
   HEAP32[$11 >> 2] = 0; //@line 2569
  }
  HEAP32[$11 >> 2] = $16; //@line 2571
  HEAP8[$$pre$i >> 0] = 1; //@line 2572
  $22 = _ot_encode($16) | 0; //@line 2573
  $23 = HEAP32[_stderr >> 2] | 0; //@line 2574
  HEAP32[$vararg_buffer1 >> 2] = $22; //@line 2575
  _fprintf($23 | 0, 400, $vararg_buffer1 | 0) | 0; //@line 2576
  _free($22); //@line 2577
 }
 if ((HEAP8[$client + 16 >> 0] | 0) != 0) {
  $$0 = 0; //@line 2583
  STACKTOP = sp; //@line 2584
  return $$0 | 0; //@line 2584
 }
 _send_buffer($client, 0); //@line 2586
 $$0 = 0; //@line 2587
 STACKTOP = sp; //@line 2588
 return $$0 | 0; //@line 2588
}
function _ot_iter_skip($iter, $count) {
 $iter = $iter | 0;
 $count = $count | 0;
 var $$0 = 0, $$pre2 = 0, $0 = 0, $1 = 0, $13 = 0, $14 = 0, $23 = 0, $28 = 0, $33 = 0, $34 = 0, $4 = 0, $8 = 0, $9 = 0, $i$0$be = 0, $i$01 = 0, $max$0 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3649
 $0 = HEAP32[$iter >> 2] | 0; //@line 3650
 $1 = $0 + 44 | 0; //@line 3651
 if ((HEAP32[$1 >> 2] | 0) == 0) {
  $$0 = 0; //@line 3655
  STACKTOP = sp; //@line 3656
  return $$0 | 0; //@line 3656
 }
 $4 = $iter + 12 | 0; //@line 3658
 if ((HEAP8[$4 >> 0] | 0) == 0) {
  HEAP32[$iter + 4 >> 2] = 0; //@line 3663
  HEAP32[$iter + 8 >> 2] = 0; //@line 3665
  HEAP8[$4 >> 0] = 1; //@line 3666
  $$0 = 1; //@line 3667
  STACKTOP = sp; //@line 3668
  return $$0 | 0; //@line 3668
 }
 if (($count | 0) == 0) {
  $$0 = 1; //@line 3672
  STACKTOP = sp; //@line 3673
  return $$0 | 0; //@line 3673
 }
 $8 = $iter + 4 | 0; //@line 3675
 $9 = $iter + 8 | 0; //@line 3676
 $$pre2 = HEAP32[$0 + 56 >> 2] | 0; //@line 3679
 $13 = HEAP32[$8 >> 2] | 0; //@line 3680
 $i$01 = 0; //@line 3680
 while (1) {
  $14 = HEAP32[$$pre2 + ($13 * 36 | 0) >> 2] | 0; //@line 3683
  if (($14 | 0) == 2) {
   $max$0 = HEAP32[$$pre2 + ($13 * 36 | 0) + 4 >> 2] | 0; //@line 3687
  } else if (($14 | 0) == 0) {
   $max$0 = HEAP32[$$pre2 + ($13 * 36 | 0) + 4 >> 2] | 0; //@line 3691
  } else if (($14 | 0) == 1) {
   $max$0 = _strlen(HEAP32[$$pre2 + ($13 * 36 | 0) + 4 >> 2] | 0) | 0; //@line 3696
  } else {
   $max$0 = 0; //@line 3698
  }
  $23 = (HEAP32[$9 >> 2] | 0) + $count | 0; //@line 3701
  if ($23 >>> 0 < $max$0 >>> 0) {
   HEAP32[$9 >> 2] = $23; //@line 3704
   if (($23 | 0) == 0) {
    $33 = $13; //@line 3707
    label = 14; //@line 3708
   } else {
    $34 = $13; //@line 3711
    $i$0$be = $i$01 + $count | 0; //@line 3711
   }
  } else {
   if (!($13 >>> 0 < ((HEAP32[$1 >> 2] | 0) + -1 | 0) >>> 0)) {
    $$0 = 0; //@line 3718
    label = 17; //@line 3719
    break;
   }
   $28 = $13 + 1 | 0; //@line 3722
   HEAP32[$8 >> 2] = $28; //@line 3723
   HEAP32[$9 >> 2] = 0; //@line 3724
   $33 = $28; //@line 3725
   label = 14; //@line 3726
  }
  if ((label | 0) == 14) {
   label = 0; //@line 3729
   $34 = $33; //@line 3731
   $i$0$be = $max$0 + $i$01 | 0; //@line 3731
  }
  if ($i$0$be >>> 0 < $count >>> 0) {
   $13 = $34; //@line 3735
   $i$01 = $i$0$be; //@line 3735
  } else {
   $$0 = 1; //@line 3737
   label = 17; //@line 3738
   break;
  }
 }
 if ((label | 0) == 17) {
  STACKTOP = sp; //@line 3743
  return $$0 | 0; //@line 3743
 }
 return 0; //@line 3745
}
function _send_buffer($client, $received_hash) {
 $client = $client | 0;
 $received_hash = $received_hash | 0;
 var $$pre2 = 0, $0 = 0, $1 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $19 = 0, $20 = 0, $22 = 0, $3 = 0, $4 = 0, $6 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 2434
 $0 = $client + 28 | 0; //@line 2435
 $1 = HEAP32[$0 >> 2] | 0; //@line 2436
 if (($1 | 0) == 0) {
  $3 = $client + 20 | 0; //@line 2439
  $4 = HEAP32[$3 >> 2] | 0; //@line 2440
  if (($4 | 0) == 0) {
   STACKTOP = sp; //@line 2443
   return;
  }
  $6 = $client + 24 | 0; //@line 2445
  if ((HEAP8[$6 >> 0] | 0) == 0) {
   _free($4); //@line 2449
  } else {
   _ot_free_op($4); //@line 2451
   HEAP8[$6 >> 0] = 0; //@line 2452
  }
  HEAP32[$3 >> 2] = 0; //@line 2454
  STACKTOP = sp; //@line 2455
  return;
 }
 if (($received_hash | 0) == 0) {
  $11 = $1; //@line 2459
 } else {
  dest = $1 + 4 | 0; //@line 2462
  src = $received_hash + 0 | 0; //@line 2462
  stop = dest + 20 | 0; //@line 2462
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 2462
   dest = dest + 1 | 0; //@line 2462
   src = src + 1 | 0; //@line 2462
  } while ((dest | 0) < (stop | 0));
  $11 = HEAP32[$0 >> 2] | 0; //@line 2464
 }
 $12 = _ot_encode($11) | 0; //@line 2466
 FUNCTION_TABLE_ii[HEAP32[$client >> 2] & 15]($12) | 0; //@line 2468
 _free($12); //@line 2469
 $14 = $client + 20 | 0; //@line 2470
 $15 = HEAP32[$14 >> 2] | 0; //@line 2471
 $$pre2 = $client + 24 | 0; //@line 2473
 if (($15 | 0) != 0) {
  if ((HEAP8[$$pre2 >> 0] | 0) == 0) {
   _free($15); //@line 2478
  } else {
   _ot_free_op($15); //@line 2480
   HEAP8[$$pre2 >> 0] = 0; //@line 2481
  }
  HEAP32[$14 >> 2] = 0; //@line 2483
 }
 $19 = _malloc(60) | 0; //@line 2485
 HEAP32[$14 >> 2] = $19; //@line 2486
 $20 = HEAP32[$0 >> 2] | 0; //@line 2487
 dest = $19 + 0 | 0; //@line 2488
 src = $20 + 0 | 0; //@line 2488
 stop = dest + 60 | 0; //@line 2488
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 2488
  dest = dest + 4 | 0; //@line 2488
  src = src + 4 | 0; //@line 2488
 } while ((dest | 0) < (stop | 0));
 HEAP8[$$pre2 >> 0] = 0; //@line 2489
 if (($20 | 0) != 0) {
  $22 = $client + 32 | 0; //@line 2492
  if ((HEAP8[$22 >> 0] | 0) == 0) {
   _free($20); //@line 2496
  } else {
   _ot_free_op($20); //@line 2498
   HEAP8[$22 >> 0] = 0; //@line 2499
  }
  HEAP32[$0 >> 2] = 0; //@line 2501
 }
 HEAP8[$client + 16 >> 0] = 1; //@line 2504
 STACKTOP = sp; //@line 2505
 return;
}
function _parse_hex4($str) {
 $str = $str | 0;
 var $$0 = 0, $$pn = 0, $$pn1 = 0, $$pn2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $18 = 0, $20 = 0, $21 = 0, $28 = 0, $30 = 0, $31 = 0, $8 = 0, $h$0 = 0, sp = 0;
 sp = STACKTOP; //@line 2122
 $0 = HEAP8[$str >> 0] | 0; //@line 2123
 $1 = $0 & 255; //@line 2124
 do {
  if (($0 + -48 << 24 >> 24 & 255) < 10) {
   $h$0 = $1 + -48 | 0; //@line 2130
  } else {
   if (($0 + -65 << 24 >> 24 & 255) < 6) {
    $h$0 = $1 + -55 | 0; //@line 2136
    break;
   }
   if (($0 + -97 << 24 >> 24 & 255) < 6) {
    $h$0 = $1 + -87 | 0; //@line 2143
    break;
   } else {
    $$0 = 0; //@line 2146
    STACKTOP = sp; //@line 2147
    return $$0 | 0; //@line 2147
   }
  }
 } while (0);
 $8 = $h$0 << 4; //@line 2151
 $10 = HEAP8[$str + 1 >> 0] | 0; //@line 2153
 $11 = $10 & 255; //@line 2154
 do {
  if (($10 + -48 << 24 >> 24 & 255) < 10) {
   $$pn = $11 + -48 | 0; //@line 2160
  } else {
   if (($10 + -65 << 24 >> 24 & 255) < 6) {
    $$pn = $11 + -55 | 0; //@line 2166
    break;
   }
   if (($10 + -97 << 24 >> 24 & 255) < 6) {
    $$pn = $11 + -87 | 0; //@line 2173
    break;
   } else {
    $$0 = 0; //@line 2176
    STACKTOP = sp; //@line 2177
    return $$0 | 0; //@line 2177
   }
  }
 } while (0);
 $18 = $$pn + $8 << 4; //@line 2182
 $20 = HEAP8[$str + 2 >> 0] | 0; //@line 2184
 $21 = $20 & 255; //@line 2185
 do {
  if (($20 + -48 << 24 >> 24 & 255) < 10) {
   $$pn1 = $21 + -48 | 0; //@line 2191
  } else {
   if (($20 + -65 << 24 >> 24 & 255) < 6) {
    $$pn1 = $21 + -55 | 0; //@line 2197
    break;
   }
   if (($20 + -97 << 24 >> 24 & 255) < 6) {
    $$pn1 = $21 + -87 | 0; //@line 2204
    break;
   } else {
    $$0 = 0; //@line 2207
    STACKTOP = sp; //@line 2208
    return $$0 | 0; //@line 2208
   }
  }
 } while (0);
 $28 = $$pn1 + $18 << 4; //@line 2213
 $30 = HEAP8[$str + 3 >> 0] | 0; //@line 2215
 $31 = $30 & 255; //@line 2216
 do {
  if (($30 + -48 << 24 >> 24 & 255) < 10) {
   $$pn2 = $31 + -48 | 0; //@line 2222
  } else {
   if (($30 + -65 << 24 >> 24 & 255) < 6) {
    $$pn2 = $31 + -55 | 0; //@line 2228
    break;
   }
   if (($30 + -97 << 24 >> 24 & 255) < 6) {
    $$pn2 = $31 + -87 | 0; //@line 2235
    break;
   } else {
    $$0 = 0; //@line 2238
    STACKTOP = sp; //@line 2239
    return $$0 | 0; //@line 2239
   }
  }
 } while (0);
 $$0 = $$pn2 + $28 | 0; //@line 2244
 STACKTOP = sp; //@line 2245
 return $$0 | 0; //@line 2245
}
function _ot_iter_next($iter) {
 $iter = $iter | 0;
 var $$0$i = 0, $$pre2$i = 0, $0 = 0, $1 = 0, $11 = 0, $12 = 0, $21 = 0, $26 = 0, $29 = 0, $4 = 0, $7 = 0, $8 = 0, $i$0$be$i = 0, $max$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3562
 $0 = HEAP32[$iter >> 2] | 0; //@line 3563
 $1 = $0 + 44 | 0; //@line 3564
 if ((HEAP32[$1 >> 2] | 0) == 0) {
  $$0$i = 0; //@line 3568
  STACKTOP = sp; //@line 3569
  return $$0$i | 0; //@line 3569
 }
 $4 = $iter + 12 | 0; //@line 3571
 $7 = $iter + 4 | 0; //@line 3574
 if ((HEAP8[$4 >> 0] | 0) == 0) {
  HEAP32[$7 >> 2] = 0; //@line 3576
  HEAP32[$iter + 8 >> 2] = 0; //@line 3578
  HEAP8[$4 >> 0] = 1; //@line 3579
  $$0$i = 1; //@line 3580
  STACKTOP = sp; //@line 3581
  return $$0$i | 0; //@line 3581
 }
 $8 = $iter + 8 | 0; //@line 3583
 $$pre2$i = HEAP32[$0 + 56 >> 2] | 0; //@line 3586
 $11 = HEAP32[$7 >> 2] | 0; //@line 3587
 while (1) {
  $12 = HEAP32[$$pre2$i + ($11 * 36 | 0) >> 2] | 0; //@line 3590
  if (($12 | 0) == 2) {
   $max$0$i = HEAP32[$$pre2$i + ($11 * 36 | 0) + 4 >> 2] | 0; //@line 3594
  } else if (($12 | 0) == 0) {
   $max$0$i = HEAP32[$$pre2$i + ($11 * 36 | 0) + 4 >> 2] | 0; //@line 3598
  } else if (($12 | 0) == 1) {
   $max$0$i = _strlen(HEAP32[$$pre2$i + ($11 * 36 | 0) + 4 >> 2] | 0) | 0; //@line 3603
  } else {
   $max$0$i = 0; //@line 3605
  }
  $21 = (HEAP32[$8 >> 2] | 0) + 1 | 0; //@line 3608
  if ($21 >>> 0 < $max$0$i >>> 0) {
   HEAP32[$8 >> 2] = $21; //@line 3611
   $29 = $11; //@line 3614
   $i$0$be$i = ($21 | 0) == 0 ? $max$0$i : 1; //@line 3614
  } else {
   if (!($11 >>> 0 < ((HEAP32[$1 >> 2] | 0) + -1 | 0) >>> 0)) {
    $$0$i = 0; //@line 3620
    label = 14; //@line 3621
    break;
   }
   $26 = $11 + 1 | 0; //@line 3624
   HEAP32[$7 >> 2] = $26; //@line 3625
   HEAP32[$8 >> 2] = 0; //@line 3626
   $29 = $26; //@line 3627
   $i$0$be$i = $max$0$i; //@line 3627
  }
  if (($i$0$be$i | 0) == 0) {
   $11 = $29; //@line 3631
  } else {
   $$0$i = 1; //@line 3633
   label = 14; //@line 3634
   break;
  }
 }
 if ((label | 0) == 14) {
  STACKTOP = sp; //@line 3639
  return $$0$i | 0; //@line 3639
 }
 return 0; //@line 3641
}
function _MUSL_vfprintf($f, $fmt, $ap) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$ = 0, $$0 = 0, $11 = 0, $12 = 0, $2 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 10264
 STACKTOP = STACKTOP + 224 | 0; //@line 10265
 $ap2 = sp + 120 | 0; //@line 10266
 $nl_type = sp + 80 | 0; //@line 10267
 $nl_arg = sp; //@line 10268
 $internal_buf = sp + 136 | 0; //@line 10269
 dest = $nl_type + 0 | 0; //@line 10270
 stop = dest + 40 | 0; //@line 10270
 do {
  HEAP32[dest >> 2] = 0; //@line 10270
  dest = dest + 4 | 0; //@line 10270
 } while ((dest | 0) < (stop | 0));
 HEAP32[$ap2 >> 2] = HEAP32[$ap >> 2]; //@line 10272
 if ((_printf_core(0, $fmt, $ap2, $nl_arg, $nl_type) | 0) < 0) {
  $$0 = -1; //@line 10276
  STACKTOP = sp; //@line 10277
  return $$0 | 0; //@line 10277
 }
 $2 = $f + 48 | 0; //@line 10279
 if ((HEAP32[$2 >> 2] | 0) == 0) {
  $6 = $f + 44 | 0; //@line 10283
  $7 = HEAP32[$6 >> 2] | 0; //@line 10284
  HEAP32[$6 >> 2] = $internal_buf; //@line 10285
  $8 = $f + 28 | 0; //@line 10286
  HEAP32[$8 >> 2] = $internal_buf; //@line 10287
  $9 = $f + 20 | 0; //@line 10288
  HEAP32[$9 >> 2] = $internal_buf; //@line 10289
  HEAP32[$2 >> 2] = 80; //@line 10290
  $11 = $f + 16 | 0; //@line 10292
  HEAP32[$11 >> 2] = $internal_buf + 80; //@line 10293
  $12 = _printf_core($f, $fmt, $ap2, $nl_arg, $nl_type) | 0; //@line 10294
  if (($7 | 0) == 0) {
   $ret$1 = $12; //@line 10297
  } else {
   FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 15]($f, 0, 0) | 0; //@line 10301
   $$ = (HEAP32[$9 >> 2] | 0) == 0 ? -1 : $12; //@line 10304
   HEAP32[$6 >> 2] = $7; //@line 10305
   HEAP32[$2 >> 2] = 0; //@line 10306
   HEAP32[$11 >> 2] = 0; //@line 10307
   HEAP32[$8 >> 2] = 0; //@line 10308
   HEAP32[$9 >> 2] = 0; //@line 10309
   $ret$1 = $$; //@line 10310
  }
 } else {
  $ret$1 = _printf_core($f, $fmt, $ap2, $nl_arg, $nl_type) | 0; //@line 10314
 }
 $$0 = $ret$1; //@line 10316
 STACKTOP = sp; //@line 10317
 return $$0 | 0; //@line 10317
}
function ___fwritex($s, $l, $f) {
 $s = $s | 0;
 $l = $l | 0;
 $f = $f | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $19 = 0, $29 = 0, $5 = 0, $6 = 0, $8 = 0, $i$0 = 0, $i$1 = 0, sp = 0;
 sp = STACKTOP; //@line 10165
 $0 = $f + 16 | 0; //@line 10166
 $1 = HEAP32[$0 >> 2] | 0; //@line 10167
 do {
  if (($1 | 0) == 0) {
   if ((___towrite($f) | 0) == 0) {
    $8 = HEAP32[$0 >> 2] | 0; //@line 10175
    break;
   } else {
    $$0 = 0; //@line 10178
    STACKTOP = sp; //@line 10179
    return $$0 | 0; //@line 10179
   }
  } else {
   $8 = $1; //@line 10182
  }
 } while (0);
 $5 = $f + 20 | 0; //@line 10185
 $6 = HEAP32[$5 >> 2] | 0; //@line 10186
 if (($8 - $6 | 0) >>> 0 < $l >>> 0) {
  $$0 = FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 15]($f, $s, $l) | 0; //@line 10195
  STACKTOP = sp; //@line 10196
  return $$0 | 0; //@line 10196
 }
 L11 : do {
  if ((HEAP8[$f + 75 >> 0] | 0) > -1) {
   $i$0 = $l; //@line 10203
   while (1) {
    if (($i$0 | 0) == 0) {
     $$01 = $l; //@line 10207
     $$02 = $s; //@line 10207
     $29 = $6; //@line 10207
     $i$1 = 0; //@line 10207
     break L11;
    }
    $19 = $i$0 + -1 | 0; //@line 10210
    if ((HEAP8[$s + $19 >> 0] | 0) == 10) {
     break;
    } else {
     $i$0 = $19; //@line 10217
    }
   }
   if ((FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 15]($f, $s, $i$0) | 0) >>> 0 < $i$0 >>> 0) {
    $$0 = $i$0; //@line 10225
    STACKTOP = sp; //@line 10226
    return $$0 | 0; //@line 10226
   } else {
    $$01 = $l - $i$0 | 0; //@line 10231
    $$02 = $s + $i$0 | 0; //@line 10231
    $29 = HEAP32[$5 >> 2] | 0; //@line 10231
    $i$1 = $i$0; //@line 10231
    break;
   }
  } else {
   $$01 = $l; //@line 10235
   $$02 = $s; //@line 10235
   $29 = $6; //@line 10235
   $i$1 = 0; //@line 10235
  }
 } while (0);
 _memcpy($29 | 0, $$02 | 0, $$01 | 0) | 0; //@line 10238
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $$01; //@line 10241
 $$0 = $i$1 + $$01 | 0; //@line 10243
 STACKTOP = sp; //@line 10244
 return $$0 | 0; //@line 10244
}
function _ot_doc_compose_after($doc, $after) {
 $doc = $doc | 0;
 $after = $after | 0;
 var $$0 = 0, $0 = 0, $14 = 0, $2 = 0, $composed$0 = 0, $i$04 = 0, $i1$0 = 0, $i1$0$in = 0, $i2$0$in = 0, $start$1 = 0, label = 0, sp = 0, $composed$0$looptemp = 0;
 sp = STACKTOP; //@line 2933
 $0 = HEAP32[$doc >> 2] | 0; //@line 2934
 $2 = HEAP32[$doc + 12 >> 2] | 0; //@line 2936
 if (($0 | 0) == 0) {
  $$0 = 0; //@line 2939
  STACKTOP = sp; //@line 2940
  return $$0 | 0; //@line 2940
 } else {
  $i$04 = 0; //@line 2942
 }
 while (1) {
  if ((HEAP8[$after + $i$04 >> 0] | 0) != 0) {
   label = 5; //@line 2950
   break;
  }
  $i$04 = $i$04 + 1 | 0; //@line 2948
  if (($i$04 | 0) >= 20) {
   label = 3; //@line 2957
   break;
  }
 }
 L6 : do {
  if ((label | 0) == 3) {
   $14 = $2; //@line 2963
   $start$1 = 0; //@line 2963
  } else if ((label | 0) == 5) {
   $i1$0$in = $0; //@line 2966
   while (1) {
    $i1$0 = $i1$0$in + -1 | 0; //@line 2968
    if (!($i1$0 >>> 0 < $0 >>> 0)) {
     $$0 = 0; //@line 2971
     break;
    }
    if ((_memcmp($2 + ($i1$0 * 60 | 0) + 24 | 0, $after, 20) | 0) == 0) {
     $14 = $2; //@line 2978
     $start$1 = $i1$0$in; //@line 2978
     break L6;
    } else {
     $i1$0$in = $i1$0; //@line 2981
    }
   }
   STACKTOP = sp; //@line 2984
   return $$0 | 0; //@line 2984
  }
 } while (0);
 $composed$0 = _ot_dup_op($14 + ($start$1 * 60 | 0) | 0) | 0; //@line 2989
 $i2$0$in = $start$1; //@line 2989
 while (1) {
  $i2$0$in = $i2$0$in + 1 | 0; //@line 2991
  if (!($i2$0$in >>> 0 < $0 >>> 0)) {
   $$0 = $composed$0; //@line 2994
   label = 11; //@line 2995
   break;
  }
  $composed$0$looptemp = $composed$0;
  $composed$0 = _ot_compose($composed$0, $14 + ($i2$0$in * 60 | 0) | 0) | 0; //@line 2999
  _ot_free_op($composed$0$looptemp); //@line 3000
  if (($composed$0 | 0) == 0) {
   $$0 = 0; //@line 3003
   label = 11; //@line 3004
   break;
  }
 }
 if ((label | 0) == 11) {
  STACKTOP = sp; //@line 3011
  return $$0 | 0; //@line 3011
 }
 return 0; //@line 3013
}
function _ot_snapshot($op) {
 $op = $op | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $17 = 0, $2 = 0, $20 = 0, $3 = 0, $9 = 0, $i$01 = 0, $size$04 = 0, $size$1 = 0, $snapshot$0$lcssa6 = 0, $snapshot$02 = 0, $snapshot$1 = 0, $written$03 = 0, $written$1 = 0, sp = 0;
 sp = STACKTOP; //@line 3499
 $1 = HEAP32[$op + 56 >> 2] | 0; //@line 3501
 $2 = $op + 44 | 0; //@line 3502
 $3 = HEAP32[$2 >> 2] | 0; //@line 3503
 if (($3 | 0) == 0) {
  $snapshot$0$lcssa6 = 0; //@line 3506
  STACKTOP = sp; //@line 3507
  return $snapshot$0$lcssa6 | 0; //@line 3507
 } else {
  $20 = $3; //@line 3509
  $i$01 = 0; //@line 3509
  $size$04 = 1; //@line 3509
  $snapshot$02 = 0; //@line 3509
  $written$03 = 0; //@line 3509
 }
 while (1) {
  if ((HEAP32[$1 + ($i$01 * 36 | 0) >> 2] | 0) == 1) {
   $9 = HEAP32[$1 + ($i$01 * 36 | 0) + 4 >> 2] | 0; //@line 3517
   $10 = _strlen($9 | 0) | 0; //@line 3518
   $11 = $10 + $size$04 | 0; //@line 3519
   $12 = _realloc($snapshot$02, $11) | 0; //@line 3520
   _memcpy($12 + ($size$04 + -1) | 0, $9 | 0, $10 | 0) | 0; //@line 3523
   $17 = HEAP32[$2 >> 2] | 0; //@line 3526
   $size$1 = $11; //@line 3526
   $snapshot$1 = $12; //@line 3526
   $written$1 = $10 + $written$03 | 0; //@line 3526
  } else {
   $17 = $20; //@line 3528
   $size$1 = $size$04; //@line 3528
   $snapshot$1 = $snapshot$02; //@line 3528
   $written$1 = $written$03; //@line 3528
  }
  $i$01 = $i$01 + 1 | 0; //@line 3530
  if (!($i$01 >>> 0 < $17 >>> 0)) {
   break;
  } else {
   $20 = $17; //@line 3533
   $size$04 = $size$1; //@line 3533
   $snapshot$02 = $snapshot$1; //@line 3533
   $written$03 = $written$1; //@line 3533
  }
 }
 if (($snapshot$1 | 0) == 0) {
  $snapshot$0$lcssa6 = 0; //@line 3540
  STACKTOP = sp; //@line 3541
  return $snapshot$0$lcssa6 | 0; //@line 3541
 }
 HEAP8[$snapshot$1 + $written$1 >> 0] = 0; //@line 3544
 $snapshot$0$lcssa6 = $snapshot$1; //@line 3545
 STACKTOP = sp; //@line 3546
 return $snapshot$0$lcssa6 | 0; //@line 3546
}
function _vsnprintf($s, $n, $fmt, $ap) {
 $s = $s | 0;
 $n = $n | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $10 = 0, $11 = 0, $13 = 0, $15 = 0, $5 = 0, $8 = 0, $b = 0, $f = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 13304
 STACKTOP = STACKTOP + 128 | 0; //@line 13305
 $b = sp + 112 | 0; //@line 13306
 $f = sp; //@line 13307
 dest = $f + 0 | 0; //@line 13308
 src = 2168 | 0; //@line 13308
 stop = dest + 112 | 0; //@line 13308
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 13308
  dest = dest + 4 | 0; //@line 13308
  src = src + 4 | 0; //@line 13308
 } while ((dest | 0) < (stop | 0));
 if (($n + -1 | 0) >>> 0 > 2147483646) {
  if (($n | 0) == 0) {
   $$01 = $b; //@line 13314
   $$02 = 1; //@line 13314
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 13317
   $$0 = -1; //@line 13318
   STACKTOP = sp; //@line 13319
   return $$0 | 0; //@line 13319
  }
 } else {
  $$01 = $s; //@line 13322
  $$02 = $n; //@line 13322
 }
 $5 = -2 - $$01 | 0; //@line 13325
 $$$02 = $$02 >>> 0 > $5 >>> 0 ? $5 : $$02; //@line 13327
 HEAP32[$f + 48 >> 2] = $$$02; //@line 13329
 $8 = $f + 20 | 0; //@line 13330
 HEAP32[$8 >> 2] = $$01; //@line 13331
 HEAP32[$f + 44 >> 2] = $$01; //@line 13333
 $10 = $$01 + $$$02 | 0; //@line 13334
 $11 = $f + 16 | 0; //@line 13335
 HEAP32[$11 >> 2] = $10; //@line 13336
 HEAP32[$f + 28 >> 2] = $10; //@line 13338
 $13 = _MUSL_vfprintf($f, $fmt, $ap) | 0; //@line 13339
 if (($$$02 | 0) == 0) {
  $$0 = $13; //@line 13342
  STACKTOP = sp; //@line 13343
  return $$0 | 0; //@line 13343
 }
 $15 = HEAP32[$8 >> 2] | 0; //@line 13345
 HEAP8[$15 + ((($15 | 0) == (HEAP32[$11 >> 2] | 0)) << 31 >> 31) >> 0] = 0; //@line 13350
 $$0 = $13; //@line 13351
 STACKTOP = sp; //@line 13352
 return $$0 | 0; //@line 13352
}
function _cJSON_strcasecmp($s1, $s2) {
 $s1 = $s1 | 0;
 $s2 = $s2 | 0;
 var $$0$lcssa = 0, $$015 = 0, $$02 = 0, $$06 = 0, $$lcssa = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $21 = 0, $22 = 0, $24 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 1512
 if (($s1 | 0) == 0) {
  $$02 = ($s2 | 0) != 0 & 1; //@line 1517
  STACKTOP = sp; //@line 1518
  return $$02 | 0; //@line 1518
 }
 if (($s2 | 0) == 0) {
  $$02 = 1; //@line 1522
  STACKTOP = sp; //@line 1523
  return $$02 | 0; //@line 1523
 }
 $5 = _tolower(HEAPU8[$s1 >> 0] | 0) | 0; //@line 1527
 $9 = ($5 | 0) == (_tolower(HEAPU8[$s2 >> 0] | 0) | 0); //@line 1531
 $10 = HEAP8[$s1 >> 0] | 0; //@line 1532
 L8 : do {
  if ($9) {
   $$015 = $s1; //@line 1535
   $$06 = $s2; //@line 1535
   $12 = $10; //@line 1535
   while (1) {
    if ($12 << 24 >> 24 == 0) {
     $$02 = 0; //@line 1539
     break;
    }
    $$015 = $$015 + 1 | 0; //@line 1542
    $14 = $$06 + 1 | 0; //@line 1543
    $17 = _tolower(HEAPU8[$$015 >> 0] | 0) | 0; //@line 1546
    $21 = ($17 | 0) == (_tolower(HEAPU8[$14 >> 0] | 0) | 0); //@line 1550
    $22 = HEAP8[$$015 >> 0] | 0; //@line 1551
    if (!$21) {
     $$0$lcssa = $14; //@line 1555
     $$lcssa = $22; //@line 1555
     break L8;
    } else {
     $$06 = $14; //@line 1553
     $12 = $22; //@line 1553
    }
   }
   STACKTOP = sp; //@line 1559
   return $$02 | 0; //@line 1559
  } else {
   $$0$lcssa = $s2; //@line 1561
   $$lcssa = $10; //@line 1561
  }
 } while (0);
 $24 = _tolower($$lcssa & 255) | 0; //@line 1565
 $$02 = $24 - (_tolower(HEAPU8[$$0$lcssa >> 0] | 0) | 0) | 0; //@line 1570
 STACKTOP = sp; //@line 1571
 return $$02 | 0; //@line 1571
}
function _append_op($server, $op) {
 $server = $server | 0;
 $op = $op | 0;
 var $0 = 0, $10 = 0, $11 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 4175
 STACKTOP = STACKTOP + 16 | 0; //@line 4176
 $vararg_buffer5 = sp; //@line 4177
 $0 = sp + 8 | 0; //@line 4178
 HEAP32[$0 >> 2] = $op; //@line 4179
 $2 = HEAP32[$server + 8 >> 2] | 0; //@line 4181
 $4 = HEAP32[$2 + 16 >> 2] | 0; //@line 4183
 if (($4 | 0) == 0) {
  $6 = _ot_encode($op) | 0; //@line 4186
  $7 = HEAP32[_stderr >> 2] | 0; //@line 4187
  HEAP32[$vararg_buffer5 >> 2] = $6; //@line 4188
  _fprintf($7 | 0, 984, $vararg_buffer5 | 0) | 0; //@line 4189
  _free($6); //@line 4190
  $14 = $7; //@line 4191
 } else {
  $8 = _ot_encode($4) | 0; //@line 4193
  $10 = _ot_encode(HEAP32[$0 >> 2] | 0) | 0; //@line 4195
  $11 = HEAP32[_stderr >> 2] | 0; //@line 4196
  HEAP32[$vararg_buffer5 >> 2] = $8; //@line 4197
  HEAP32[$vararg_buffer5 + 4 >> 2] = $10; //@line 4199
  _fprintf($11 | 0, 1016, $vararg_buffer5 | 0) | 0; //@line 4200
  _free($8); //@line 4201
  _free($10); //@line 4202
  $14 = $11; //@line 4203
 }
 if ((_ot_doc_append($2, $0) | 0) == 0) {
  $16 = _ot_encode(HEAP32[$0 >> 2] | 0) | 0; //@line 4209
  FUNCTION_TABLE_ii[HEAP32[$server >> 2] & 15]($16) | 0; //@line 4211
  HEAP32[$vararg_buffer5 >> 2] = $16; //@line 4212
  _fprintf($14 | 0, 1072, $vararg_buffer5 | 0) | 0; //@line 4213
  _free($16); //@line 4214
  STACKTOP = sp; //@line 4215
  return;
 } else {
  _fwrite(1048, 22, 1, $14 | 0) | 0; //@line 4217
  STACKTOP = sp; //@line 4218
  return;
 }
}
function _atohex($hex, $a, $len) {
 $hex = $hex | 0;
 $a = $a | 0;
 $len = $len | 0;
 var $1 = 0, $16 = 0, $19 = 0, $25 = 0, $3 = 0, $32 = 0, $7 = 0, $8 = 0, $i$01 = 0, $j$0$lcssa = 0, $j$02 = 0, $j$1 = 0, sp = 0;
 sp = STACKTOP; //@line 3092
 if (($len | 0) == 0) {
  $j$0$lcssa = 0; //@line 3095
  $32 = $hex + $j$0$lcssa | 0; //@line 3096
  HEAP8[$32 >> 0] = 0; //@line 3097
  STACKTOP = sp; //@line 3098
  return 0; //@line 3098
 }
 $1 = $len + -1 | 0; //@line 3100
 $i$01 = 0; //@line 3101
 $j$02 = 0; //@line 3101
 while (1) {
  $3 = HEAP8[$a + $i$01 >> 0] | 0; //@line 3104
  if (($j$02 | 0) != 0 | $3 << 24 >> 24 != 0 | ($i$01 | 0) == ($1 | 0)) {
   $7 = $3 & 15; //@line 3113
   $8 = ($3 & 255) >>> 4 & 255; //@line 3114
   if (($3 & 255) < 160) {
    HEAP8[$hex + $j$02 >> 0] = $8 | 48; //@line 3120
   } else {
    HEAP8[$hex + $j$02 >> 0] = $8 + 87; //@line 3125
   }
   $16 = $j$02 + 1 | 0; //@line 3127
   if ($7 >>> 0 < 10) {
    $19 = $hex + $16 | 0; //@line 3131
    HEAP8[$19 >> 0] = (HEAPU8[$19 >> 0] | 0) + ($7 | 48); //@line 3136
   } else {
    $25 = $hex + $16 | 0; //@line 3139
    HEAP8[$25 >> 0] = $7 + 87 + (HEAPU8[$25 >> 0] | 0); //@line 3144
   }
   $j$1 = $j$02 + 2 | 0; //@line 3147
  } else {
   $j$1 = 0; //@line 3149
  }
  $i$01 = $i$01 + 1 | 0; //@line 3151
  if (($i$01 | 0) == ($len | 0)) {
   $j$0$lcssa = $j$1; //@line 3154
   break;
  } else {
   $j$02 = $j$1; //@line 3157
  }
 }
 $32 = $hex + $j$0$lcssa | 0; //@line 3160
 HEAP8[$32 >> 0] = 0; //@line 3161
 STACKTOP = sp; //@line 3162
 return 0; //@line 3162
}
function _wcrtomb($s, $wc, $st) {
 $s = $s | 0;
 $wc = $wc | 0;
 $st = $st | 0;
 var $$0 = 0, sp = 0;
 sp = STACKTOP; //@line 10033
 if (($s | 0) == 0) {
  $$0 = 1; //@line 10036
  STACKTOP = sp; //@line 10037
  return $$0 | 0; //@line 10037
 }
 if ($wc >>> 0 < 128) {
  HEAP8[$s >> 0] = $wc; //@line 10042
  $$0 = 1; //@line 10043
  STACKTOP = sp; //@line 10044
  return $$0 | 0; //@line 10044
 }
 if ($wc >>> 0 < 2048) {
  HEAP8[$s >> 0] = $wc >>> 6 | 192; //@line 10052
  HEAP8[$s + 1 >> 0] = $wc & 63 | 128; //@line 10056
  $$0 = 2; //@line 10057
  STACKTOP = sp; //@line 10058
  return $$0 | 0; //@line 10058
 }
 if ($wc >>> 0 < 55296 | ($wc + -57344 | 0) >>> 0 < 8192) {
  HEAP8[$s >> 0] = $wc >>> 12 | 224; //@line 10069
  HEAP8[$s + 1 >> 0] = $wc >>> 6 & 63 | 128; //@line 10075
  HEAP8[$s + 2 >> 0] = $wc & 63 | 128; //@line 10079
  $$0 = 3; //@line 10080
  STACKTOP = sp; //@line 10081
  return $$0 | 0; //@line 10081
 }
 if (($wc + -65536 | 0) >>> 0 < 1048576) {
  HEAP8[$s >> 0] = $wc >>> 18 | 240; //@line 10090
  HEAP8[$s + 1 >> 0] = $wc >>> 12 & 63 | 128; //@line 10096
  HEAP8[$s + 2 >> 0] = $wc >>> 6 & 63 | 128; //@line 10102
  HEAP8[$s + 3 >> 0] = $wc & 63 | 128; //@line 10106
  $$0 = 4; //@line 10107
  STACKTOP = sp; //@line 10108
  return $$0 | 0; //@line 10108
 } else {
  HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 10111
  $$0 = -1; //@line 10112
  STACKTOP = sp; //@line 10113
  return $$0 | 0; //@line 10113
 }
 return 0; //@line 10115
}
function _ot_free_comp($comp) {
 $comp = $comp | 0;
 var $0 = 0, $17 = 0, $19 = 0, $5 = 0, $7 = 0, $i$02$i = 0, $i1$01$i = 0, sp = 0;
 sp = STACKTOP; //@line 3215
 $0 = HEAP32[$comp >> 2] | 0; //@line 3216
 if (($0 | 0) == 3) {
  _free(HEAP32[$comp + 4 >> 2] | 0); //@line 3220
  STACKTOP = sp; //@line 3221
  return;
 } else if (($0 | 0) == 5) {
  $5 = $comp + 4 | 0; //@line 3223
  $7 = HEAP32[$comp + 16 >> 2] | 0; //@line 3225
  if ((HEAP32[$5 >> 2] | 0) != 0) {
   $i$02$i = 0; //@line 3229
   do {
    _free(HEAP32[$7 + ($i$02$i << 3) >> 2] | 0); //@line 3233
    _free(HEAP32[$7 + ($i$02$i << 3) + 4 >> 2] | 0); //@line 3236
    $i$02$i = $i$02$i + 1 | 0; //@line 3237
   } while ($i$02$i >>> 0 < (HEAP32[$5 >> 2] | 0) >>> 0);
  }
  _array_free($5); //@line 3247
  $17 = $comp + 20 | 0; //@line 3248
  $19 = HEAP32[$comp + 32 >> 2] | 0; //@line 3250
  if ((HEAP32[$17 >> 2] | 0) != 0) {
   $i1$01$i = 0; //@line 3254
   do {
    _free(HEAP32[$19 + ($i1$01$i << 3) >> 2] | 0); //@line 3258
    _free(HEAP32[$19 + ($i1$01$i << 3) + 4 >> 2] | 0); //@line 3261
    $i1$01$i = $i1$01$i + 1 | 0; //@line 3262
   } while ($i1$01$i >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0);
  }
  _array_free($17); //@line 3272
  STACKTOP = sp; //@line 3273
  return;
 } else if (($0 | 0) == 1) {
  _free(HEAP32[$comp + 4 >> 2] | 0); //@line 3277
  STACKTOP = sp; //@line 3278
  return;
 } else {
  STACKTOP = sp; //@line 3280
  return;
 }
}
function _array_append($arr) {
 $arr = $arr | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $10 = 0, $12 = 0, $15 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $5 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 76
 $0 = HEAP32[$arr >> 2] | 0; //@line 77
 $2 = $arr + 4 | 0; //@line 79
 do {
  if (($0 | 0) == 0) {
   HEAP32[$2 >> 2] = 1; //@line 82
   $3 = $arr + 8 | 0; //@line 83
   $5 = _malloc(HEAP32[$3 >> 2] | 0) | 0; //@line 85
   HEAP32[$arr + 12 >> 2] = $5; //@line 87
   $$pre$phiZ2D = $3; //@line 88
   $17 = 0; //@line 88
   $21 = $5; //@line 88
  } else {
   $7 = HEAP32[$2 >> 2] | 0; //@line 90
   if ($0 >>> 0 < $7 >>> 0) {
    $$pre$phiZ2D = $arr + 8 | 0; //@line 96
    $17 = $0; //@line 96
    $21 = HEAP32[$arr + 12 >> 2] | 0; //@line 96
    break;
   } else {
    $9 = $7 << 1; //@line 99
    HEAP32[$2 >> 2] = $9; //@line 100
    $10 = $arr + 12 | 0; //@line 101
    $12 = $arr + 8 | 0; //@line 103
    $15 = _realloc(HEAP32[$10 >> 2] | 0, Math_imul(HEAP32[$12 >> 2] | 0, $9) | 0) | 0; //@line 106
    HEAP32[$10 >> 2] = $15; //@line 107
    $$pre$phiZ2D = $12; //@line 109
    $17 = HEAP32[$arr >> 2] | 0; //@line 109
    $21 = $15; //@line 109
    break;
   }
  }
 } while (0);
 HEAP32[$arr >> 2] = $17 + 1; //@line 115
 $20 = $21 + (Math_imul(HEAP32[$$pre$phiZ2D >> 2] | 0, $17) | 0) | 0; //@line 118
 STACKTOP = sp; //@line 119
 return $20 | 0; //@line 119
}
function _strncmp($_l, $_r, $n) {
 $_l = $_l | 0;
 $_r = $_r | 0;
 $n = $n | 0;
 var $$03 = 0, $$08$in = 0, $1 = 0, $11 = 0, $3 = 0, $5 = 0, $7 = 0, $l$06 = 0, $r$0$lcssa = 0, $r$07 = 0, sp = 0;
 sp = STACKTOP; //@line 13551
 if (($n | 0) == 0) {
  $$03 = 0; //@line 13554
  STACKTOP = sp; //@line 13555
  return $$03 | 0; //@line 13555
 }
 $1 = HEAP8[$_l >> 0] | 0; //@line 13557
 L4 : do {
  if ($1 << 24 >> 24 == 0) {
   $11 = 0; //@line 13561
   $r$0$lcssa = $_r; //@line 13561
  } else {
   $$08$in = $n; //@line 13563
   $5 = $1; //@line 13563
   $l$06 = $_l; //@line 13563
   $r$07 = $_r; //@line 13563
   while (1) {
    $$08$in = $$08$in + -1 | 0; //@line 13565
    $3 = HEAP8[$r$07 >> 0] | 0; //@line 13566
    if (!(($$08$in | 0) != 0 & $3 << 24 >> 24 != 0 & $5 << 24 >> 24 == $3 << 24 >> 24)) {
     $11 = $5; //@line 13573
     $r$0$lcssa = $r$07; //@line 13573
     break L4;
    }
    $l$06 = $l$06 + 1 | 0; //@line 13576
    $7 = $r$07 + 1 | 0; //@line 13577
    $5 = HEAP8[$l$06 >> 0] | 0; //@line 13578
    if ($5 << 24 >> 24 == 0) {
     $11 = 0; //@line 13581
     $r$0$lcssa = $7; //@line 13581
     break;
    } else {
     $r$07 = $7; //@line 13584
    }
   }
  }
 } while (0);
 $$03 = ($11 & 255) - (HEAPU8[$r$0$lcssa >> 0] | 0) | 0; //@line 13593
 STACKTOP = sp; //@line 13594
 return $$03 | 0; //@line 13594
}
function _hextoa($a, $alen, $hex, $hexlen) {
 $a = $a | 0;
 $alen = $alen | 0;
 $hex = $hex | 0;
 $hexlen = $hexlen | 0;
 var $$pn = 0, $10 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $c$0$in = 0, $i$02 = 0, $j$01 = 0, sp = 0;
 sp = STACKTOP; //@line 3022
 if (($hexlen | 0) == 0) {
  STACKTOP = sp; //@line 3025
  return 0; //@line 3025
 }
 $i$02 = 0; //@line 3029
 $j$01 = $alen - ($hexlen >>> 1) | 0; //@line 3029
 while (1) {
  $4 = HEAP8[$hex + $i$02 >> 0] | 0; //@line 3032
  $5 = $4 & 255; //@line 3033
  if (($4 & 255) > 96) {
   $c$0$in = ($5 << 4) + -1392 | 0; //@line 3038
  } else {
   $10 = $5 << 4; //@line 3041
   $c$0$in = ($4 & 255) > 64 ? $10 + -880 | 0 : $10; //@line 3044
  }
  $14 = HEAP8[$hex + ($i$02 | 1) >> 0] | 0; //@line 3048
  $15 = $14 & 255; //@line 3049
  do {
   if (($14 & 255) > 96) {
    $$pn = ($c$0$in & 240) + -87 | 0; //@line 3055
   } else {
    if (($14 & 255) > 64) {
     $$pn = ($c$0$in & 240) + -55 | 0; //@line 3061
     break;
    } else {
     $$pn = $c$0$in + 208 | 0; //@line 3065
     break;
    }
   }
  } while (0);
  HEAP8[$a + $j$01 >> 0] = $$pn + $15; //@line 3073
  $i$02 = $i$02 + 2 | 0; //@line 3075
  if (!($i$02 >>> 0 < $hexlen >>> 0)) {
   break;
  } else {
   $j$01 = $j$01 + 1 | 0; //@line 3078
  }
 }
 STACKTOP = sp; //@line 3083
 return 0; //@line 3083
}
function _cJSON_AddItemToObject($object, $string, $item) {
 $object = $object | 0;
 $string = $string | 0;
 $item = $item | 0;
 var $$0$i = 0, $1 = 0, $10 = 0, $11 = 0, $13 = 0, $2 = 0, $6 = 0, $8 = 0, $c$0$i = 0, sp = 0;
 sp = STACKTOP; //@line 1610
 if (($item | 0) == 0) {
  STACKTOP = sp; //@line 1613
  return;
 }
 $1 = $item + 32 | 0; //@line 1615
 $2 = HEAP32[$1 >> 2] | 0; //@line 1616
 if (($2 | 0) != 0) {
  FUNCTION_TABLE_vi[HEAP32[6] & 15]($2); //@line 1620
 }
 $6 = (_strlen($string | 0) | 0) + 1 | 0; //@line 1623
 $8 = FUNCTION_TABLE_ii[HEAP32[4] & 15]($6) | 0; //@line 1625
 if (($8 | 0) == 0) {
  $$0$i = 0; //@line 1628
 } else {
  _memcpy($8 | 0, $string | 0, $6 | 0) | 0; //@line 1630
  $$0$i = $8; //@line 1631
 }
 HEAP32[$1 >> 2] = $$0$i; //@line 1633
 $10 = $object + 8 | 0; //@line 1634
 $11 = HEAP32[$10 >> 2] | 0; //@line 1635
 if (($11 | 0) == 0) {
  HEAP32[$10 >> 2] = $item; //@line 1638
  STACKTOP = sp; //@line 1639
  return;
 } else {
  $c$0$i = $11; //@line 1641
 }
 while (1) {
  $13 = HEAP32[$c$0$i >> 2] | 0; //@line 1644
  if (($13 | 0) == 0) {
   break;
  } else {
   $c$0$i = $13; //@line 1649
  }
 }
 HEAP32[$c$0$i >> 2] = $item; //@line 1652
 HEAP32[$item + 4 >> 2] = $c$0$i; //@line 1654
 STACKTOP = sp; //@line 1655
 return;
}
function _frexp($x, $e) {
 $x = +$x;
 $e = $e | 0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $2 = 0, $4 = 0, $7 = 0.0, $storemerge = 0, sp = 0;
 sp = STACKTOP; //@line 9970
 HEAPF64[tempDoublePtr >> 3] = $x; //@line 9971
 $0 = HEAP32[tempDoublePtr >> 2] | 0; //@line 9971
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 9972
 $2 = _bitshift64Lshr($0 | 0, $1 | 0, 52) | 0; //@line 9973
 $4 = $2 & 2047; //@line 9975
 if (($4 | 0) == 2047) {
  $$0 = $x; //@line 9977
  STACKTOP = sp; //@line 9978
  return +$$0;
 } else if (($4 | 0) == 0) {
  if ($x != 0.0) {
   $7 = +_frexp($x * 18446744073709552000.0, $e); //@line 9983
   $$01 = $7; //@line 9986
   $storemerge = (HEAP32[$e >> 2] | 0) + -64 | 0; //@line 9986
  } else {
   $$01 = $x; //@line 9988
   $storemerge = 0; //@line 9988
  }
  HEAP32[$e >> 2] = $storemerge; //@line 9990
  $$0 = $$01; //@line 9991
  STACKTOP = sp; //@line 9992
  return +$$0;
 } else {
  HEAP32[$e >> 2] = $4 + -1022; //@line 9995
  HEAP32[tempDoublePtr >> 2] = $0; //@line 9998
  HEAP32[tempDoublePtr + 4 >> 2] = $1 & -2146435073 | 1071644672; //@line 9998
  $$0 = +HEAPF64[tempDoublePtr >> 3]; //@line 9999
  STACKTOP = sp; //@line 10000
  return +$$0;
 }
 return 0.0;
}
function _cJSON_Parse($value) {
 $value = $value | 0;
 var $$0$i = 0, $$0$lcssa$i$i = 0, $$01$i$i = 0, $1 = 0, $4 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 786
 $1 = FUNCTION_TABLE_ii[HEAP32[4] & 15](40) | 0; //@line 788
 if (($1 | 0) == 0) {
  HEAP32[2] = 0; //@line 791
  $$0$i = 0; //@line 792
  STACKTOP = sp; //@line 793
  return $$0$i | 0; //@line 793
 }
 dest = $1 + 0 | 0; //@line 795
 stop = dest + 40 | 0; //@line 795
 do {
  HEAP32[dest >> 2] = 0; //@line 795
  dest = dest + 4 | 0; //@line 795
 } while ((dest | 0) < (stop | 0));
 HEAP32[2] = 0; //@line 796
 if (($value | 0) == 0) {
  $$0$lcssa$i$i = 0; //@line 799
 } else {
  $$01$i$i = $value; //@line 801
  while (1) {
   $4 = HEAP8[$$01$i$i >> 0] | 0; //@line 803
   if (($4 & 255) < 33 & $4 << 24 >> 24 != 0) {
    $$01$i$i = $$01$i$i + 1 | 0; //@line 809
   } else {
    $$0$lcssa$i$i = $$01$i$i; //@line 811
    break;
   }
  }
 }
 if ((_parse_value($1, $$0$lcssa$i$i) | 0) != 0) {
  $$0$i = $1; //@line 819
  STACKTOP = sp; //@line 820
  return $$0$i | 0; //@line 820
 }
 _cJSON_Delete($1); //@line 822
 $$0$i = 0; //@line 823
 STACKTOP = sp; //@line 824
 return $$0$i | 0; //@line 824
}
function _realloc($oldmem, $bytes) {
 $oldmem = $oldmem | 0;
 $bytes = $bytes | 0;
 var $12 = 0, $15 = 0, $20 = 0, $8 = 0, $9 = 0, $mem$0 = 0, sp = 0;
 sp = STACKTOP; //@line 8666
 do {
  if (($oldmem | 0) == 0) {
   $mem$0 = _malloc($bytes) | 0; //@line 8671
  } else {
   if ($bytes >>> 0 > 4294967231) {
    HEAP32[(___errno_location() | 0) >> 2] = 12; //@line 8676
    $mem$0 = 0; //@line 8677
    break;
   }
   if ($bytes >>> 0 < 11) {
    $8 = 16; //@line 8682
   } else {
    $8 = $bytes + 11 & -8; //@line 8686
   }
   $9 = _try_realloc_chunk($oldmem + -8 | 0, $8) | 0; //@line 8689
   if (($9 | 0) != 0) {
    $mem$0 = $9 + 8 | 0; //@line 8693
    break;
   }
   $12 = _malloc($bytes) | 0; //@line 8696
   if (($12 | 0) == 0) {
    $mem$0 = 0; //@line 8699
   } else {
    $15 = HEAP32[$oldmem + -4 >> 2] | 0; //@line 8702
    $20 = ($15 & -8) - (($15 & 3 | 0) == 0 ? 8 : 4) | 0; //@line 8707
    _memcpy($12 | 0, $oldmem | 0, ($20 >>> 0 < $bytes >>> 0 ? $20 : $bytes) | 0) | 0; //@line 8710
    _free($oldmem); //@line 8711
    $mem$0 = $12; //@line 8712
   }
  }
 } while (0);
 STACKTOP = sp; //@line 8716
 return $mem$0 | 0; //@line 8716
}
function _cJSON_Delete($c) {
 $c = $c | 0;
 var $$01 = 0, $10 = 0, $13 = 0, $17 = 0, $2 = 0, $3 = 0, $7 = 0, sp = 0, $$01$looptemp = 0;
 sp = STACKTOP; //@line 125
 if (($c | 0) == 0) {
  STACKTOP = sp; //@line 128
  return;
 } else {
  $$01 = $c; //@line 130
 }
 do {
  $$01$looptemp = $$01;
  $$01 = HEAP32[$$01 >> 2] | 0; //@line 133
  $2 = $$01$looptemp + 12 | 0; //@line 134
  $3 = HEAP32[$2 >> 2] | 0; //@line 135
  if (($3 & 256 | 0) == 0) {
   $7 = HEAP32[$$01$looptemp + 8 >> 2] | 0; //@line 140
   if (($7 | 0) == 0) {
    $10 = $3; //@line 143
   } else {
    _cJSON_Delete($7); //@line 145
    $10 = HEAP32[$2 >> 2] | 0; //@line 147
   }
  } else {
   $10 = $3; //@line 150
  }
  if (($10 & 256 | 0) == 0) {
   $13 = HEAP32[$$01$looptemp + 16 >> 2] | 0; //@line 156
   if (($13 | 0) != 0) {
    FUNCTION_TABLE_vi[HEAP32[6] & 15]($13); //@line 160
   }
  }
  $17 = HEAP32[$$01$looptemp + 32 >> 2] | 0; //@line 164
  if (($17 | 0) != 0) {
   FUNCTION_TABLE_vi[HEAP32[6] & 15]($17); //@line 168
  }
  FUNCTION_TABLE_vi[HEAP32[6] & 15]($$01$looptemp); //@line 171
 } while (($$01 | 0) != 0);
 STACKTOP = sp; //@line 179
 return;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP; //@line 13801
 STACKTOP = STACKTOP + 8 | 0; //@line 13802
 $rem = __stackBase__ | 0; //@line 13803
 $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1; //@line 13804
 $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1; //@line 13805
 $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1; //@line 13806
 $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1; //@line 13807
 $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0; //@line 13808
 $4$1 = tempRet0; //@line 13809
 ___udivmoddi4($4$0, $4$1, _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0, tempRet0, $rem) | 0; //@line 13811
 $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0; //@line 13812
 $10$1 = tempRet0; //@line 13813
 STACKTOP = __stackBase__; //@line 13814
 return (tempRet0 = $10$1, $10$0) | 0; //@line 13815
}
function _ot_insert($op, $text) {
 $op = $op | 0;
 $text = $text | 0;
 var $0 = 0, $10 = 0, $11 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 3431
 $0 = $op + 44 | 0; //@line 3432
 $2 = HEAP32[$op + 56 >> 2] | 0; //@line 3434
 $3 = HEAP32[$0 >> 2] | 0; //@line 3435
 $4 = $3 + -1 | 0; //@line 3436
 if (($3 | 0) != 0) {
  if ((HEAP32[$2 + ($4 * 36 | 0) >> 2] | 0) == 1) {
   $9 = $2 + ($4 * 36 | 0) + 4 | 0; //@line 3443
   $10 = HEAP32[$9 >> 2] | 0; //@line 3444
   $11 = _strlen($10 | 0) | 0; //@line 3445
   $15 = _realloc($10, $11 + 1 + (_strlen($text | 0) | 0) | 0) | 0; //@line 3449
   HEAP32[$9 >> 2] = $15; //@line 3451
   _strcat($15 | 0, $text | 0) | 0; //@line 3452
   STACKTOP = sp; //@line 3453
   return;
  }
 }
 $16 = _array_append($0) | 0; //@line 3456
 HEAP32[$16 >> 2] = 1; //@line 3457
 $18 = (_strlen($text | 0) | 0) + 1 | 0; //@line 3459
 $19 = _malloc($18) | 0; //@line 3460
 HEAP32[$16 + 4 >> 2] = $19; //@line 3462
 _memcpy($19 | 0, $text | 0, $18 | 0) | 0; //@line 3463
 STACKTOP = sp; //@line 3464
 return;
}
function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((num | 0) >= 4096) return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0; //@line 13670
 ret = dest | 0; //@line 13671
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if ((num | 0) == 0) return ret | 0; //@line 13674
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 13675
   dest = dest + 1 | 0; //@line 13676
   src = src + 1 | 0; //@line 13677
   num = num - 1 | 0; //@line 13678
  }
  while ((num | 0) >= 4) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 13681
   dest = dest + 4 | 0; //@line 13682
   src = src + 4 | 0; //@line 13683
   num = num - 4 | 0; //@line 13684
  }
 }
 while ((num | 0) > 0) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 13688
  dest = dest + 1 | 0; //@line 13689
  src = src + 1 | 0; //@line 13690
  num = num - 1 | 0; //@line 13691
 }
 return ret | 0; //@line 13693
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $7$0 = 0, $7$1 = 0, $10$0 = 0;
 $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1; //@line 13782
 $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1; //@line 13783
 $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1; //@line 13784
 $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1; //@line 13785
 $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0; //@line 13786
 $4$1 = tempRet0; //@line 13787
 $7$0 = $2$0 ^ $1$0; //@line 13789
 $7$1 = $2$1 ^ $1$1; //@line 13790
 $10$0 = _i64Subtract((___udivmoddi4($4$0, $4$1, _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0, tempRet0, 0) | 0) ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0; //@line 13792
 return $10$0 | 0; //@line 13793
}
function _cJSON_CreateString($string) {
 $string = $string | 0;
 var $$0$i = 0, $1 = 0, $5 = 0, $7 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 1680
 $1 = FUNCTION_TABLE_ii[HEAP32[4] & 15](40) | 0; //@line 1682
 if (($1 | 0) == 0) {
  STACKTOP = sp; //@line 1685
  return $1 | 0; //@line 1685
 }
 dest = $1 + 0 | 0; //@line 1687
 stop = dest + 40 | 0; //@line 1687
 do {
  HEAP32[dest >> 2] = 0; //@line 1687
  dest = dest + 4 | 0; //@line 1687
 } while ((dest | 0) < (stop | 0));
 HEAP32[$1 + 12 >> 2] = 4; //@line 1689
 $5 = (_strlen($string | 0) | 0) + 1 | 0; //@line 1691
 $7 = FUNCTION_TABLE_ii[HEAP32[4] & 15]($5) | 0; //@line 1693
 if (($7 | 0) == 0) {
  $$0$i = 0; //@line 1696
 } else {
  _memcpy($7 | 0, $string | 0, $5 | 0) | 0; //@line 1698
  $$0$i = $7; //@line 1699
 }
 HEAP32[$1 + 16 >> 2] = $$0$i; //@line 1702
 STACKTOP = sp; //@line 1703
 return $1 | 0; //@line 1703
}
function ___towrite($f) {
 $f = $f | 0;
 var $$0 = 0, $0 = 0, $13 = 0, $2 = 0, $6 = 0, sp = 0;
 sp = STACKTOP; //@line 10121
 $0 = $f + 74 | 0; //@line 10122
 $2 = HEAP8[$0 >> 0] | 0; //@line 10124
 HEAP8[$0 >> 0] = $2 + 255 | $2; //@line 10128
 $6 = HEAP32[$f >> 2] | 0; //@line 10129
 if (($6 & 8 | 0) == 0) {
  HEAP32[$f + 8 >> 2] = 0; //@line 10134
  HEAP32[$f + 4 >> 2] = 0; //@line 10136
  $13 = HEAP32[$f + 44 >> 2] | 0; //@line 10138
  HEAP32[$f + 28 >> 2] = $13; //@line 10140
  HEAP32[$f + 20 >> 2] = $13; //@line 10142
  HEAP32[$f + 16 >> 2] = $13 + (HEAP32[$f + 48 >> 2] | 0); //@line 10147
  $$0 = 0; //@line 10148
  STACKTOP = sp; //@line 10149
  return $$0 | 0; //@line 10149
 } else {
  HEAP32[$f >> 2] = $6 | 32; //@line 10152
  $$0 = -1; //@line 10153
  STACKTOP = sp; //@line 10154
  return $$0 | 0; //@line 10154
 }
 return 0; //@line 10156
}
function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
 stop = ptr + num | 0; //@line 13610
 if ((num | 0) >= 20) {
  value = value & 255; //@line 13613
  unaligned = ptr & 3; //@line 13614
  value4 = value | value << 8 | value << 16 | value << 24; //@line 13615
  stop4 = stop & ~3; //@line 13616
  if (unaligned) {
   unaligned = ptr + 4 - unaligned | 0; //@line 13618
   while ((ptr | 0) < (unaligned | 0)) {
    HEAP8[ptr >> 0] = value; //@line 13620
    ptr = ptr + 1 | 0; //@line 13621
   }
  }
  while ((ptr | 0) < (stop4 | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 13625
   ptr = ptr + 4 | 0; //@line 13626
  }
 }
 while ((ptr | 0) < (stop | 0)) {
  HEAP8[ptr >> 0] = value; //@line 13630
  ptr = ptr + 1 | 0; //@line 13631
 }
 return ptr - num | 0; //@line 13633
}
function _memcmp($vl, $vr, $n) {
 $vl = $vl | 0;
 $vr = $vr | 0;
 $n = $n | 0;
 var $$03 = 0, $1 = 0, $11 = 0, $2 = 0, $l$04 = 0, $r$05 = 0, sp = 0;
 sp = STACKTOP; //@line 13512
 L1 : do {
  if (($n | 0) == 0) {
   $11 = 0; //@line 13516
  } else {
   $$03 = $n; //@line 13518
   $l$04 = $vl; //@line 13518
   $r$05 = $vr; //@line 13518
   while (1) {
    $1 = HEAP8[$l$04 >> 0] | 0; //@line 13520
    $2 = HEAP8[$r$05 >> 0] | 0; //@line 13521
    if (!($1 << 24 >> 24 == $2 << 24 >> 24)) {
     break;
    }
    $$03 = $$03 + -1 | 0; //@line 13526
    if (($$03 | 0) == 0) {
     $11 = 0; //@line 13531
     break L1;
    } else {
     $l$04 = $l$04 + 1 | 0; //@line 13534
     $r$05 = $r$05 + 1 | 0; //@line 13534
    }
   }
   $11 = ($1 & 255) - ($2 & 255) | 0; //@line 13540
  }
 } while (0);
 STACKTOP = sp; //@line 13543
 return $11 | 0; //@line 13543
}
function _ot_new_op($client_id, $parent) {
 $client_id = $client_id | 0;
 $parent = $parent | 0;
 var $0 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 3168
 $0 = _malloc(60) | 0; //@line 3169
 HEAP32[$0 >> 2] = $client_id; //@line 3170
 _array_init($0 + 44 | 0, 36); //@line 3172
 dest = $0 + 4 | 0; //@line 3174
 src = $parent + 0 | 0; //@line 3174
 stop = dest + 20 | 0; //@line 3174
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 3174
  dest = dest + 1 | 0; //@line 3174
  src = src + 1 | 0; //@line 3174
 } while ((dest | 0) < (stop | 0));
 dest = $0 + 24 | 0; //@line 3176
 stop = dest + 20 | 0; //@line 3176
 do {
  HEAP8[dest >> 0] = 0; //@line 3176
  dest = dest + 1 | 0; //@line 3176
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp; //@line 3177
 return $0 | 0; //@line 3177
}
function _cJSON_GetArrayItem($array, $item) {
 $array = $array | 0;
 $item = $item | 0;
 var $$03 = 0, $c$0 = 0, $c$0$lcssa = 0, $c$01 = 0, $c$04 = 0, sp = 0;
 sp = STACKTOP; //@line 1445
 $c$01 = HEAP32[$array + 8 >> 2] | 0; //@line 1447
 if (($c$01 | 0) != 0 & ($item | 0) > 0) {
  $$03 = $item; //@line 1452
  $c$04 = $c$01; //@line 1452
 } else {
  $c$0$lcssa = $c$01; //@line 1454
  STACKTOP = sp; //@line 1455
  return $c$0$lcssa | 0; //@line 1455
 }
 while (1) {
  $$03 = $$03 + -1 | 0; //@line 1458
  $c$0 = HEAP32[$c$04 >> 2] | 0; //@line 1459
  if (!(($c$0 | 0) != 0 & ($$03 | 0) > 0)) {
   $c$0$lcssa = $c$0; //@line 1466
   break;
  } else {
   $c$04 = $c$0; //@line 1464
  }
 }
 STACKTOP = sp; //@line 1470
 return $c$0$lcssa | 0; //@line 1470
}
function _ot_delete($op, $count) {
 $op = $op | 0;
 $count = $count | 0;
 var $0 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 3470
 $0 = $op + 44 | 0; //@line 3471
 $2 = HEAP32[$op + 56 >> 2] | 0; //@line 3473
 $3 = HEAP32[$0 >> 2] | 0; //@line 3474
 $4 = $3 + -1 | 0; //@line 3475
 if (($3 | 0) != 0) {
  if ((HEAP32[$2 + ($4 * 36 | 0) >> 2] | 0) == 2) {
   $9 = $2 + ($4 * 36 | 0) + 4 | 0; //@line 3482
   HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + $count; //@line 3485
   STACKTOP = sp; //@line 3486
   return;
  }
 }
 $12 = _array_append($0) | 0; //@line 3489
 HEAP32[$12 >> 2] = 2; //@line 3490
 HEAP32[$12 + 4 >> 2] = $count; //@line 3492
 STACKTOP = sp; //@line 3493
 return;
}
function _ot_skip($op, $count) {
 $op = $op | 0;
 $count = $count | 0;
 var $0 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 3401
 $0 = $op + 44 | 0; //@line 3402
 $2 = HEAP32[$op + 56 >> 2] | 0; //@line 3404
 $3 = HEAP32[$0 >> 2] | 0; //@line 3405
 $4 = $3 + -1 | 0; //@line 3406
 if (($3 | 0) != 0) {
  if ((HEAP32[$2 + ($4 * 36 | 0) >> 2] | 0) == 0) {
   $9 = $2 + ($4 * 36 | 0) + 4 | 0; //@line 3413
   HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + $count; //@line 3416
   STACKTOP = sp; //@line 3417
   return;
  }
 }
 $12 = _array_append($0) | 0; //@line 3420
 HEAP32[$12 >> 2] = 0; //@line 3421
 HEAP32[$12 + 4 >> 2] = $count; //@line 3423
 STACKTOP = sp; //@line 3424
 return;
}
function _cJSON_GetObjectItem($object, $string) {
 $object = $object | 0;
 $string = $string | 0;
 var $c$0$lcssa = 0, $c$01 = 0, $c$02 = 0, sp = 0;
 sp = STACKTOP; //@line 1476
 $c$01 = HEAP32[$object + 8 >> 2] | 0; //@line 1478
 L1 : do {
  if (($c$01 | 0) == 0) {
   $c$0$lcssa = 0; //@line 1482
  } else {
   $c$02 = $c$01; //@line 1484
   while (1) {
    if ((_cJSON_strcasecmp(HEAP32[$c$02 + 32 >> 2] | 0, $string) | 0) == 0) {
     $c$0$lcssa = $c$02; //@line 1491
     break L1;
    }
    $c$02 = HEAP32[$c$02 >> 2] | 0; //@line 1494
    if (($c$02 | 0) == 0) {
     $c$0$lcssa = 0; //@line 1497
     break;
    }
   }
  }
 } while (0);
 STACKTOP = sp; //@line 1505
 return $c$0$lcssa | 0; //@line 1505
}
function _cJSON_AddItemToArray($array, $item) {
 $array = $array | 0;
 $item = $item | 0;
 var $0 = 0, $1 = 0, $4 = 0, $c$0 = 0, sp = 0;
 sp = STACKTOP; //@line 1577
 $0 = $array + 8 | 0; //@line 1578
 $1 = HEAP32[$0 >> 2] | 0; //@line 1579
 if (($item | 0) == 0) {
  STACKTOP = sp; //@line 1582
  return;
 }
 if (($1 | 0) == 0) {
  HEAP32[$0 >> 2] = $item; //@line 1586
  STACKTOP = sp; //@line 1587
  return;
 } else {
  $c$0 = $1; //@line 1589
 }
 while (1) {
  $4 = HEAP32[$c$0 >> 2] | 0; //@line 1592
  if (($4 | 0) == 0) {
   break;
  } else {
   $c$0 = $4; //@line 1597
  }
 }
 HEAP32[$c$0 >> 2] = $item; //@line 1600
 HEAP32[$item + 4 >> 2] = $c$0; //@line 1602
 STACKTOP = sp; //@line 1603
 return;
}
function _cJSON_CreateNumber($num) {
 $num = +$num;
 var $1 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 1660
 $1 = FUNCTION_TABLE_ii[HEAP32[4] & 15](40) | 0; //@line 1662
 if (($1 | 0) == 0) {
  STACKTOP = sp; //@line 1665
  return $1 | 0; //@line 1665
 }
 dest = $1 + 0 | 0; //@line 1667
 stop = dest + 40 | 0; //@line 1667
 do {
  HEAP32[dest >> 2] = 0; //@line 1667
  dest = dest + 4 | 0; //@line 1667
 } while ((dest | 0) < (stop | 0));
 HEAP32[$1 + 12 >> 2] = 3; //@line 1669
 HEAPF64[$1 + 24 >> 3] = $num; //@line 1671
 HEAP32[$1 + 20 >> 2] = ~~$num; //@line 1674
 STACKTOP = sp; //@line 1675
 return $1 | 0; //@line 1675
}
function _cJSON_GetArraySize($array) {
 $array = $array | 0;
 var $2 = 0, $c$01 = 0, $c$03 = 0, $i$0$lcssa = 0, $i$02 = 0, sp = 0;
 sp = STACKTOP; //@line 1419
 $c$01 = HEAP32[$array + 8 >> 2] | 0; //@line 1421
 if (($c$01 | 0) == 0) {
  $i$0$lcssa = 0; //@line 1424
 } else {
  $c$03 = $c$01; //@line 1426
  $i$02 = 0; //@line 1426
  while (1) {
   $2 = $i$02 + 1 | 0; //@line 1428
   $c$03 = HEAP32[$c$03 >> 2] | 0; //@line 1429
   if (($c$03 | 0) == 0) {
    $i$0$lcssa = $2; //@line 1432
    break;
   } else {
    $i$02 = $2; //@line 1435
   }
  }
 }
 STACKTOP = sp; //@line 1439
 return $i$0$lcssa | 0; //@line 1439
}
function _ot_free_op($op) {
 $op = $op | 0;
 var $0 = 0, $2 = 0, $i$01 = 0, sp = 0;
 sp = STACKTOP; //@line 3182
 $0 = $op + 44 | 0; //@line 3183
 $2 = HEAP32[$op + 56 >> 2] | 0; //@line 3185
 if ((HEAP32[$0 >> 2] | 0) == 0) {
  _array_free($0); //@line 3189
  _free($op); //@line 3190
  STACKTOP = sp; //@line 3191
  return;
 } else {
  $i$01 = 0; //@line 3193
 }
 do {
  _ot_free_comp($2 + ($i$01 * 36 | 0) | 0); //@line 3197
  $i$01 = $i$01 + 1 | 0; //@line 3198
 } while ($i$01 >>> 0 < (HEAP32[$0 >> 2] | 0) >>> 0);
 _array_free($0); //@line 3207
 _free($op); //@line 3208
 STACKTOP = sp; //@line 3209
 return;
}
function _ot_new_client($send, $event, $id) {
 $send = $send | 0;
 $event = $event | 0;
 $id = $id | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP; //@line 2252
 $0 = _malloc(36) | 0; //@line 2253
 HEAP32[$0 + 28 >> 2] = 0; //@line 2255
 HEAP32[$0 + 20 >> 2] = 0; //@line 2257
 HEAP32[$0 >> 2] = $send; //@line 2258
 HEAP32[$0 + 4 >> 2] = $event; //@line 2260
 HEAP32[$0 + 8 >> 2] = 0; //@line 2262
 HEAP32[$0 + 12 >> 2] = $id; //@line 2264
 HEAP8[$0 + 16 >> 0] = 0; //@line 2266
 HEAP8[$0 + 24 >> 0] = 0; //@line 2268
 HEAP8[$0 + 32 >> 0] = 0; //@line 2270
 STACKTOP = sp; //@line 2271
 return $0 | 0; //@line 2271
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0; //@line 13823
 $y_sroa_0_0_extract_trunc = $b$0; //@line 13824
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0; //@line 13825
 $1$1 = tempRet0; //@line 13826
 return (tempRet0 = (Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0, $1$0 | 0 | 0) | 0; //@line 13828
}
function copyTempDouble(ptr) {
 ptr = ptr | 0;
 HEAP8[tempDoublePtr >> 0] = HEAP8[ptr >> 0]; //@line 32
 HEAP8[tempDoublePtr + 1 >> 0] = HEAP8[ptr + 1 >> 0]; //@line 33
 HEAP8[tempDoublePtr + 2 >> 0] = HEAP8[ptr + 2 >> 0]; //@line 34
 HEAP8[tempDoublePtr + 3 >> 0] = HEAP8[ptr + 3 >> 0]; //@line 35
 HEAP8[tempDoublePtr + 4 >> 0] = HEAP8[ptr + 4 >> 0]; //@line 36
 HEAP8[tempDoublePtr + 5 >> 0] = HEAP8[ptr + 5 >> 0]; //@line 37
 HEAP8[tempDoublePtr + 6 >> 0] = HEAP8[ptr + 6 >> 0]; //@line 38
 HEAP8[tempDoublePtr + 7 >> 0] = HEAP8[ptr + 7 >> 0]; //@line 39
}
function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535; //@line 13767
 $2 = $b & 65535; //@line 13768
 $3 = Math_imul($2, $1) | 0; //@line 13769
 $6 = $a >>> 16; //@line 13770
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0; //@line 13771
 $11 = $b >>> 16; //@line 13772
 $12 = Math_imul($11, $1) | 0; //@line 13773
 return (tempRet0 = ($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, $8 + $12 << 16 | $3 & 65535 | 0) | 0; //@line 13774
}
function _cJSON_CreateObject() {
 var $1 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 1721
 $1 = FUNCTION_TABLE_ii[HEAP32[4] & 15](40) | 0; //@line 1723
 if (($1 | 0) == 0) {
  STACKTOP = sp; //@line 1726
  return $1 | 0; //@line 1726
 }
 dest = $1 + 0 | 0; //@line 1728
 stop = dest + 40 | 0; //@line 1728
 do {
  HEAP32[dest >> 2] = 0; //@line 1728
  dest = dest + 4 | 0; //@line 1728
 } while ((dest | 0) < (stop | 0));
 HEAP32[$1 + 12 >> 2] = 6; //@line 1730
 STACKTOP = sp; //@line 1731
 return $1 | 0; //@line 1731
}
function _cJSON_CreateArray() {
 var $1 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 1707
 $1 = FUNCTION_TABLE_ii[HEAP32[4] & 15](40) | 0; //@line 1709
 if (($1 | 0) == 0) {
  STACKTOP = sp; //@line 1712
  return $1 | 0; //@line 1712
 }
 dest = $1 + 0 | 0; //@line 1714
 stop = dest + 40 | 0; //@line 1714
 do {
  HEAP32[dest >> 2] = 0; //@line 1714
  dest = dest + 4 | 0; //@line 1714
 } while ((dest | 0) < (stop | 0));
 HEAP32[$1 + 12 >> 2] = 5; //@line 1716
 STACKTOP = sp; //@line 1717
 return $1 | 0; //@line 1717
}
function _sn_write($f, $s, $l) {
 $f = $f | 0;
 $s = $s | 0;
 $l = $l | 0;
 var $2 = 0, $3 = 0, $6 = 0, $l$ = 0, sp = 0;
 sp = STACKTOP; //@line 13359
 $2 = $f + 20 | 0; //@line 13362
 $3 = HEAP32[$2 >> 2] | 0; //@line 13363
 $6 = (HEAP32[$f + 16 >> 2] | 0) - $3 | 0; //@line 13366
 $l$ = $6 >>> 0 > $l >>> 0 ? $l : $6; //@line 13368
 _memcpy($3 | 0, $s | 0, $l$ | 0) | 0; //@line 13369
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $l$; //@line 13372
 STACKTOP = sp; //@line 13373
 return $l | 0; //@line 13373
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP; //@line 13845
 STACKTOP = STACKTOP + 8 | 0; //@line 13846
 $rem = __stackBase__ | 0; //@line 13847
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0; //@line 13848
 STACKTOP = __stackBase__; //@line 13849
 return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0; //@line 13850
}
function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[cttz_i8 + (x & 255) >> 0] | 0; //@line 13753
 if ((ret | 0) < 8) return ret | 0; //@line 13754
 ret = HEAP8[cttz_i8 + (x >> 8 & 255) >> 0] | 0; //@line 13755
 if ((ret | 0) < 8) return ret + 8 | 0; //@line 13756
 ret = HEAP8[cttz_i8 + (x >> 16 & 255) >> 0] | 0; //@line 13757
 if ((ret | 0) < 8) return ret + 16 | 0; //@line 13758
 return (HEAP8[cttz_i8 + (x >>> 24) >> 0] | 0) + 24 | 0; //@line 13759
}
function _llvm_ctlz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[ctlz_i8 + (x >>> 24) >> 0] | 0; //@line 13741
 if ((ret | 0) < 8) return ret | 0; //@line 13742
 ret = HEAP8[ctlz_i8 + (x >> 16 & 255) >> 0] | 0; //@line 13743
 if ((ret | 0) < 8) return ret + 8 | 0; //@line 13744
 ret = HEAP8[ctlz_i8 + (x >> 8 & 255) >> 0] | 0; //@line 13745
 if ((ret | 0) < 8) return ret + 16 | 0; //@line 13746
 return (HEAP8[ctlz_i8 + (x & 255) >> 0] | 0) + 24 | 0; //@line 13747
}
function _ot_decode($op, $json) {
 $op = $op | 0;
 $json = $json | 0;
 var $$0 = 0, $0 = 0, $2 = 0, sp = 0;
 sp = STACKTOP; //@line 3896
 $0 = _cJSON_Parse($json) | 0; //@line 3897
 if (($0 | 0) == 0) {
  $$0 = 6; //@line 3900
 } else {
  $2 = _decode_cjson_op($0, $op) | 0; //@line 3902
  _cJSON_Delete($0); //@line 3903
  $$0 = $2; //@line 3904
 }
 STACKTOP = sp; //@line 3906
 return $$0 | 0; //@line 3906
}
function _sprintf($s, $fmt, $varargs) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $ap = 0, sp = 0;
 sp = STACKTOP; //@line 10251
 STACKTOP = STACKTOP + 16 | 0; //@line 10252
 $ap = sp; //@line 10253
 HEAP32[$ap >> 2] = $varargs; //@line 10254
 $0 = _vsprintf($s, $fmt, $ap) | 0; //@line 10255
 STACKTOP = sp; //@line 10256
 return $0 | 0; //@line 10256
}
function _ot_new_server($send, $event) {
 $send = $send | 0;
 $event = $event | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP; //@line 4020
 $0 = _malloc(12) | 0; //@line 4021
 HEAP32[$0 >> 2] = $send; //@line 4022
 HEAP32[$0 + 4 >> 2] = $event; //@line 4024
 HEAP32[$0 + 8 >> 2] = 0; //@line 4026
 STACKTOP = sp; //@line 4027
 return $0 | 0; //@line 4027
}
function _bitshift64Ashr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >> bits; //@line 13732
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits; //@line 13733
 }
 tempRet0 = (high | 0) < 0 ? -1 : 0; //@line 13735
 return high >> bits - 32 | 0; //@line 13736
}
function _strcat(pdest, psrc) {
 pdest = pdest | 0;
 psrc = psrc | 0;
 var i = 0, pdestEnd = 0;
 pdestEnd = pdest + (_strlen(pdest) | 0) | 0; //@line 13648
 do {
  HEAP8[pdestEnd + i >> 0] = HEAP8[psrc + i >> 0]; //@line 13650
  i = i + 1 | 0; //@line 13651
 } while (HEAP8[psrc + (i - 1) >> 0] | 0);
 return pdest | 0; //@line 13653
}
function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits; //@line 13660
  return low << bits; //@line 13661
 }
 tempRet0 = low << bits - 32; //@line 13663
 return 0; //@line 13664
}
function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >>> bits; //@line 13700
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits; //@line 13701
 }
 tempRet0 = 0; //@line 13703
 return high >>> bits - 32 | 0; //@line 13704
}
function copyTempFloat(ptr) {
 ptr = ptr | 0;
 HEAP8[tempDoublePtr >> 0] = HEAP8[ptr >> 0]; //@line 25
 HEAP8[tempDoublePtr + 1 >> 0] = HEAP8[ptr + 1 >> 0]; //@line 26
 HEAP8[tempDoublePtr + 2 >> 0] = HEAP8[ptr + 2 >> 0]; //@line 27
 HEAP8[tempDoublePtr + 3 >> 0] = HEAP8[ptr + 3 >> 0]; //@line 28
}
function _ot_encode($op) {
 $op = $op | 0;
 var $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP; //@line 3911
 $0 = _cjson_op($op) | 0; //@line 3912
 $1 = _cJSON_PrintUnformatted($0) | 0; //@line 3913
 _cJSON_Delete($0); //@line 3914
 STACKTOP = sp; //@line 3915
 return $1 | 0; //@line 3915
}
function _wctomb($s, $wc) {
 $s = $s | 0;
 $wc = $wc | 0;
 var $$0 = 0, sp = 0;
 sp = STACKTOP; //@line 10016
 if (($s | 0) == 0) {
  $$0 = 0; //@line 10019
 } else {
  $$0 = _wcrtomb($s, $wc, 0) | 0; //@line 10022
 }
 STACKTOP = sp; //@line 10024
 return $$0 | 0; //@line 10024
}
function runPostSets() {}
function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0; //@line 13603
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0; //@line 13604
 return (tempRet0 = h, a - c >>> 0 | 0) | 0; //@line 13605
}
function _vsprintf($s, $fmt, $ap) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP; //@line 13380
 $0 = _vsnprintf($s, 2147483647, $fmt, $ap) | 0; //@line 13381
 STACKTOP = sp; //@line 13382
 return $0 | 0; //@line 13382
}
function _strcpy(pdest, psrc) {
 pdest = pdest | 0;
 psrc = psrc | 0;
 var i = 0;
 do {
  HEAP8[pdest + i >> 0] = HEAP8[psrc + i >> 0]; //@line 13722
  i = i + 1 | 0; //@line 13723
 } while (HEAP8[psrc + (i - 1) >> 0] | 0);
 return pdest | 0; //@line 13725
}
function _ot_new_doc() {
 var $0 = 0, sp = 0;
 sp = STACKTOP; //@line 2847
 $0 = _malloc(20) | 0; //@line 2848
 _array_init($0, 60); //@line 2849
 HEAP32[$0 + 16 >> 2] = 0; //@line 2851
 STACKTOP = sp; //@line 2852
 return $0 | 0; //@line 2852
}
function _array_init($arr, $size) {
 $arr = $arr | 0;
 $size = $size | 0;
 HEAP32[$arr >> 2] = 0; //@line 54
 HEAP32[$arr + 4 >> 2] = 0; //@line 56
 HEAP32[$arr + 8 >> 2] = $size; //@line 58
 HEAP32[$arr + 12 >> 2] = 0; //@line 60
 return;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $1$0 = 0;
 $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0; //@line 13836
 return $1$0 | 0; //@line 13837
}
function _cJSON_PrintUnformatted($item) {
 $item = $item | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP; //@line 1412
 $0 = _print_value($item, 0, 0) | 0; //@line 1413
 STACKTOP = sp; //@line 1414
 return $0 | 0; //@line 1414
}
function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0; //@line 13714
 return (tempRet0 = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0, l | 0) | 0; //@line 13716
}
function _tolower($c) {
 $c = $c | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP; //@line 9959
 $1 = (_isupper($c) | 0) == 0; //@line 9961
 STACKTOP = sp; //@line 9964
 return ($1 ? $c : $c | 32) | 0; //@line 9964
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP; //@line 3
 STACKTOP = STACKTOP + size | 0; //@line 4
 STACKTOP = STACKTOP + 7 & -8; //@line 5
 return ret | 0; //@line 6
}
function _strlen(ptr) {
 ptr = ptr | 0;
 var curr = 0;
 curr = ptr; //@line 13638
 while (HEAP8[curr >> 0] | 0) {
  curr = curr + 1 | 0; //@line 13640
 }
 return curr - ptr | 0; //@line 13642
}
function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 15](a1 | 0, a2 | 0, a3 | 0) | 0; //@line 14104
}
function _frexpl($x, $e) {
 $x = +$x;
 $e = $e | 0;
 var $0 = 0.0, sp = 0;
 sp = STACKTOP; //@line 10008
 $0 = +_frexp($x, $e); //@line 10009
 STACKTOP = sp; //@line 10010
 return +$0;
}
function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if ((__THREW__ | 0) == 0) {
  __THREW__ = threw; //@line 19
  threwValue = value; //@line 20
 }
}
function _array_free($arr) {
 $arr = $arr | 0;
 var sp = 0;
 sp = STACKTOP; //@line 66
 _free(HEAP32[$arr + 12 >> 2] | 0); //@line 69
 STACKTOP = sp; //@line 70
 return;
}
function _ot_iter_init($iter, $op) {
 $iter = $iter | 0;
 $op = $op | 0;
 HEAP32[$iter >> 2] = $op; //@line 3553
 HEAP8[$iter + 12 >> 0] = 0; //@line 3555
 return;
}
function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 15](a1 | 0, a2 | 0) | 0; //@line 14139
}
function jsCall_iiii_3(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall(3, a1 | 0, a2 | 0, a3 | 0) | 0; //@line 14131
}
function jsCall_iiii_2(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall(2, a1 | 0, a2 | 0, a3 | 0) | 0; //@line 14124
}
function jsCall_iiii_1(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall(1, a1 | 0, a2 | 0, a3 | 0) | 0; //@line 14117
}
function jsCall_iiii_0(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall(0, a1 | 0, a2 | 0, a3 | 0) | 0; //@line 14110
}
function _ot_server_open($server, $doc) {
 $server = $server | 0;
 $doc = $doc | 0;
 HEAP32[$server + 8 >> 2] = $doc; //@line 4035
 return;
}
function _ot_client_open($client, $doc) {
 $client = $client | 0;
 $doc = $doc | 0;
 HEAP32[$client + 8 >> 2] = $doc; //@line 2279
 return;
}
function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 15](a1 | 0) | 0; //@line 14069
}
function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 15](a1 | 0); //@line 14174
}
function b1(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 abort(1); //@line 14206
 return 0; //@line 14206
}
function jsCall_iii_3(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall(3, a1 | 0, a2 | 0) | 0; //@line 14166
}
function jsCall_iii_2(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall(2, a1 | 0, a2 | 0) | 0; //@line 14159
}
function jsCall_iii_1(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall(1, a1 | 0, a2 | 0) | 0; //@line 14152
}
function jsCall_iii_0(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall(0, a1 | 0, a2 | 0) | 0; //@line 14145
}
function b2(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 abort(2); //@line 14207
 return 0; //@line 14207
}
function _isupper($c) {
 $c = $c | 0;
 return ($c + -65 | 0) >>> 0 < 26 | 0; //@line 9954
}
function jsCall_ii_3(a1) {
 a1 = a1 | 0;
 return jsCall(3, a1 | 0) | 0; //@line 14096
}
function jsCall_ii_2(a1) {
 a1 = a1 | 0;
 return jsCall(2, a1 | 0) | 0; //@line 14089
}
function jsCall_ii_1(a1) {
 a1 = a1 | 0;
 return jsCall(1, a1 | 0) | 0; //@line 14082
}
function jsCall_ii_0(a1) {
 a1 = a1 | 0;
 return jsCall(0, a1 | 0) | 0; //@line 14075
}
function b0(p0) {
 p0 = p0 | 0;
 abort(0); //@line 14205
 return 0; //@line 14205
}
function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value; //@line 43
}
function jsCall_vi_3(a1) {
 a1 = a1 | 0;
 jsCall(3, a1 | 0); //@line 14201
}
function jsCall_vi_2(a1) {
 a1 = a1 | 0;
 jsCall(2, a1 | 0); //@line 14194
}
function jsCall_vi_1(a1) {
 a1 = a1 | 0;
 jsCall(1, a1 | 0); //@line 14187
}
function jsCall_vi_0(a1) {
 a1 = a1 | 0;
 jsCall(0, a1 | 0); //@line 14180
}
function stackRestore(top) {
 top = top | 0;
 STACKTOP = top; //@line 13
}
function getTempRet0() {
 return tempRet0 | 0; //@line 46
}
function b3(p0) {
 p0 = p0 | 0;
 abort(3); //@line 14208
}
function stackSave() {
 return STACKTOP | 0; //@line 9
}

// EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_ii = [b0,b0,jsCall_ii_0,b0,jsCall_ii_1,b0,jsCall_ii_2,b0,jsCall_ii_3,b0,_malloc,b0,b0,b0,b0,b0];
  var FUNCTION_TABLE_iiii = [b1,b1,jsCall_iiii_0,b1,jsCall_iiii_1,b1,jsCall_iiii_2,b1,jsCall_iiii_3,b1,_sn_write,b1,b1,b1,b1,b1];
  var FUNCTION_TABLE_iii = [b2,b2,jsCall_iii_0,b2,jsCall_iii_1,b2,jsCall_iii_2,b2,jsCall_iii_3,b2,b2,b2,b2,b2,b2,b2];
  var FUNCTION_TABLE_vi = [b3,b3,jsCall_vi_0,b3,jsCall_vi_1,b3,jsCall_vi_2,b3,jsCall_vi_3,b3,_free,b3,b3,b3,b3,b3];

    return { _strlen: _strlen, _strcat: _strcat, _ot_insert: _ot_insert, _ot_client_open: _ot_client_open, _ot_client_apply: _ot_client_apply, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _ot_encode: _ot_encode, _memset: _memset, _ot_delete: _ot_delete, _memcpy: _memcpy, _i64Subtract: _i64Subtract, _realloc: _realloc, _i64Add: _i64Add, _ot_new_op: _ot_new_op, _ot_server_receive: _ot_server_receive, _ot_decode: _ot_decode, _ot_snapshot: _ot_snapshot, _ot_new_client: _ot_new_client, _ot_client_receive: _ot_client_receive, _malloc: _malloc, _ot_skip: _ot_skip, _ot_new_server: _ot_new_server, _ot_server_open: _ot_server_open, _strcpy: _strcpy, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_ii: dynCall_ii, dynCall_iiii: dynCall_iiii, dynCall_iii: dynCall_iii, dynCall_vi: dynCall_vi };
  })
  // EMSCRIPTEN_END_ASM
  ({ "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array }, { "abort": abort, "assert": assert, "asmPrintInt": asmPrintInt, "asmPrintFloat": asmPrintFloat, "min": Math_min, "jsCall": jsCall, "invoke_ii": invoke_ii, "invoke_iiii": invoke_iiii, "invoke_iii": invoke_iii, "invoke_vi": invoke_vi, "_fabs": _fabs, "_llvm_pow_f64": _llvm_pow_f64, "_send": _send, "___setErrNo": ___setErrNo, "_floor": _floor, "_fflush": _fflush, "_pwrite": _pwrite, "_strerror_r": _strerror_r, "__reallyNegative": __reallyNegative, "_sbrk": _sbrk, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_fileno": _fileno, "_sysconf": _sysconf, "_mkport": _mkport, "_write": _write, "___errno_location": ___errno_location, "_abort": _abort, "_fwrite": _fwrite, "_time": _time, "_fprintf": _fprintf, "_strerror": _strerror, "__formatString": __formatString, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "NaN": NaN, "Infinity": Infinity, "_stderr": _stderr }, buffer);
  var _strlen = Module["_strlen"] = asm["_strlen"];
var _strcat = Module["_strcat"] = asm["_strcat"];
var _ot_insert = Module["_ot_insert"] = asm["_ot_insert"];
var _ot_client_open = Module["_ot_client_open"] = asm["_ot_client_open"];
var _ot_client_apply = Module["_ot_client_apply"] = asm["_ot_client_apply"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _ot_encode = Module["_ot_encode"] = asm["_ot_encode"];
var _memset = Module["_memset"] = asm["_memset"];
var _ot_delete = Module["_ot_delete"] = asm["_ot_delete"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _ot_new_op = Module["_ot_new_op"] = asm["_ot_new_op"];
var _ot_server_receive = Module["_ot_server_receive"] = asm["_ot_server_receive"];
var _ot_decode = Module["_ot_decode"] = asm["_ot_decode"];
var _ot_snapshot = Module["_ot_snapshot"] = asm["_ot_snapshot"];
var _ot_new_client = Module["_ot_new_client"] = asm["_ot_new_client"];
var _ot_client_receive = Module["_ot_client_receive"] = asm["_ot_client_receive"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _ot_skip = Module["_ot_skip"] = asm["_ot_skip"];
var _ot_new_server = Module["_ot_new_server"] = asm["_ot_new_server"];
var _ot_server_open = Module["_ot_server_open"] = asm["_ot_server_open"];
var _strcpy = Module["_strcpy"] = asm["_strcpy"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
  
  Runtime.stackAlloc = asm['stackAlloc'];
  Runtime.stackSave = asm['stackSave'];
  Runtime.stackRestore = asm['stackRestore'];
  Runtime.setTempRet0 = asm['setTempRet0'];
  Runtime.getTempRet0 = asm['getTempRet0'];
  

// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram'] || '/bin/this.program'), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  // TODO We should handle this differently based on environment.
  // In the browser, the best we can do is throw an exception
  // to halt execution, but in node we could process.exit and
  // I'd imagine SM shell would have something equivalent.
  // This would let us set a proper exit status (which
  // would be great for checking test exit statuses).
  // https://github.com/kripken/emscripten/issues/1371

  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}






//# sourceMappingURL=polyphony-emscripten.js.map
    (function() {
        "use strict";

        var cFuncs = {};
        cFuncs.otNewOp = Module.cwrap("ot_new_op", "number", ["number", "string"]);
        cFuncs.otSkip = Module.cwrap("ot_skip", null, ["number", "number"]);
        cFuncs.otInsert = Module.cwrap("ot_insert", null, ["number", "string"]);
        cFuncs.otDelete = Module.cwrap("ot_delete", null, ["number", "number"]);
        cFuncs.otEncode = Module.cwrap("ot_encode", "string", ["number"]);
        cFuncs.otDecode = Module.cwrap("ot_decode", "number", ["number", "string"]);
        cFuncs.otSnapshot = Module.cwrap("ot_snapshot", "string", ["number"]);
        cFuncs.otNewClient = Module.cwrap("ot_new_client", "number", ["number", "number", "number"]);
        cFuncs.otClientOpen = Module.cwrap("ot_client_open", null, ["number", "number"]);
        cFuncs.otClientReceive = Module.cwrap("ot_client_receive", null, ["number", "string"]);
        cFuncs.otClientApply = Module.cwrap("ot_client_apply", null, ["number", "number"]);
        cFuncs.otNewServer = Module.cwrap("ot_new_server", "number", ["number", "number"]);
        cFuncs.otServerOpen = Module.cwrap("ot_server_open", null, ["number", "number"]);
        cFuncs.otServerReceive = Module.cwrap("ot_server_receive", null, ["number", "string"]);
        polyphony.cFuncs = cFuncs;

/* eslint-env node, browser */

"use strict";

polyphony.Client = function(serverAddress) {
    this.onEvent = null;
    this._socket = new WebSocket(serverAddress);
    this._socket.onopen = function() {
        console.log("WebSocket connection open.");
    };

    var sendFunc = Runtime.addFunction(function(stringPointer) {
        var string = Module.Pointer_stringify(stringPointer);
        this._socket.send(string);
    }.bind(this));

    var eventFunc = Runtime.addFunction(function(type, nativeOp) {
        if (this.onEvent) {
            this.onEvent(type, new polyphony.Op(nativeOp));
        }
    }.bind(this));

    this._socket.onmessage = function(e) {
        if (!this._otClient) {
            var obj = JSON.parse(e.data);
            this._otClient = cFuncs.otNewClient(sendFunc, eventFunc, obj.clientId);
            cFuncs.otClientReceive(this._otClient, obj.lastOp);
            return;
        }
        cFuncs.otClientReceive(this._otClient, e.data);
    }.bind(this);
};

polyphony.Client.prototype = {
    apply: function(op) {
        var ptr = Module._malloc(4);
        Module.setValue(ptr, op.nativeOp, "*");
        console.time("native");
        cFuncs.otClientApply(this._otClient, ptr);
        console.timeEnd("native");
    },
    close: function() {
        this._socket.close();
    }
};
"use strict";

/**
 * Decodes a JSON string into an Op.
 *
 * @param {string} json The JSON string to decode.
 * @return {polyphony.Op} The decoded operation.
 */
polyphony.Decode = function(json) {
    var op = new polyphony.Op();
    var error = cFuncs.otDecode(op.nativeOp, json);
    if (error !== 0) {
        throw new Error("Couldn't decode JSON into a valid operation. Error " +
            "code " + error + ".");
    }

    return op;
};
"use strict";

polyphony.encode = function(op) {
    return cFuncs.otEncode(op.nativeOp);
};
"use strict";

/**
 * Creates an instance of Op.
 * @param {NativeOp} [nativeOp] - A pointer to an existing native operation.
 * @constructor
 */
polyphony.Op = function Op(nativeOp) {
    if (!nativeOp) {
        nativeOp = cFuncs.otNewOp(0, "");
    }

    Object.defineProperty(this, "nativeOp", {
        get: function() {
            return nativeOp;
        }
    });
};

polyphony.Op.prototype = {
    get nativeOp() {
        return this.nativeOp;
    },
    apply: function(skipFunc, insertFunc, deleteFunc) {
        var json = cFuncs.otEncode(this.nativeOp);
        var jsonObject = JSON.parse(json);
        var index = 0;
        for (var i = 0; i < jsonObject.components.length; i++) {
            var component = jsonObject.components[i];
            switch (component.type) {
                case "skip":
                    if (skipFunc) {
                        skipFunc(index, component.count);
                    }
                    index += component.count;
                    break;
                case "insert":
                    if (insertFunc) {
                        insertFunc(index, component.text);
                    }
                    break;
                case "delete":
                    if (deleteFunc) {
                        deleteFunc(index, component.count);
                    }
                    index += component.count;
                    break;
            }
        }
    },
    skip: function(count) {
        cFuncs.otSkip(this.nativeOp, count);
    },
    insert: function(text) {
        cFuncs.otInsert(this.nativeOp, text);
    },
    delete: function(count) {
        cFuncs.otDelete(this.nativeOp, count);
    },
    snapshot: function() {
        return cFuncs.otSnapshot(this.nativeOp);
    }
};
"use strict";

polyphony.QuillAdapter = function(editor, client) {
    this.editor = editor;

    editor.on("text-change", function(delta) {
        var op = this.deltaToOperation(delta);
        client.apply(op);
    }.bind(this));

    client.onEvent = function(type, op) {
        if (type === 3) {
            editor.editor.checkUpdate();
            return;
        }
        var delta = this.operationToDelta(op);
        editor.updateContents(delta);
    }.bind(this);
};

polyphony.QuillAdapter.prototype = {
    deltaToOperation: function(delta) {
        var op = new polyphony.Op();
        var position = 0;

        function fillSkips(index) {
            if (index > position) {
                var count = index - position;
                op.skip(count);
                position = index;
            }
        }

        delta.apply(
            function(index, text) {
                fillSkips(index);
                op.insert(text);
                position += text.length;
            },
            function(index, length) {
                fillSkips(index);
                op.delete(length);
            }
        );

        fillSkips(delta.endLength);

        return op;
    },
    operationToDelta: function(op) {
        var deltaOps = [];
        op.apply(
            function skipFunc(index, count) {
                var retain = {
                    start: index,
                    end: index + count
                };
                deltaOps.push(retain);
            },
            function insertFunc(index, text) {
                var insert = {
                    value: text
                };
                deltaOps.push(insert);
            }
        );

        return {
            startLength: this.editor.getLength(),
            ops: deltaOps
        };
    }
};
"use strict";

/**
 * Creates an OT server using a given SocketServer.
 * @param {SocketServer} socketServer - The WebSocket to listen on.
 * @constructor
 */
polyphony.Server = function(socketServer) {
    this.socketServer = socketServer;

    var sendFunc = Runtime.addFunction(function(stringPointer) {
        var string = Module.Pointer_stringify(stringPointer);
        socketServer.broadcast(string);
    });

    var nativeServer = cFuncs.otNewServer(sendFunc, null);

    var lastId = 0;
    socketServer.onConnection = function(socket) {
        socket.onMessage = function(message) {
            cFuncs.otServerReceive(nativeServer, message);
        };

        lastId++;
        var message = {
            clientId: lastId
        };

        var nativeDocPtr = Module.getValue(nativeServer + 8, "*");
        if (nativeDocPtr !== 0) {
            var nativeOpPtr = Module.getValue(nativeDocPtr + 16, "*");
            var lastOpJSON = cFuncs.otEncode(nativeOpPtr);

            if (lastOpJSON) {
                message.lastOp = lastOpJSON;
            }
        }

        console.log("Acknowledging new client: %O", message);
        socket.send(JSON.stringify(message));
    };
};

polyphony.Server.prototype = {
    close: function() {
        this.socketServer.close();
    }
};
/* eslint no-unused-vars:0 */

"use strict";

/**
 * An interface that defines methods for communicating with clients via sockets.
 * @constructor
 */
polyphony.SocketServer = function() {};

polyphony.SocketServer.prototype = {
    /**
     * Broadcasts a message to all connected clients.
     * @abstract
     * @param {String} message - The message to broadcast.
     */
    broadcast: function(message) {},

    /**
     * Called whenever a new client connection occurs.
     * @abstract
     * @param {Socket} socket - A socket for the new connection.
     */
    onConnection: function(socket) {},

    /**
     * Closes the server and all of its connections.
     * @abstract
     */
    close: function() {}
};
/* eslint no-unused-vars:0 */

"use strict";

/**
 * An interface that defines methods for communicating with a single client.
 * @constructor
 */
polyphony.Socket = function() {};

polyphony.Socket.prototype = {
    /**
     * Called whenever a message is received.
     * @abstract
     * @param  {String} message - The received message.
     */
    onMessage: function(message) {},

    /**
     * Sends a message.
     * @abstract
     * @param  {String} message - The message to send.
     */
    send: function(message) {}
};

        function moduleExists() {
            return (typeof module !== "undefined" && module.exports);
        }

        if (moduleExists()) {
            module.exports = polyphony;
        }
    }());
}());
